,dataset,split,task_id,model,code,result,compiled,passed_tests,avg_test_time,loc,lloc,sloc,comments,multi,blank,single_comments,CC,h1,h2,N1,N2,vocabulary,length,calculated_length,volume,difficulty,effort,time,bugs,MI
0,mbpp,validation,0,claude_3_haiku_0_shot_v6_prompt,"def find_Min_Sum(num):
    factors = []
    for i in range(2, int(num ** 0.5) + 1):
        while num % i == 0:
            factors.append(i)
            num //= i
    if num > 1:
        factors.append(num)
    return sum(factors)",passed,True,True,2.8219766666855623e-05,9,9,9,0,0,0,0,4,6,7,6,12,13,18,35.161259458730164,66.60791492653966,5.142857142857143,342.5549910507754,19.03083283615419,0.022202638308846556,65.87782461893471
1,mbpp,validation,1,claude_3_haiku_0_shot_v6_prompt,"from collections import Counter

def count_element_freq(test_tuple):
    """"""
    Count the frequency of elements in a mixed nested tuple.
    
    Args:
        test_tuple (tuple): The input tuple, which may contain nested tuples.
    
    Returns:
        dict: A dictionary where the keys are the unique elements and the values are their frequencies.
    """"""
    flattened = [item for item in _flatten(test_tuple)]
    return dict(Counter(flattened))

def _flatten(test_tuple):
    """"""
    Flatten a nested tuple.
    
    Args:
        test_tuple (tuple): The input tuple, which may contain nested tuples.
    
    Yields:
        Any: The flattened elements from the input tuple.
    """"""
    for item in test_tuple:
        if isinstance(item, tuple):
            yield from _flatten(item)
        else:
            yield item",passed,True,True,0.00012478409999895727,30,12,10,0,14,6,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
2,mbpp,validation,2,claude_3_haiku_0_shot_v6_prompt,"def add_str(test_tuple, string_to_add):
    """"""
    Converts a tuple into a list by adding the given string after every element.

    Args:
        test_tuple (tuple): The input tuple to be converted.
        string_to_add (str): The string to be added after each element.

    Returns:
        list: The resulting list with the string added after each element.
    """"""
    result = []
    for element in test_tuple:
        result.append(element)
        result.append(string_to_add)
    return result",passed,True,True,8.727423333425577e-05,16,7,6,0,8,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
3,mbpp,validation,3,claude_3_haiku_0_shot_v6_prompt,"def sum_elements(tuples):
    total = 0
    for tup in tuples:
        total += sum(tup)
    return total",failed: 'int' object is not iterable,True,False,,5,5,5,0,0,0,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,79.7423427057672
4,mbpp,validation,4,claude_3_haiku_0_shot_v6_prompt,"def modular_sum(arr, n, m):
    if n > m:
        return True

    dp = [False] * m
    dp[0] = True

    for num in arr:
        temp = [False] * m
        for i in range(m):
            if dp[i]:
                temp[(i + num) % m] = True
        for i in range(m):
            if temp[i]:
                dp[i] = True

    return dp[0]",failed: ,True,False,,17,14,14,0,0,3,0,7,4,7,5,10,11,15,27.651484454403228,51.89147427955947,2.857142857142857,148.26135508445563,8.236741949136423,0.01729715809318649,62.04775896858097
5,mbpp,validation,5,claude_3_haiku_0_shot_v6_prompt,"def radix_sort(nums):
    """"""
    Sorts a list of integers using the Radix Sort algorithm.

    Args:
        nums (list): A list of integers to be sorted.

    Returns:
        list: The sorted list of integers.
    """"""
    if not nums:
        return nums

    # Get the maximum digit in the list
    max_num = max(nums)

    # Do counting sort for every digit. Note that instead of passing
    # digit number, exp is passed. exp is 10^i where i is current
    # digit number
    exp = 1
    while max_num / exp > 0:
        # Create a list of lists to store the elements in each bucket
        buckets = [[] for _ in range(10)]

        # Put elements into the buckets
        for num in nums:
            index = (num // exp) % 10
            buckets[index].append(num)

        # Collect the elements from the buckets back into the original list
        i = 0
        for bucket in buckets:
            for num in bucket:
                nums[i] = num
                i += 1

        # Move to the next digit
        exp *= 10

    return nums",passed,True,True,0.002637187200000805,40,18,17,8,7,8,8,7,7,10,7,13,17,20,52.87076540327685,81.7492568250068,4.55,371.9591185537809,20.66439547521005,0.027249752275002266,85.4863539503261
6,mbpp,validation,6,claude_3_haiku_0_shot_v6_prompt,"def largest_pos(numbers):
    """"""
    Find the largest positive number from the given list.

    Args:
        numbers (list): A list of numbers.

    Returns:
        int: The largest positive number in the list.
    """"""
    if not numbers:
        return None

    largest = float('-inf')
    for num in numbers:
        if num > 0 and num > largest:
            largest = num

    return largest if largest != float('-inf') else None",passed,True,True,4.6395700000001484e-05,19,9,8,0,7,4,0,6,4,7,5,9,11,14,27.651484454403228,48.43204266092217,2.5714285714285716,124.53953827094274,6.918863237274596,0.016144014220307392,93.86569546127278
7,mbpp,validation,7,claude_3_haiku_0_shot_v6_prompt,"import math

def sqrt_root(number):
    """"""
    Calculates the square root of a perfect number.

    Args:
        number (int): The number to find the square root of.

    Returns:
        float: The square root of the input number.
    """"""
    return math.sqrt(number)",passed,True,True,2.6108866586582734e-05,13,4,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
8,mbpp,validation,8,claude_3_haiku_0_shot_v6_prompt,"import math

def volume_tetrahedron(edge_length):
    """"""
    Calculates the volume of a tetrahedron given its edge length.

    Args:
        edge_length (float): The length of one edge of the tetrahedron.

    Returns:
        float: The volume of the tetrahedron, rounded to 2 decimal places.
    """"""
    return round((edge_length ** 3) / (6 * math.sqrt(3)), 2)",failed: ,True,False,,13,4,3,0,7,3,0,1,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,75.85339325182143
9,mbpp,validation,9,claude_3_haiku_0_shot_v6_prompt,"def gcd(a, b):
    """"""
    Compute the greatest common divisor of two integers using the Euclidean algorithm.
    """"""
    while b:
        a, b = b, a % b
    return a

def lcm(a, b):
    """"""
    Compute the least common multiple of two integers.
    """"""
    return abs(a * b) // gcd(a, b)

def get_lcm(numbers):
    """"""
    Compute the least common multiple of a list of integers.
    """"""
    if not numbers:
        return 0
    result = numbers[0]
    for num in numbers[1:]:
        result = lcm(result, num)
    return result",passed,True,True,4.8264333334676245e-05,24,16,13,0,9,2,0,2,4,7,4,7,11,11,27.651484454403228,38.053747805010275,2.0,76.10749561002055,4.228194200556697,0.012684582601670092,91.02635405672872
10,mbpp,validation,10,claude_3_haiku_0_shot_v6_prompt,"def check_isosceles(a, b, c):
    """"""
    Checks if a triangle is scalene.
    
    Args:
        a (float): Length of the first side of the triangle.
        b (float): Length of the second side of the triangle.
        c (float): Length of the third side of the triangle.
    
    Returns:
        bool: True if the triangle is scalene, False otherwise.
    """"""
    return a != b and b != c and a != c",passed,True,True,3.254783333333696e-05,13,3,2,0,9,2,0,3,2,6,4,9,8,13,17.509775004326936,39.0,1.5,58.5,3.25,0.013,50.26363991980823
11,mbpp,validation,11,claude_3_haiku_0_shot_v6_prompt,"def lbs(arr):
    n = len(arr)
    lis = [1] * n  # Initialize the longest increasing subsequence array
    lds = [1] * n  # Initialize the longest decreasing subsequence array

    # Compute the longest increasing subsequence
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j]:
                lis[i] = max(lis[i], lis[j] + 1)

    # Compute the longest decreasing subsequence
    for i in range(n - 2, -1, -1):
        for j in range(i + 1, n):
            if arr[i] > arr[j]:
                lds[i] = max(lds[i], lds[j] + 1)

    # Find the maximum length of the bitonic subsequence
    max_length = 0
    for i in range(n):
        max_length = max(max_length, lis[i] + lds[i] - 1)

    return max_length",passed,True,True,0.00012869683333273466,23,16,16,5,0,4,3,8,5,15,12,22,20,34,70.2129994085646,146.94555522617034,3.6666666666666665,538.8003691626245,29.933353842368028,0.048981851742056784,84.27042675914744
12,mbpp,validation,12,claude_3_haiku_0_shot_v6_prompt,"import re

def check_string(input_str):
    rules = [
        lambda s: any(char.isupper() for char in s),
        lambda s: any(char.islower() for char in s),
        lambda s: any(char.isdigit() for char in s),
        lambda s: len(s) >= 8
    ]

    violations = [
        ""String must have at least one uppercase character."",
        ""String must have at least one lowercase character."",
        ""String must have at least one number."",
        ""String length must be at least 8 characters.""
    ]

    result = []
    for rule, violation in zip(rules, violations):
        if not rule(input_str):
            result.append(violation)

    if not result:
        result.append(""Valid string."")

    return result",failed: ,True,False,,26,12,21,0,0,5,0,7,2,4,3,4,6,7,10.0,18.094737505048094,1.0,18.094737505048094,1.0052631947248942,0.006031579168349364,66.71186098903641
13,mbpp,validation,13,claude_3_haiku_0_shot_v6_prompt,"def max_sum_increasing_subsequence(arr):
    n = len(arr)
    msis = [num for num in arr]

    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and msis[i] < msis[j] + arr[i]:
                msis[i] = msis[j] + arr[i]

    return max(msis)",failed: max_sum_increasing_subsequence() takes 1 positional argument but 2 were given,True,False,,10,8,8,0,0,2,0,6,4,10,5,10,14,15,41.219280948873624,57.110323830864054,2.0,114.22064766172811,6.345591536762672,0.019036774610288017,67.19247106981769
14,mbpp,validation,14,claude_3_haiku_0_shot_v6_prompt,"import math

def parallel_lines(line1, line2):
    """"""
    Checks whether two given lines are parallel or not.

    Args:
        line1 (tuple): A tuple containing the slope and y-intercept of the first line.
        line2 (tuple): A tuple containing the slope and y-intercept of the second line.

    Returns:
        bool: True if the lines are parallel, False otherwise.
    """"""
    if line1[1] == line2[1]:
        return True
    elif abs(line1[0] - line2[0]) < 1e-9:
        return True
    else:
        return False",failed: ,True,False,,19,9,8,0,8,3,0,3,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,94.233020908961
15,mbpp,validation,15,claude_3_haiku_0_shot_v6_prompt,"import re

def capitalize_first_last_letters(input_string):
    """"""
    Capitalizes the first and last letters of each word in a given string.
    
    Args:
        input_string (str): The input string to be processed.
    
    Returns:
        str: The modified string with the first and last letters of each word capitalized.
    """"""
    words = re.split(r'\s+', input_string.strip())
    capitalized_words = [word[0].upper() + word[1:-1] + word[-1].upper() for word in words]
    return ' '.join(capitalized_words)",passed,True,True,3.203496666704571e-05,15,7,5,0,7,3,0,2,2,5,4,6,7,10,13.60964047443681,28.07354922057604,1.2,33.688259064691245,1.8715699480384025,0.009357849740192013,89.76446362815054
16,mbpp,validation,16,claude_3_haiku_0_shot_v6_prompt,"def get_pairs_count(arr, target_sum):
    """"""
    Finds the count of pairs in the given array whose sum is equal to the target sum.

    Args:
        arr (list): The input array of integers.
        target_sum (int): The target sum to find pairs for.

    Returns:
        int: The count of pairs whose sum is equal to the target sum.
    """"""
    pairs_count = 0
    seen_numbers = set()

    for num in arr:
        complement = target_sum - num
        if complement in seen_numbers:
            pairs_count += 1
        seen_numbers.add(num)

    return pairs_count",failed: get_pairs_count() takes 2 positional arguments but 3 were given,True,False,,21,10,9,0,8,4,0,3,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,94.71625800602862
17,mbpp,validation,17,claude_3_haiku_0_shot_v6_prompt,"import sys

def min_length(list_of_lists):
    if not list_of_lists:
        return 0, []

    min_length = sys.maxsize
    min_list = None

    for lst in list_of_lists:
        if len(lst) < min_length:
            min_length = len(lst)
            min_list = lst

    return min_length, min_list",passed,True,True,8.091313333125072e-05,15,11,11,0,0,4,0,4,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,69.28921068613067
18,mbpp,validation,18,claude_3_haiku_0_shot_v6_prompt,"def jacobsthal_lucas(n):
    if n < 0:
        raise ValueError(""n must be a non-negative integer"")
    
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + 2 * b
        return b",failed: ,True,False,,13,12,12,0,0,1,0,5,4,7,6,12,11,18,27.651484454403228,62.26976913547136,3.4285714285714284,213.49635132161606,11.860908406756447,0.020756589711823786,63.222711552132466
19,mbpp,validation,19,claude_3_haiku_0_shot_v6_prompt,"import math

def negative_count(nums):
    """"""
    Calculates the ratio of negative numbers in a given list of integers.

    Args:
        nums (list): A list of integers.

    Returns:
        float: The ratio of negative numbers in the list, rounded to 2 decimal places.
    """"""
    negative_count = sum(1 for num in nums if num < 0)
    total_count = len(nums)
    ratio = negative_count / total_count
    return round(ratio, 2)",passed,True,True,8.776579999979125e-05,16,7,6,0,7,3,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,95.79254141185018
20,mbpp,validation,20,claude_3_haiku_0_shot_v6_prompt,"def min_coins(coins, n, target_value):
    """"""
    Find the minimum number of coins that make the given target value.

    Args:
        coins (list): A list of coin denominations.
        n (int): The number of coin denominations.
        target_value (int): The target value to be made.

    Returns:
        int: The minimum number of coins required to make the target value.
    """"""
    # Create a table to store the minimum number of coins required for each value
    dp = [float('inf')] * (target_value + 1)
    dp[0] = 0

    # Iterate through the coin denominations and update the table
    for coin in coins:
        for i in range(coin, target_value + 1):
            dp[i] = min(dp[i], dp[i - coin] + 1)

    # If the target value cannot be made, return -1
    return dp[target_value] if dp[target_value] != float('inf') else -1",passed,True,True,7.4521433331635e-05,23,8,7,3,9,4,3,4,5,9,7,13,14,20,40.13896548741762,76.14709844115208,3.611111111111111,274.97563325971583,15.276424069984213,0.025382366147050694,78.73876708544435
21,mbpp,validation,21,claude_3_haiku_0_shot_v6_prompt,"def check_permutation(str1, str2):
    """"""
    Checks if two given strings are permutations of each other.
    
    Args:
        str1 (str): The first string.
        str2 (str): The second string.
    
    Returns:
        bool: True if the strings are permutations, False otherwise.
    """"""
    if len(str1) != len(str2):
        return False
    
    sorted_str1 = sorted(str1)
    sorted_str2 = sorted(str2)
    
    return sorted_str1 == sorted_str2",passed,True,True,3.62097666614621e-05,18,7,6,0,8,4,0,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,92.86816701550839
22,mbpp,validation,22,claude_3_haiku_0_shot_v6_prompt,"import re

def remove_datatype(test_tuple, data_type):
    return tuple(filter(lambda x: not isinstance(x, data_type), test_tuple))",failed: ,True,False,,4,4,3,0,0,1,0,1,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,84.62436608827255
23,mbpp,validation,23,claude_3_haiku_0_shot_v6_prompt,"import re

def search_literal(pattern, text):
    try:
        match = re.search(pattern, text)
        if match:
            start = match.start()
            end = match.end()
            return (start, end)
        else:
            return (-1, -1)
    except (AttributeError, TypeError):
        return (-1, -1)",passed,True,True,4.26435000008496e-05,13,12,12,0,0,1,0,3,1,1,4,4,2,8,0.0,8.0,2.0,16.0,0.8888888888888888,0.0026666666666666666,69.73182237233873
24,mbpp,validation,24,claude_3_haiku_0_shot_v6_prompt,"import math

def topbottom_surfacearea(radius):
    """"""
    Calculates the top or bottom surface area of a cylinder.

    Args:
        radius (float): The radius of the cylinder.

    Returns:
        float: The top or bottom surface area of the cylinder.
    """"""
    return math.pi * radius ** 2",failed: ,True,False,,13,4,3,0,7,3,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,77.70672809662328
25,mbpp,validation,25,claude_3_haiku_0_shot_v6_prompt,"def nth_items(items, n):
    """"""
    Selects every nth item from a list.

    Args:
        items (list): The input list.
        n (int): The step size to select every nth item.

    Returns:
        list: A new list containing every nth item from the input list.
    """"""
    return items[::n]",passed,True,True,6.847946666918384e-05,12,4,2,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
26,mbpp,validation,26,claude_3_haiku_0_shot_v6_prompt,"import re

def first_repeated_word(text):
    words = re.findall(r'\w+', text.lower())
    seen = set()
    for word in words:
        if word in seen:
            return word
        seen.add(word)
    return 'None'",passed,True,True,3.346006666665365e-05,10,9,9,0,0,1,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,74.03933453534945
27,mbpp,validation,27,claude_3_haiku_0_shot_v6_prompt,"import re

def string_list_to_tuple(input_string):
    """"""
    Converts a given string to a tuple, excluding whitespace characters.
    
    Args:
        input_string (str): The input string to be converted.
    
    Returns:
        tuple: A tuple containing the non-whitespace characters from the input string.
    """"""
    return tuple(char for char in input_string if not char.isspace())",passed,True,True,6.567616666567726e-05,13,4,3,0,7,3,0,3,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,83.66654161017219
28,mbpp,validation,28,claude_3_haiku_0_shot_v6_prompt,"def basesnum_coresspondingnum(bases_num, index):
    """"""
    Calculates the power of each number in `bases_num` raised to the corresponding number in `index`.

    Args:
        bases_num (list): A list of numbers to be used as the base.
        index (list): A list of numbers to be used as the exponent.

    Returns:
        list: A list of the calculated powers.
    """"""
    return [base ** exp for base, exp in zip(bases_num, index)]",passed,True,True,0.00018384990000110216,12,3,2,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.93689225219502
29,mbpp,validation,29,claude_3_haiku_0_shot_v6_prompt,"def find_Diff(arr):
    """"""
    Find the difference between the highest and lowest frequencies in a given array.
    
    Args:
        arr (list): The input array.
    
    Returns:
        int: The difference between the highest and lowest frequencies.
    """"""
    # Count the frequency of each element in the array
    freq = {}
    for num in arr:
        freq[num] = freq.get(num, 0) + 1
    
    # Find the highest and lowest frequencies
    max_freq = max(freq.values())
    min_freq = min(freq.values())
    
    # Calculate the difference
    return max_freq - min_freq",failed: find_Diff() takes 1 positional argument but 2 were given,True,False,,21,8,7,3,7,4,3,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,89.73670499187
30,mbpp,validation,30,claude_3_haiku_0_shot_v6_prompt,"import math

def get_proper_divisors(n):
    """"""
    Returns the sum of all proper divisors of the given number.
    """"""
    divisors = set()
    for i in range(1, int(math.sqrt(n)) + 1):
        if n % i == 0:
            divisors.add(i)
            divisors.add(n // i)
    return sum(divisors) - n

def check_abundant(n):
    """"""
    Checks if the given number is abundant.
    An abundant number is a number whose sum of proper divisors is greater than the number itself.
    """"""
    return get_proper_divisors(n) > n",passed,True,True,3.0253066665864025e-05,19,12,10,0,7,2,0,3,6,9,6,12,15,18,44.039100017307746,70.32403072095333,4.0,281.2961228838133,15.627562382434073,0.02344134357365111,91.9748259367217
31,mbpp,validation,31,claude_3_haiku_0_shot_v6_prompt,"import re

def fill_spaces(text):
    return re.sub(r'[ ,.]', ':', text)",passed,True,True,3.5318666656773225e-05,4,3,3,0,0,1,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
32,mbpp,validation,32,claude_3_haiku_0_shot_v6_prompt,"def count_digits(num1, num2):
    total = num1 + num2
    return len(str(total))",passed,True,True,4.816120000062559e-05,3,3,3,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,84.71624627594792
33,mbpp,validation,33,claude_3_haiku_0_shot_v6_prompt,"def flatten_tuple(test_list):
    """"""
    Flattens a list of tuples into a single string.

    Args:
        test_list (list): A list of tuples.

    Returns:
        str: A space-separated string containing all the elements from the input list of tuples.
    """"""
    return ' '.join(item for tup in test_list for item in tup)",passed,True,True,9.043313333071032e-05,11,3,2,0,7,2,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
34,mbpp,validation,34,claude_3_haiku_0_shot_v6_prompt,"def toggle_F_and_L_bits(n):
    """"""
    Toggles the first and last bits of a given number.
    
    Args:
        n (int): The number to toggle the first and last bits of.
    
    Returns:
        int: The number with the first and last bits toggled.
    """"""
    if n == 1:
        return 0
    
    # Set all bits between the first and last bits
    n |= (n >> 1) | (n >> 2) | (n >> 4) | (n >> 8) | (n >> 16)
    
    # Toggle the first and last bits
    return n ^ ((n + 1) >> 1) - 1",failed: ,True,False,,18,6,5,2,7,4,2,2,6,18,15,30,24,45,90.56842503028855,206.32331253245206,5.0,1031.6165626622603,57.31203125901446,0.06877443751081735,76.89432352544043
35,mbpp,validation,35,claude_3_haiku_0_shot_v6_prompt,"def last_occurence_char(string, char):
    try:
        return string.rindex(char) + 1
    except ValueError:
        return None",passed,True,True,3.0301033348223427e-05,5,5,5,0,0,0,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,79.7423427057672
36,mbpp,validation,36,claude_3_haiku_0_shot_v6_prompt,"def Total_Hamming_Distance(n):
    total_distance = 0
    for i in range(1, n+1):
        for j in range(i+1, n+1):
            total_distance += bin(i ^ j).count('1')
    return total_distance",failed: ,True,False,,6,6,6,0,0,0,0,3,2,6,5,10,8,15,17.509775004326936,45.0,1.6666666666666667,75.0,4.166666666666667,0.015,71.04611207701747
37,mbpp,validation,37,claude_3_haiku_0_shot_v6_prompt,"def longest_increasing_subsequence(arr):
    n = len(arr)
    dp = [1] * n

    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j]:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)",passed,True,True,6.679106666638291e-05,10,8,8,0,0,2,0,4,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,69.57204560999716
38,mbpp,validation,38,claude_3_haiku_0_shot_v6_prompt,"def odd_Num_Sum(n):
    return sum([(2 * i - 1) ** 5 for i in range(1, n + 1)])",passed,True,True,2.754969999993288e-05,2,2,2,0,0,0,0,2,4,7,4,8,11,12,27.651484454403228,41.51317942364757,2.2857142857142856,94.88726725405158,5.27151484744731,0.01383772647454919,81.83377702795524
39,mbpp,validation,39,claude_3_haiku_0_shot_v6_prompt,"def find_Max(arr):
    left, right = 0, len(arr) - 1

    while left < right:
        mid = left + (right - left) // 2

        if arr[mid] > arr[right]:
            left = mid + 1
        else:
            right = mid

    return arr[left]",failed: find_Max() takes 1 positional argument but 3 were given,True,False,,12,9,9,0,0,3,0,3,5,10,7,14,15,21,44.82892142331043,82.0447025077789,3.5,287.15645877722613,15.953136598734785,0.02734823416925963,65.37847236293541
40,mbpp,validation,40,claude_3_haiku_0_shot_v6_prompt,"import re

def extract_column(data, column_index):
    """"""
    Extracts a specified column from a given nested list.

    Args:
        data (list): A nested list representing the data.
        column_index (int): The index of the column to extract.

    Returns:
        list: A list containing the extracted column.
    """"""
    if not isinstance(data, list) or not all(isinstance(row, list) for row in data):
        raise ValueError(""Input must be a nested list."")

    if column_index < 0 or column_index >= len(data[0]):
        raise IndexError(""Column index is out of range."")

    return [row[column_index] for row in data]",passed,True,True,0.00010818496666710568,20,8,7,0,8,5,0,7,4,9,6,10,13,16,36.52932501298081,59.207035490257475,2.2222222222222223,131.57118997834996,7.309510554352776,0.019735678496752493,90.3252561038866
41,mbpp,validation,41,claude_3_haiku_0_shot_v6_prompt,"import math

def Seq_Linear(sequence):
    """"""
    Checks whether a given sequence is linear or not.

    Args:
        sequence (list): A list of numbers representing the sequence.

    Returns:
        str: ""Linear Sequence"" if the sequence is linear, ""Non Linear Sequence"" otherwise.
    """"""
    if len(sequence) < 2:
        return ""Linear Sequence""

    differences = [sequence[i] - sequence[i-1] for i in range(1, len(sequence))]
    if len(set(differences)) == 1:
        return ""Linear Sequence""
    else:
        return ""Non Linear Sequence""",passed,True,True,4.5284333335378806e-05,20,10,9,0,7,4,0,4,3,7,4,8,10,12,24.406371956566698,39.863137138648355,1.7142857142857142,68.33680652339717,3.796489251299843,0.013287712379549451,94.72317381858453
42,mbpp,validation,42,claude_3_haiku_0_shot_v6_prompt,"def tuple_to_float(test_tup):
    """"""
    Converts a tuple of integers to a floating-point number.

    Args:
        test_tup (tuple): A tuple of integers.

    Returns:
        float: The floating-point number represented by the input tuple.
    """"""
    return float('.'.join(map(str, test_tup)))",passed,True,True,4.023356666872739e-05,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
43,mbpp,validation,43,claude_3_haiku_0_shot_v6_prompt,"import re

def Split(input_list):
    return [num for num in input_list if num % 2 != 0]",passed,True,True,5.987336666635201e-05,4,3,3,0,0,1,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,80.85194998625511
44,mbpp,validation,44,claude_3_haiku_0_shot_v6_prompt,"def difference(n):
    sum_of_cubes = (n * (n + 1) * (2 * n + 1)) // 6
    sum_of_numbers = (n * (n + 1)) // 2
    return sum_of_cubes - sum_of_numbers ** 2",failed: ,True,False,,4,4,4,0,0,0,0,1,5,14,11,22,19,33,64.91260938324326,140.1816079436383,3.9285714285714284,550.713459778579,30.595192209921056,0.04672720264787944,71.70102320800737
45,mbpp,validation,45,claude_3_haiku_0_shot_v6_prompt,"def find_Odd_Pair(arr, n):
    odd_pairs = 0
    for i in range(n):
        for j in range(i + 1, n):
            if (arr[i] ^ arr[j]) % 2 != 0:
                odd_pairs += 1
    return odd_pairs",passed,True,True,5.761316666621497e-05,7,7,7,0,0,0,0,4,4,9,5,10,13,15,36.52932501298081,55.506595772116384,2.2222222222222223,123.34799060470309,6.852666144705727,0.01850219859070546,68.81312627594012
46,mbpp,validation,46,claude_3_haiku_0_shot_v6_prompt,"def toggle_string(input_string):
    """"""
    Toggles the case of each character in the input string.
    
    Args:
        input_string (str): The input string to toggle the case.
    
    Returns:
        str: The input string with the case of each character toggled.
    """"""
    return input_string.swapcase()",passed,True,True,3.077403333312153e-05,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
47,mbpp,validation,47,claude_3_haiku_0_shot_v6_prompt,"def digit_distance_nums(num1, num2):
    """"""
    Calculates the digit distance between two integers.

    Args:
        num1 (int): The first integer.
        num2 (int): The second integer.

    Returns:
        int: The digit distance between the two integers.
    """"""
    distance = abs(num1 - num2)
    return sum(int(digit) for digit in str(distance))",passed,True,True,3.337440000071486e-05,13,4,3,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,74.84640431451162
48,mbpp,validation,48,claude_3_haiku_0_shot_v6_prompt,"def max_sub_array_sum(arr, n):
    """"""
    Find the largest sum of contiguous subarray in the given array.
    
    Args:
        arr (list): The input array.
        n (int): The size of the input array.
    
    Returns:
        int: The largest sum of contiguous subarray.
    """"""
    max_so_far = arr[0]
    max_ending_here = arr[0]
    
    for i in range(1, n):
        max_ending_here = max(arr[i], max_ending_here + arr[i])
        max_so_far = max(max_so_far, max_ending_here)
    
    return max_so_far",passed,True,True,7.114173333775398e-05,19,8,7,0,8,4,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,98.66660708146323
49,mbpp,validation,49,claude_3_haiku_0_shot_v6_prompt,"def union_elements(tuple1, tuple2):
    """"""
    Find the union of elements of the given tuples.

    Args:
        tuple1 (tuple): The first input tuple.
        tuple2 (tuple): The second input tuple.

    Returns:
        tuple: The union of elements from the two input tuples.
    """"""
    return tuple(set(tuple1 + tuple2))",passed,True,True,8.371713332356497e-05,12,3,2,0,8,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,60.07139517617164
50,mbpp,validation,50,claude_3_haiku_0_shot_v6_prompt,"def assign_elements(test_list):
    result = {}
    for key, value in test_list:
        if key not in result:
            result[key] = []
        result[key].append(value)
        if value not in result:
            result[value] = []
        result[value].append(key)
    return result",failed: ,True,False,,10,10,10,0,0,0,0,4,1,3,2,4,4,6,4.754887502163469,12.0,0.6666666666666666,8.0,0.4444444444444444,0.004,70.09158299099349
51,mbpp,validation,51,claude_3_haiku_0_shot_v6_prompt,"def Find_Max_Length(lst):
    """"""
    Find the maximum length of sublist in the given list.

    Args:
        lst (list): A list of sublists.

    Returns:
        int: The maximum length of the sublists.
    """"""
    return max(len(sub_list) for sub_list in lst)",passed,True,True,7.635006666456926e-05,11,3,2,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
52,mbpp,validation,52,claude_3_haiku_0_shot_v6_prompt,"import re

def extract_values(text):
    """"""
    Extracts values between quotation marks from a given text.

    Args:
        text (str): The input text to extract values from.

    Returns:
        list: A list of extracted values.
    """"""
    return re.findall(r'""(.*?)""', text)",passed,True,True,5.239969999995727e-05,13,4,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
53,mbpp,validation,53,claude_3_haiku_0_shot_v6_prompt,"def count_Pairs(arr, n):
    """"""
    Counts the number of unequal element pairs in the given array.

    Args:
        arr (list): The input array.
        n (int): The length of the input array.

    Returns:
        int: The number of unequal element pairs.
    """"""
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            if arr[i] != arr[j]:
                count += 1
    return count",passed,True,True,4.986089999950612e-05,17,8,7,0,8,2,0,4,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,93.31834379931449
54,mbpp,validation,54,claude_3_haiku_0_shot_v6_prompt,"import re

def split(text):
    """"""
    Splits a given text into individual characters.

    Args:
        text (str): The input text to be split.

    Returns:
        list: A list of individual characters from the input text.
    """"""
    return list(text)",passed,True,True,6.0260166666618416e-05,13,4,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
55,mbpp,validation,55,claude_3_haiku_0_shot_v6_prompt,"def sum_digits(n: int) -> int:
    """"""
    Calculates the sum of digits in a non-negative integer.

    Args:
        n (int): The non-negative integer.

    Returns:
        int: The sum of digits in the given integer.
    """"""
    if n == 0:
        return 0
    return n % 10 + sum_digits(n // 10)",passed,True,True,3.079760000067229e-05,13,5,4,0,7,2,0,2,4,5,4,8,9,12,19.60964047443681,38.03910001730775,3.2,121.72512005538482,6.762506669743601,0.012679700005769252,84.81859762125687
56,mbpp,validation,56,claude_3_haiku_0_shot_v6_prompt,"def is_sorted(lst):
    """"""
    Checks whether a given list is sorted in ascending order.

    Args:
        lst (list): The list to be checked.

    Returns:
        bool: True if the list is sorted, False otherwise.
    """"""
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True",failed: name 'issort_list' is not defined,True,False,,14,6,5,0,7,2,0,3,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,91.20890456123814
57,mbpp,validation,57,claude_3_haiku_0_shot_v6_prompt,"def empty_list(length):
    return [{} for _ in range(length)]",passed,True,True,6.13642666621672e-05,2,2,2,0,0,0,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
58,mbpp,validation,58,claude_3_haiku_0_shot_v6_prompt,"def sort_sublists(lst):
    """"""
    Sorts each sublist of strings in the given list of lists.

    Args:
        lst (list): A list of lists, where each sublist contains strings.

    Returns:
        list: A new list where each sublist is sorted in ascending order.
    """"""
    return [sorted(sublist) for sublist in lst]",passed,True,True,0.00012009393333333544,11,3,2,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
59,mbpp,validation,59,claude_3_haiku_0_shot_v6_prompt,"import re

def remove_words(text_list, remove_list):
    """"""
    Removes words from a list of strings that contain any of the given phrases.

    Args:
        text_list (list): A list of strings to be processed.
        remove_list (list): A list of phrases to be removed from the text.

    Returns:
        list: A new list of strings with the specified words removed.
    """"""
    cleaned_text = []
    for line in text_list:
        cleaned_line = ' '.join(word for word in line.split() if not any(phrase in word for phrase in remove_list))
        cleaned_text.append(cleaned_line)
    return cleaned_text",passed,True,True,0.00011033010000005561,18,8,7,0,8,3,0,5,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,95.54856818340635
60,mbpp,validation,60,claude_3_haiku_0_shot_v6_prompt,"def max_sum_pair_diff_lessthan_K(arr, N, K):
    arr.sort()
    dp = [0] * N
    dp[0] = 0

    for i in range(1, N):
        dp[i] = dp[i - 1]
        if arr[i] - arr[i - 1] < K:
            if i >= 2:
                dp[i] = max(dp[i], dp[i - 2] + arr[i] + arr[i - 1])
            else:
                dp[i] = max(dp[i], arr[i] + arr[i - 1])

    return dp[N - 1]",passed,True,True,7.0853733329083e-05,14,12,12,0,0,2,0,4,5,15,13,26,20,39,70.2129994085646,168.55519570060713,4.333333333333333,730.4058480359641,40.57810266866468,0.05618506523353571,60.329089640139095
61,mbpp,validation,61,claude_3_haiku_0_shot_v6_prompt,"def two_unique_nums(nums):
    unique_nums = set()
    duplicate_nums = set()

    for num in nums:
        if num in unique_nums:
            duplicate_nums.add(num)
        else:
            unique_nums.add(num)

    return [num for num in nums if num not in duplicate_nums]",passed,True,True,6.750606666704092e-05,11,9,9,0,0,2,0,5,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,70.50137043534603
62,mbpp,validation,62,claude_3_haiku_0_shot_v6_prompt,"import math

def unique_product(list_data):
    """"""
    Calculates the product of the unique numbers in a given list.

    Args:
        list_data (list): A list of numbers.

    Returns:
        int: The product of the unique numbers in the list.
    """"""
    unique_nums = set(list_data)
    product = 1
    for num in unique_nums:
        product *= num

    return product",passed,True,True,5.358826666679306e-05,18,8,7,0,7,4,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
63,mbpp,validation,63,claude_3_haiku_0_shot_v6_prompt,"import math

def surfacearea_cylinder(radius, height):
    """"""
    Calculates the surface area of a cylinder.

    Args:
        radius (float): The radius of the cylinder.
        height (float): The height of the cylinder.

    Returns:
        float: The surface area of the cylinder.
    """"""
    surface_area = (2 * math.pi * radius * radius) + (2 * math.pi * radius * height)
    return surface_area",failed: ,True,False,,15,5,4,0,8,3,0,1,2,10,7,14,12,21,35.219280948873624,75.28421251514429,1.4,105.397897521202,5.855438751177889,0.025094737505048096,77.60800011116838
64,mbpp,validation,64,claude_3_haiku_0_shot_v6_prompt,"import math

def count_no(a, n, l, r):
    """"""
    Find the nth number in a sequence that is not a multiple of a given number.

    Args:
        a (int): The number to check for multiples.
        n (int): The nth number to find.
        l (int): The lower bound of the sequence.
        r (int): The upper bound of the sequence.

    Returns:
        int: The nth number in the sequence that is not a multiple of `a`.
    """"""
    count = 0
    for num in range(l, r + 1):
        if num % a != 0:
            count += 1
            if count == n:
                return num
    return -1  # Return -1 if the nth number is not found",passed,True,True,4.104379999982181e-05,22,10,9,1,10,3,0,4,5,8,6,11,13,17,35.60964047443681,62.907475208398566,3.4375,216.24444602887007,12.013580334937226,0.02096915840279952,87.03663511145035
65,mbpp,validation,65,claude_3_haiku_0_shot_v6_prompt,"def is_Sub_Array(arr1, arr2, n, m):
    """"""
    Checks if arr2 is a subarray of arr1.
    
    Args:
        arr1 (list): The main array.
        arr2 (list): The subarray to be checked.
        n (int): The length of arr1.
        m (int): The length of arr2.
    
    Returns:
        bool: True if arr2 is a subarray of arr1, False otherwise.
    """"""
    i = 0
    j = 0
    
    while i < n and j < m:
        if arr1[i] == arr2[j]:
            i += 1
            j += 1
            if j == m:
                return True
        else:
            i = i - j + 1
            j = 0
    
    return False",passed,True,True,6.414433333333432e-05,27,14,13,0,10,4,0,5,5,10,9,18,15,27,44.82892142331043,105.48604608143,4.5,474.687207366435,26.3715115203575,0.03516201536047667,88.51510652009037
66,mbpp,validation,66,claude_3_haiku_0_shot_v6_prompt,"def last_digit_factorial(n):
    """"""
    Finds the last digit of the factorial of a given number.
    
    Args:
        n (int): The number whose factorial's last digit is to be found.
    
    Returns:
        int: The last digit of the factorial of the given number.
    """"""
    if n == 0:
        return 1
    elif n <= 2:
        return n
    elif n == 3:
        return 6
    elif n == 4:
        return 4
    else:
        last_digits = [1, 1, 2, 6, 4, 0, 0, 0, 0, 0]
        return last_digits[n % 10]",failed: name 'last_Digit_Factorial' is not defined,True,False,,21,13,12,0,7,2,0,5,3,6,5,10,9,15,20.264662506490406,47.548875021634686,2.5,118.87218755408671,6.604010419671484,0.01584962500721156,92.52234446184244
67,mbpp,validation,67,claude_3_haiku_0_shot_v6_prompt,"def interleave_lists(list1, list2, list3):
    """"""
    Interleaves three lists of the same length.

    Args:
        list1 (list): The first list to interleave.
        list2 (list): The second list to interleave.
        list3 (list): The third list to interleave.

    Returns:
        list: The interleaved list.
    """"""
    if len(set([len(list1), len(list2), len(list3)])) != 1:
        raise ValueError(""All input lists must be of the same length."")

    result = []
    for i in range(len(list1)):
        result.append(list1[i])
        result.append(list2[i])
        result.append(list3[i])

    return result",passed,True,True,9.775643333303682e-05,22,10,9,0,9,4,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,98.683493941902
68,mbpp,validation,68,claude_3_haiku_0_shot_v6_prompt,"def find_dissimilar(test_tup1, test_tup2):
    """"""
    Find the dissimilar elements in the given two tuples.

    Args:
        test_tup1 (tuple): The first tuple.
        test_tup2 (tuple): The second tuple.

    Returns:
        tuple: A tuple containing the dissimilar elements.
    """"""
    return tuple(set(test_tup1) ^ set(test_tup2))",passed,True,True,7.900670001011652e-05,12,3,2,0,8,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,60.07139517617164
69,mbpp,validation,69,claude_3_haiku_0_shot_v6_prompt,"def extract_even(test_tuple):
    """"""
    Extracts the even elements from a nested mixed tuple.

    Args:
        test_tuple (tuple): The input tuple containing mixed elements.

    Returns:
        tuple: A new tuple containing only the even elements from the input tuple.
    """"""
    def is_even(x):
        """"""
        Checks if a given number is even.

        Args:
            x (int): The number to check.

        Returns:
            bool: True if the number is even, False otherwise.
        """"""
        return x % 2 == 0

    def extract_even_recursive(t):
        """"""
        Recursively extracts the even elements from a nested mixed tuple.

        Args:
            t (tuple): The input tuple to process.

        Returns:
            tuple: A new tuple containing only the even elements from the input tuple.
        """"""
        result = ()
        for element in t:
            if isinstance(element, tuple):
                result += (extract_even_recursive(element),)
            elif is_even(element):
                result += (element,)
        return result

    return extract_even_recursive(test_tuple)",passed,True,True,0.00010497413333420506,41,15,12,0,21,8,0,1,3,7,4,8,10,12,24.406371956566698,39.863137138648355,1.7142857142857142,68.33680652339717,3.796489251299843,0.013287712379549451,74.40276501938892
70,mbpp,validation,70,claude_3_haiku_0_shot_v6_prompt,"import math

def surface_Area(base, slant_height):
    """"""
    Calculates the surface area of a square pyramid.

    Args:
        base (float): The length of the base of the pyramid.
        slant_height (float): The length of the slant height of the pyramid.

    Returns:
        float: The surface area of the pyramid.
    """"""
    return 2 * base * slant_height + base ** 2",passed,True,True,2.8556033333870802e-05,14,4,3,0,8,3,0,1,3,6,4,8,9,12,20.264662506490406,38.03910001730775,2.0,76.0782000346155,4.226566668589751,0.012679700005769252,68.65745927548522
71,mbpp,validation,71,claude_3_haiku_0_shot_v6_prompt,"def my_dict(dictionary):
    """"""
    Checks if a given dictionary is empty or not.

    Args:
        dictionary (dict): The dictionary to be checked.

    Returns:
        bool: True if the dictionary is empty, False otherwise.
    """"""
    return len(dictionary) == 0",passed,True,True,2.8863133335714033e-05,11,3,2,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,65.11035329571214
72,mbpp,validation,72,claude_3_haiku_0_shot_v6_prompt,"def catalan_number(n):
    if n <= 1:
        return 1
    
    catalans = [1, 1]
    for i in range(2, n+1):
        current_catalan = sum(catalans[j] * catalans[i-j-1] for j in range(i-1))
        catalans.append(current_catalan)
    
    return catalans[n]",failed: ,True,False,,10,8,8,0,0,2,0,4,4,7,6,12,11,18,27.651484454403228,62.26976913547136,3.4285714285714284,213.49635132161606,11.860908406756447,0.020756589711823786,67.19846286871275
73,mbpp,validation,73,claude_3_haiku_0_shot_v6_prompt,"import re

def find_adverbs(text):
    adverbs = []
    for match in re.finditer(r'\w+ly', text):
        start, end = match.span()
        adverb = match.group()
        adverbs.append(f'{start}-{end}: {adverb}')
    return '\n'.join(adverbs)",passed,True,True,4.0831700001338804e-05,9,8,8,0,0,1,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
74,mbpp,validation,74,claude_3_haiku_0_shot_v6_prompt,"import heapq

def expensive_items(items, n):
    """"""
    Find the n most expensive items from a given dataset using a heap queue algorithm.

    Args:
        items (list[dict]): A list of dictionaries, where each dictionary represents an item with a 'price' key.
        n (int): The number of most expensive items to return.

    Returns:
        list[dict]: A list of the n most expensive items.
    """"""
    return heapq.nlargest(n, items, key=lambda item: item['price'])",passed,True,True,0.00014897193333354152,14,5,3,0,8,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
75,mbpp,validation,75,claude_3_haiku_0_shot_v6_prompt,"def split_Arr(arr, n, k):
    """"""
    Splits the input array into two parts and adds the first part to the end.

    Args:
        arr (list): The input array.
        n (int): The length of the input array.
        k (int): The index at which the array should be split.

    Returns:
        list: The modified array.
    """"""
    first_part = arr[:k]
    second_part = arr[k:]
    return second_part + first_part",passed,True,True,8.228003333291175e-05,15,7,4,0,9,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,77.66782260062452
76,mbpp,validation,76,claude_3_haiku_0_shot_v6_prompt,"def list_tuple(input_list):
    """"""
    Converts a list to a tuple.

    Args:
        input_list (list): The input list to be converted.

    Returns:
        tuple: The converted tuple.
    """"""
    return tuple(input_list)",passed,True,True,7.941109999952308e-05,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
77,mbpp,validation,77,claude_3_haiku_0_shot_v6_prompt,"def big_diff(nums):
    if not nums:
        return 0

    max_num = max(nums)
    min_num = min(nums)

    return max_num - min_num",passed,True,True,5.489286666602311e-05,8,6,6,0,0,2,0,2,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,75.30055572580265
78,mbpp,validation,78,claude_3_haiku_0_shot_v6_prompt,"import math

def perfect_squares(a, b):
    """"""
    Find all perfect squares between the given range [a, b].

    Args:
        a (int): The lower bound of the range.
        b (int): The upper bound of the range.

    Returns:
        list: A list of all perfect squares between [a, b].
    """"""
    result = []
    for num in range(a, b + 1):
        sqrt = int(math.sqrt(num))
        if sqrt * sqrt == num:
            result.append(num)
    return result",passed,True,True,7.825370000015633e-05,19,9,8,0,8,3,0,3,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,94.40056320631133
79,mbpp,validation,79,claude_3_haiku_0_shot_v6_prompt,"import cmath

def polar_rect(r, theta):
    """"""
    Converts polar coordinates to rectangular coordinates.

    Args:
        r (float): The magnitude (radius) of the polar coordinate.
        theta (float): The angle (in radians) of the polar coordinate.

    Returns:
        tuple: A tuple containing the polar coordinate and the rectangular coordinate.
    """"""
    polar_coord = complex(r, theta)
    rect_coord = cmath.rect(r, theta)
    return (polar_coord, rect_coord)",failed: ,True,False,,16,6,5,0,8,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
80,mbpp,validation,80,claude_3_haiku_0_shot_v6_prompt,"def swap_List(lst):
    if len(lst) < 2:
        return lst
    
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst",passed,True,True,6.458636666669311e-05,6,5,5,0,0,1,0,2,2,3,3,4,5,7,6.754887502163469,16.253496664211536,1.3333333333333333,21.67132888561538,1.2039627158675212,0.005417832221403845,76.0046221524879
81,mbpp,validation,81,claude_3_haiku_0_shot_v6_prompt,"def binomial_coeff(n, k):
    """"""
    Calculates the binomial coefficient C(n, k).
    """"""
    coeff = [0] * (k + 1)
    coeff[0] = 1  # C(n, 0) = 1
    for i in range(1, n + 1):
        for j in range(min(i, k), 0, -1):
            coeff[j] = coeff[j] + coeff[j - 1]
    return coeff[k]

def sum_of_product(n):
    """"""
    Calculates the sum of product of binomial coefficients.
    """"""
    return binomial_coeff(2 * n, n - 1)",failed: name 'sum_Of_product' is not defined,True,False,,16,11,9,1,6,1,0,3,4,11,8,15,15,23,46.053747805010275,89.85848369899593,2.727272727272727,245.0685919063525,13.614921772575139,0.02995282789966531,91.48311429529686
82,mbpp,validation,82,claude_3_haiku_0_shot_v6_prompt,"import re

def removezero_ip(ip_address):
    """"""
    Removes leading zeroes from an IP address.

    Args:
        ip_address (str): The IP address to be processed.

    Returns:
        str: The IP address with leading zeroes removed.
    """"""
    return re.sub(r'\b0+(\d+)', r'\1', ip_address)",passed,True,True,4.6054666666369336e-05,13,4,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
83,mbpp,validation,83,claude_3_haiku_0_shot_v6_prompt,"def diff_even_odd(numbers):
    """"""
    Find the difference between the first even and odd numbers in a given list.

    Args:
        numbers (list): A list of integers.

    Returns:
        int: The difference between the first even and odd numbers in the list.
        If no even or odd numbers are found, returns -1.
    """"""
    try:
        first_even = next(filter(lambda x: x % 2 == 0, numbers))
    except StopIteration:
        first_even = -1

    try:
        first_odd = next(filter(lambda x: x % 2 != 0, numbers))
    except StopIteration:
        first_odd = -1

    return first_even - first_odd",passed,True,True,6.298323333264004e-05,22,13,10,0,8,4,0,3,5,8,7,12,13,19,35.60964047443681,70.30835464468075,3.75,263.6563299175528,14.647573884308489,0.02343611821489358,90.4447297019154
84,mbpp,validation,84,claude_3_haiku_0_shot_v6_prompt,"def min_Swaps(s1, s2):
    if len(s1) != len(s2):
        return ""Not Possible""

    diff_count = 0
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            diff_count += 1

    if diff_count % 2 != 0:
        return ""Not Possible""

    return diff_count // 2",passed,True,True,3.252673333330828e-05,13,10,10,0,0,3,0,5,4,9,6,12,13,18,36.52932501298081,66.60791492653966,2.6666666666666665,177.62110647077242,9.867839248376246,0.022202638308846556,64.74516944135763
85,mbpp,validation,85,claude_3_haiku_0_shot_v6_prompt,"import sys

def tuple_size(tup):
    """"""
    Returns the size of the given tuple in bytes.
    
    Args:
        tup (tuple): The tuple whose size is to be determined.
    
    Returns:
        int: The size of the tuple in bytes.
    """"""
    return sys.getsizeof(tup)",passed,True,True,0.00010666839999999844,13,4,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
86,mbpp,validation,86,claude_3_haiku_0_shot_v6_prompt,"def find_kth(arr1, arr2, m, n, k):
    if m > n:
        return find_kth(arr2, arr1, n, m, k)

    left, right = 0, m

    while left <= right:
        partitionX = (left + right) // 2
        partitionY = k - partitionX

        maxLeftX = arr1[partitionX - 1] if partitionX != 0 else float('-inf')
        minRightX = arr1[partitionX] if partitionX != m else float('inf')

        maxLeftY = arr2[partitionY - 1] if partitionY != 0 else float('-inf')
        minRightY = arr2[partitionY] if partitionY != n else float('inf')

        if maxLeftX <= minRightY and maxLeftY <= minRightX:
            return max(maxLeftX, maxLeftY)
        elif maxLeftX > minRightY:
            right = partitionX - 1
        else:
            left = partitionX + 1

    return -1",passed,True,True,8.615506666653043e-05,24,18,18,0,0,6,0,10,8,17,18,35,25,53,93.48686830125578,246.1243780580604,8.235294117647058,2026.9066428310853,112.60592460172695,0.0820414593526868,54.52960530407821
87,mbpp,validation,87,claude_3_haiku_0_shot_v6_prompt,"def armstrong_number(num):
    """"""
    Checks if a given number is an Armstrong number.
    
    An Armstrong number is a number that is equal to the sum of the cubes of its digits.
    
    Args:
        num (int): The number to be checked.
    
    Returns:
        bool: True if the number is an Armstrong number, False otherwise.
    """"""
    # Convert the number to a string to iterate over its digits
    num_str = str(num)
    
    # Calculate the sum of the cubes of the digits
    sum_of_cubes = sum(int(digit) ** len(num_str) for digit in num_str)
    
    # Check if the number is equal to the sum of the cubes of its digits
    return num == sum_of_cubes",passed,True,True,3.007160000076207e-05,20,5,4,3,8,5,3,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,67.6581677655758
88,mbpp,validation,88,claude_3_haiku_0_shot_v6_prompt,"def sum_average(n):
    """"""
    Calculates the sum and average of the first n natural numbers.

    Args:
        n (int): The number of natural numbers to consider.

    Returns:
        tuple: A tuple containing the sum and average of the first n natural numbers.
    """"""
    total = n * (n + 1) // 2
    average = total / n
    return total, average",passed,True,True,3.6663033332236715e-05,13,5,4,0,7,2,0,1,4,6,4,8,10,12,23.509775004326936,39.863137138648355,2.6666666666666665,106.3016990363956,5.905649946466422,0.013287712379549451,84.81067091203418
89,mbpp,validation,89,claude_3_haiku_0_shot_v6_prompt,"def is_even(num: int) -> bool:
    """"""
    Checks if the given number is even using a bitwise operator.

    Args:
        num (int): The number to be checked.

    Returns:
        bool: True if the number is even, False otherwise.
    """"""
    return (num & 1) == 0",failed: name 'is_Even' is not defined,True,False,,11,3,2,0,7,2,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,61.515062853972545
