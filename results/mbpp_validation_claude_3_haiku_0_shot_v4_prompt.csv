,dataset,split,task_id,model,code,result,avg_test_time,passed_tests,compiled,loc,lloc,sloc,comments,multi,blank,single_comments,CC,h1,h2,N1,N2,vocabulary,length,calculated_length,volume,difficulty,effort,time,bugs,MI
0,mbpp,validation,0,claude_3_haiku_0_shot_v4_prompt,"def find_Min_Sum(num):
    factors = []
    for i in range(2, int(num ** 0.5) + 1):
        while num % i == 0:
            factors.append(i)
            num //= i
    if num > 1:
        factors.append(num)
    return sum(factors)",passed,2.986049999928279e-05,True,True,9,9,9,0,0,0,0,4,6,7,6,12,13,18,35.161259458730164,66.60791492653966,5.142857142857143,342.5549910507754,19.03083283615419,0.022202638308846556,65.87782461893471
1,mbpp,validation,1,claude_3_haiku_0_shot_v4_prompt,"def flatten(nested_tuple):
    """"""Flatten a nested tuple into a generator.""""""
    for item in nested_tuple:
        if isinstance(item, tuple):
            yield from flatten(item)
        else:
            yield item

def count_element_freq(nested_tuple):
    """"""Count the frequency of elements in a mixed nested tuple.""""""
    freq = {}
    for element in flatten(nested_tuple):
        freq[element] = freq.get(element, 0) + 1
    return freq",passed,0.00036243079999849216,True,True,14,13,11,0,0,1,2,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,70.42112316808037
2,mbpp,validation,2,claude_3_haiku_0_shot_v4_prompt,"def add_str(test_tup, K):
    result = []
    for item in test_tup:
        result.append(item)
        result.append(K)
    return result",passed,9.054726666590796e-05,True,True,6,6,6,0,0,0,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
3,mbpp,validation,3,claude_3_haiku_0_shot_v4_prompt,"def sum_elements(tuples):
    total = 0
    for tup in tuples:
        total += sum(tup)
    return total",failed: 'int' object is not iterable,,False,True,5,5,5,0,0,0,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,79.7423427057672
4,mbpp,validation,4,claude_3_haiku_0_shot_v4_prompt,"def modular_sum(arr, n, m):
    if n > m:
        return True

    dp = [False] * m
    dp[0] = True

    for num in arr:
        temp = [False] * m
        for i in range(m):
            if dp[i]:
                temp[(i + num) % m] = True
        for i in range(m):
            if temp[i]:
                dp[i] = True
        dp[num % m] = True

    return dp[0]",failed: ,,False,True,18,15,15,0,0,3,0,7,4,7,6,12,11,18,27.651484454403228,62.26976913547136,3.4285714285714284,213.49635132161606,11.860908406756447,0.020756589711823786,60.83971416541304
5,mbpp,validation,5,claude_3_haiku_0_shot_v4_prompt,"def radix_sort(nums):
    """"""
    Sorts a list of integers using the Radix Sort algorithm.
    
    Args:
        nums (list): A list of integers to be sorted.
    
    Returns:
        list: The sorted list of integers.
    """"""
    if not nums:
        return nums

    # Get the maximum digit in the list
    max_num = max(nums)

    # Do counting sort for every digit. Note that instead of passing
    # digit number, exp is passed. exp is 10^i where i is current
    # digit number
    exp = 1
    while max_num / exp > 0:
        # Create a list of lists to store the elements according to their digit
        counting_buckets = [[] for _ in range(10)]

        # Distribute the elements into the counting buckets
        for num in nums:
            index = (num // exp) % 10
            counting_buckets[index].append(num)

        # Collect the elements back from the counting buckets
        i = 0
        for bucket in counting_buckets:
            for num in bucket:
                nums[i] = num
                i += 1

        # Move to the next digit
        exp *= 10

    return nums",passed,0.002832886233333435,True,True,40,18,17,8,7,8,8,7,7,10,7,13,17,20,52.87076540327685,81.7492568250068,4.55,371.9591185537809,20.66439547521005,0.027249752275002266,85.4863539503261
6,mbpp,validation,6,claude_3_haiku_0_shot_v4_prompt,"def largest_pos(numbers):
    if not numbers:
        return None

    largest = float('-inf')
    for num in numbers:
        if num > 0 and num > largest:
            largest = num

    return largest if largest != float('-inf') else None",passed,4.788016666642155e-05,True,True,10,8,8,0,0,2,0,6,4,7,5,9,11,14,27.651484454403228,48.43204266092217,2.5714285714285716,124.53953827094274,6.918863237274596,0.016144014220307392,67.69368803073655
7,mbpp,validation,7,claude_3_haiku_0_shot_v4_prompt,"def sqrt_root(number):
    """"""
    Calculates the square root of a perfect number.

    Args:
        number (int): The number to find the square root of.

    Returns:
        float: The square root of the input number.
    """"""
    return number ** 0.5",passed,2.4323066668330284e-05,True,True,11,3,2,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,65.11035329571214
8,mbpp,validation,8,claude_3_haiku_0_shot_v4_prompt,"import math

def volume_tetrahedron(edge_length):
    """"""
    Calculates the volume of a tetrahedron given its edge length.
    
    Args:
        edge_length (float): The length of one edge of the tetrahedron.
    
    Returns:
        float: The volume of the tetrahedron, rounded to 2 decimal places.
    """"""
    return round((edge_length ** 3) / (6 * math.sqrt(2)), 2)",passed,3.032399999999639e-05,True,True,13,4,3,0,7,3,0,1,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,75.85339325182143
9,mbpp,validation,9,claude_3_haiku_0_shot_v4_prompt,"def find_lcm(a, b):
    """"""
    Finds the Least Common Multiple (LCM) of two numbers.
    """"""
    if a > b:
        greater = a
    else:
        greater = b

    while True:
        if (greater % a == 0) and (greater % b == 0):
            lcm = greater
            break
        greater += 1

    return lcm

def get_lcm(numbers):
    """"""
    Finds the Least Common Multiple (LCM) of a list of numbers.
    """"""
    if not numbers:
        return None

    lcm = find_lcm(numbers[0], numbers[1])
    for num in numbers[2:]:
        lcm = find_lcm(lcm, num)

    return lcm",passed,6.517536666592605e-05,True,True,29,20,18,0,6,5,0,5,6,10,8,15,16,23,48.72905595320056,92.0,4.5,414.0,23.0,0.030666666666666665,84.14076801543865
10,mbpp,validation,10,claude_3_haiku_0_shot_v4_prompt,"def check_isosceles(a, b, c):
    """"""
    Checks if a triangle is isosceles.
    
    Args:
        a (float): Length of the first side of the triangle.
        b (float): Length of the second side of the triangle.
        c (float): Length of the third side of the triangle.
    
    Returns:
        bool: True if the triangle is isosceles, False otherwise.
    """"""
    return a != b and b != c and a != c",passed,3.34617666946239e-05,True,True,13,3,2,0,9,2,0,3,2,6,4,9,8,13,17.509775004326936,39.0,1.5,58.5,3.25,0.013,50.26363991980823
11,mbpp,validation,11,claude_3_haiku_0_shot_v4_prompt,"def lbs(arr):
    n = len(arr)
    lis = [1] * n  # Initialize LIS array
    lds = [1] * n  # Initialize LDS array

    # Compute LIS
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j]:
                lis[i] = max(lis[i], lis[j] + 1)

    # Compute LDS
    for i in range(n - 2, -1, -1):
        for j in range(i + 1, n):
            if arr[i] > arr[j]:
                lds[i] = max(lds[i], lds[j] + 1)

    # Find the maximum length of the bitonic subsequence
    max_length = 0
    for i in range(n):
        max_length = max(max_length, lis[i] + lds[i] - 1)

    return max_length",passed,0.00013148626665800597,True,True,23,16,16,5,0,4,3,8,5,15,12,22,20,34,70.2129994085646,146.94555522617034,3.6666666666666665,538.8003691626245,29.933353842368028,0.048981851742056784,84.27042675914744
12,mbpp,validation,12,claude_3_haiku_0_shot_v4_prompt,"def check_string(input_str):
    """"""
    Checks if the given string meets the following requirements:
    - Contains at least one uppercase letter
    - Contains at least one lowercase letter
    - Contains at least one digit
    - Has a length of at least 8 characters
    
    Args:
        input_str (str): The input string to be checked.
    
    Returns:
        list: A list of error messages if the string does not meet the requirements.
                If the string meets all requirements, the list will contain a single
                ""Valid string."" message.
    """"""
    requirements = [
        lambda s: any(char.isupper() for char in s) or ""String must have at least one uppercase character."",
        lambda s: any(char.islower() for char in s) or ""String must have at least one lowercase character."",
        lambda s: any(char.isdigit() for char in s) or ""String must have at least one digit."",
        lambda s: len(s) >= 8 or ""String length must be at least 8 characters."",
    ]
    
    errors = [req(input_str) for req in requirements if req(input_str) != True]
    
    if not errors:
        errors.append(""Valid string."")
    
    return errors",failed: ,,False,True,29,8,11,0,13,5,0,11,4,13,7,13,17,20,56.105716335834195,81.7492568250068,2.0,163.4985136500136,9.083250758334088,0.027249752275002266,88.13234385224261
13,mbpp,validation,13,claude_3_haiku_0_shot_v4_prompt,"def max_sum_increasing_subsequence(arr, n):
    """"""
    Find the sum of the maximum increasing subsequence in the given array.
    
    Args:
        arr (list): The input array.
        n (int): The length of the input array.
    
    Returns:
        int: The sum of the maximum increasing subsequence.
    """"""
    msis = [0] * n  # Initialize the msis array with 0s
    
    # Compute the maximum sum increasing subsequence
    for i in range(n):
        msis[i] = arr[i]
        for j in range(i):
            if arr[i] > arr[j] and msis[i] < msis[j] + arr[i]:
                msis[i] = msis[j] + arr[i]
    
    # Find the maximum value in the msis array
    return max(msis)",passed,6.08268999997108e-05,True,True,22,9,8,3,8,4,2,5,5,12,6,12,17,18,54.62919048309069,73.57433114250613,2.5,183.93582785626532,10.218657103125851,0.02452477704750204,84.54162152798683
14,mbpp,validation,14,claude_3_haiku_0_shot_v4_prompt,"def parallel_lines(line1, line2):
    """"""
    Checks whether two given lines are parallel or not.

    Args:
        line1 (tuple): A tuple containing the coefficients (a, b) of the first line in the form ax + by + c = 0.
        line2 (tuple): A tuple containing the coefficients (a, b) of the second line in the form ax + by + c = 0.

    Returns:
        bool: True if the lines are parallel, False otherwise.
    """"""
    if line1[1] == 0 or line2[1] == 0:
        return line1[0] == line2[0]
    return abs(line1[0] / line1[1] - line2[0] / line2[1]) < 1e-9",passed,5.250946666516635e-05,True,True,14,5,4,0,8,2,0,3,5,15,8,16,20,24,70.2129994085646,103.72627427729671,2.6666666666666665,276.6033980727912,15.366855448488401,0.0345754247590989,76.36441999535226
15,mbpp,validation,15,claude_3_haiku_0_shot_v4_prompt,"def capitalize_first_last_letters(input_string):
    words = input_string.split()
    capitalized_words = []
    for word in words:
        capitalized_word = word[0].upper() + word[1:-1] + word[-1].upper()
        capitalized_words.append(capitalized_word)
    return ' '.join(capitalized_words)",passed,2.725403333333117e-05,True,True,7,8,7,0,0,0,0,2,2,5,4,6,7,10,13.60964047443681,28.07354922057604,1.2,33.688259064691245,1.8715699480384025,0.009357849740192013,69.89002475975785
16,mbpp,validation,16,claude_3_haiku_0_shot_v4_prompt,"def get_pairs_count(arr, target_sum):
    count = 0
    seen = set()
    for num in arr:
        complement = target_sum - num
        if complement in seen:
            count += 1
        seen.add(num)
    return count",failed: get_pairs_count() takes 2 positional arguments but 3 were given,,False,True,9,9,9,0,0,0,0,3,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,68.59070924880801
17,mbpp,validation,17,claude_3_haiku_0_shot_v4_prompt,"def min_length(list_of_lists):
    lengths = [len(lst) for lst in list_of_lists]
    min_length = min(lengths)
    min_list = next(lst for lst in list_of_lists if len(lst) == min_length)
    return min_length, min_list",passed,8.274853333318788e-05,True,True,5,5,5,0,0,0,0,4,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,79.47333685781399
18,mbpp,validation,18,claude_3_haiku_0_shot_v4_prompt,"def jacobsthal_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return jacobsthal_lucas(n-1) + 2 * jacobsthal_lucas(n-2)",passed,2.79681000392884e-05,True,True,7,7,7,0,0,0,0,3,4,7,6,12,11,18,27.651484454403228,62.26976913547136,3.4285714285714284,213.49635132161606,11.860908406756447,0.020756589711823786,68.59800003860587
19,mbpp,validation,19,claude_3_haiku_0_shot_v4_prompt,"def negative_count(nums):
    negative_count = sum(1 for num in nums if num < 0)
    return round(negative_count / len(nums), 2)",passed,7.699163332593646e-05,True,True,3,3,3,0,0,0,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,80.85194998625511
20,mbpp,validation,20,claude_3_haiku_0_shot_v4_prompt,"def min_coins(coins, num_coins, target_value):
    if target_value == 0:
        return 0

    min_coins = float('inf')

    for i in range(num_coins):
        if coins[i] <= target_value:
            sub_result = min_coins(coins, num_coins, target_value - coins[i])
            if sub_result != float('inf') and sub_result + 1 < min_coins:
                min_coins = sub_result + 1

    return min_coins",failed: 'float' object is not callable,,False,True,13,10,10,0,0,3,0,6,7,11,8,16,18,24,57.705232259413506,100.07820003461549,5.090909090909091,509.4890183580425,28.30494546433569,0.0333594000115385,63.37261503724782
21,mbpp,validation,21,claude_3_haiku_0_shot_v4_prompt,"def check_permutation(str1, str2):
    if len(str1) != len(str2):
        return False

    char_count = {}
    for char in str1:
        char_count[char] = char_count.get(char, 0) + 1

    for char in str2:
        if char not in char_count or char_count[char] == 0:
            return False
        char_count[char] -= 1

    return True",passed,3.395840000545528e-05,True,True,14,11,11,0,0,3,0,6,6,11,6,12,17,18,53.563522809337215,73.57433114250613,3.272727272727273,240.78872010274733,13.377151116819297,0.02452477704750204,63.40523761622972
22,mbpp,validation,22,claude_3_haiku_0_shot_v4_prompt,"def remove_datatype(test_tuple, data_type):
    return tuple(ele for ele in test_tuple if not isinstance(ele, data_type))",failed: ,,False,True,2,2,2,0,0,0,0,3,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,90.92201774036091
23,mbpp,validation,23,claude_3_haiku_0_shot_v4_prompt,"def search_literal(pattern, text):
    try:
        match = re.search(pattern, text)
        if match:
            return (match.start(), match.end())
        else:
            return (-1, -1)
    except (AttributeError, TypeError):
        return (-1, -1)",failed: name 're' is not defined,,False,True,9,9,9,0,0,0,0,3,1,1,4,4,2,8,0.0,8.0,2.0,16.0,0.8888888888888888,0.0026666666666666666,72.45723147977665
24,mbpp,validation,24,claude_3_haiku_0_shot_v4_prompt,"def topbottom_surfacearea(radius):
    """"""
    Calculates the top or bottom surface area of a cylinder.

    Args:
        radius (float): The radius of the cylinder.

    Returns:
        float: The top or bottom surface area of the cylinder.
    """"""
    return 3.14159 * radius ** 2",failed: ,,False,True,11,3,2,0,7,2,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,61.515062853972545
25,mbpp,validation,25,claude_3_haiku_0_shot_v4_prompt,"def nth_items(lst, n):
    """"""
    Selects the nth items of a list.
    
    Args:
        lst (list): The input list.
        n (int): The step size to select the items.
    
    Returns:
        list: A new list containing the nth items of the input list.
    """"""
    return lst[::n]",passed,6.592236666923176e-05,True,True,12,4,2,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
26,mbpp,validation,26,claude_3_haiku_0_shot_v4_prompt,"def first_repeated_word(text):
    words = text.lower().split()
    seen = set()
    for word in words:
        if word in seen:
            return word
        seen.add(word)
    return 'None'",passed,2.876853332054452e-05,True,True,8,8,8,0,0,0,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,75.15517382051522
27,mbpp,validation,27,claude_3_haiku_0_shot_v4_prompt,"def string_list_to_tuple(string_list):
    return tuple(item.strip() for item in string_list if item.strip())",passed,6.849536666777566e-05,True,True,2,2,2,0,0,0,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
28,mbpp,validation,28,claude_3_haiku_0_shot_v4_prompt,"def basesnum_coresspondingnum(bases_num, index):
    """"""
    Calculates the power of each number in `bases_num` raised to the corresponding number in `index`.

    Args:
        bases_num (list): A list of numbers to be used as the base.
        index (list): A list of numbers to be used as the exponent.

    Returns:
        list: A list of the calculated powers.
    """"""
    return [base ** exp for base, exp in zip(bases_num, index)]",passed,0.00014788246666815516,True,True,12,3,2,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.93689225219502
29,mbpp,validation,29,claude_3_haiku_0_shot_v4_prompt,"def find_Diff(arr):
    """"""
    Find the difference between the highest and lowest frequencies in a given array.
    
    Args:
        arr (list): The input array.
    
    Returns:
        int: The difference between the highest and lowest frequencies.
    """"""
    freq = {}
    for num in arr:
        freq[num] = freq.get(num, 0) + 1
    
    max_freq = max(freq.values())
    min_freq = min(freq.values())
    
    return max_freq - min_freq",failed: find_Diff() takes 1 positional argument but 2 were given,,False,True,18,8,7,0,7,4,0,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,97.3366979629052
30,mbpp,validation,30,claude_3_haiku_0_shot_v4_prompt,"def check_abundant(n):
    """"""
    Determines if a given number is abundant or not.
    
    Args:
        n (int): The number to be checked.
    
    Returns:
        bool: True if the number is abundant, False otherwise.
    """"""
    divisors_sum = sum(i for i in range(1, n) if n % i == 0)
    return divisors_sum > n",passed,3.111700001075709e-05,True,True,12,4,3,0,7,2,0,3,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,75.75192970121853
31,mbpp,validation,31,claude_3_haiku_0_shot_v4_prompt,"import re

def fill_spaces(text):
    return re.sub(r'[ ,.]', ':', text)",passed,3.146143333386438e-05,True,True,4,3,3,0,0,1,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
32,mbpp,validation,32,claude_3_haiku_0_shot_v4_prompt,"def count_digits(num1, num2):
    total = num1 + num2
    return len(str(total))",passed,3.430733333213235e-05,True,True,3,3,3,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,84.71624627594792
33,mbpp,validation,33,claude_3_haiku_0_shot_v4_prompt,"def flatten_tuple(test_list):
    result = []
    for tup in test_list:
        result.extend(tup)
    return ' '.join(result)",passed,8.635116666653176e-05,True,True,5,5,5,0,0,0,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
34,mbpp,validation,34,claude_3_haiku_0_shot_v4_prompt,"def toggle_F_and_L_bits(n):
    if n == 1:
        return 0
    
    # Toggle the first and last bits
    return n ^ ((n & 1) | ((n >> (bin(n).count('1') - 1)) & 1))",failed: ,,False,True,6,4,4,1,0,1,1,2,6,8,7,14,14,21,39.50977500432694,79.95445336320968,5.25,419.7608801568508,23.320048897602824,0.026651484454403226,98.4316251620473
35,mbpp,validation,35,claude_3_haiku_0_shot_v4_prompt,"def last_occurence_char(string, char):
    try:
        return string.rindex(char) + 1
    except ValueError:
        return None",passed,3.119810000005903e-05,True,True,5,5,5,0,0,0,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,79.7423427057672
36,mbpp,validation,36,claude_3_haiku_0_shot_v4_prompt,"def Total_Hamming_Distance(n):
    total_distance = 0
    for i in range(1, n+1):
        for j in range(i+1, n+1):
            total_distance += bin(i ^ j).count('1')
    return total_distance",failed: ,,False,True,6,6,6,0,0,0,0,3,2,6,5,10,8,15,17.509775004326936,45.0,1.6666666666666667,75.0,4.166666666666667,0.015,71.04611207701747
37,mbpp,validation,37,claude_3_haiku_0_shot_v4_prompt,"def longest_increasing_subsequence(arr):
    n = len(arr)
    dp = [1] * n

    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j]:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)",passed,6.779810000049717e-05,True,True,10,8,8,0,0,2,0,4,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,69.57204560999716
38,mbpp,validation,38,claude_3_haiku_0_shot_v4_prompt,"def odd_Num_Sum(n):
    return sum([(2 * i - 1) ** 5 for i in range(1, n + 1)])",passed,2.8602400000939572e-05,True,True,2,2,2,0,0,0,0,2,4,7,4,8,11,12,27.651484454403228,41.51317942364757,2.2857142857142856,94.88726725405158,5.27151484744731,0.01383772647454919,81.83377702795524
39,mbpp,validation,39,claude_3_haiku_0_shot_v4_prompt,"def find_Max(arr, low, high):
    if high < low:
        return arr[0]
    if high == low:
        return arr[low]

    mid = low + (high - low) // 2

    if mid < high and arr[mid + 1] < arr[mid]:
        return arr[mid]
    if mid > low and arr[mid] < arr[mid - 1]:
        return arr[mid - 1]

    if arr[low] > arr[mid]:
        return find_Max(arr, low, mid - 1)
    else:
        return find_Max(arr, mid + 1, high)",passed,5.15558333328651e-05,True,True,17,14,14,0,0,3,0,8,7,17,17,34,24,51,89.13835275565901,233.833087536779,7.0,1636.831612757453,90.93508959763628,0.07794436251225967,57.33527014603954
40,mbpp,validation,40,claude_3_haiku_0_shot_v4_prompt,"def extract_column(nested_list, column_index):
    """"""
    Extracts a specified column from a given nested list.
    
    Args:
        nested_list (list): The input nested list.
        column_index (int): The index of the column to extract.
    
    Returns:
        list: The extracted column.
    """"""
    return [row[column_index] for row in nested_list]",passed,0.00011055316666670478,True,True,12,3,2,0,8,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
41,mbpp,validation,41,claude_3_haiku_0_shot_v4_prompt,"def Seq_Linear(sequence):
    """"""
    Checks whether a given sequence is linear or not.

    Args:
        sequence (list): A list of numbers representing the sequence.

    Returns:
        str: ""Linear Sequence"" if the sequence is linear, ""Non Linear Sequence"" otherwise.
    """"""
    differences = [sequence[i] - sequence[i-1] for i in range(1, len(sequence))]
    if len(set(differences)) == 1:
        return ""Linear Sequence""
    else:
        return ""Non Linear Sequence""",passed,4.547430000153933e-05,True,True,15,7,6,0,7,2,0,3,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,94.30857441939425
42,mbpp,validation,42,claude_3_haiku_0_shot_v4_prompt,"def tuple_to_float(test_tup):
    """"""
    Converts a tuple of integers to a floating-point number.

    Args:
        test_tup (tuple): A tuple of integers.

    Returns:
        float: The floating-point number represented by the input tuple.
    """"""
    return float('.'.join(map(str, test_tup)))",passed,3.655610000047697e-05,True,True,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
43,mbpp,validation,43,claude_3_haiku_0_shot_v4_prompt,"def Split(input_list):
    return [num for num in input_list if num % 2 != 0]",passed,5.937326666677715e-05,True,True,2,2,2,0,0,0,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,84.69319837885878
44,mbpp,validation,44,claude_3_haiku_0_shot_v4_prompt,"def difference(n):
    sum_of_cubes = (n * (n + 1) * (2 * n + 1)) // 6
    sum_of_numbers = (n * (n + 1)) // 2
    return sum_of_cubes - sum_of_numbers ** 2",failed: ,,False,True,4,4,4,0,0,0,0,1,5,14,11,22,19,33,64.91260938324326,140.1816079436383,3.9285714285714284,550.713459778579,30.595192209921056,0.04672720264787944,71.70102320800737
45,mbpp,validation,45,claude_3_haiku_0_shot_v4_prompt,"def find_Odd_Pair(arr, n):
    odd_pairs = 0
    for i in range(n):
        for j in range(i + 1, n):
            if (arr[i] ^ arr[j]) % 2 != 0:
                odd_pairs += 1
    return odd_pairs",passed,5.649883333565716e-05,True,True,7,7,7,0,0,0,0,4,4,9,5,10,13,15,36.52932501298081,55.506595772116384,2.2222222222222223,123.34799060470309,6.852666144705727,0.01850219859070546,68.81312627594012
46,mbpp,validation,46,claude_3_haiku_0_shot_v4_prompt,"def toggle_string(input_string):
    """"""
    Toggles the case of each character in the input string.
    
    Args:
        input_string (str): The input string to toggle the case.
    
    Returns:
        str: The input string with the case of each character toggled.
    """"""
    return input_string.swapcase()",passed,2.877803332618593e-05,True,True,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
47,mbpp,validation,47,claude_3_haiku_0_shot_v4_prompt,"def digit_distance_nums(num1, num2):
    """"""
    Calculates the digit distance between two integers.

    Args:
        num1 (int): The first integer.
        num2 (int): The second integer.

    Returns:
        int: The sum of the absolute differences between the digits of the two integers.
    """"""
    distance = abs(num1 - num2)
    return sum(int(digit) for digit in str(distance))",passed,3.158136666267334e-05,True,True,13,4,3,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,74.84640431451162
48,mbpp,validation,48,claude_3_haiku_0_shot_v4_prompt,"def max_sub_array_sum(arr, n):
    max_so_far = float('-inf')
    max_ending_here = 0

    for num in arr:
        max_ending_here = max_ending_here + num
        if max_so_far < max_ending_here:
            max_so_far = max_ending_here
        if max_ending_here < 0:
            max_ending_here = 0

    return max_so_far",passed,6.515256663988111e-05,True,True,12,10,10,0,0,2,0,4,2,4,3,6,6,9,10.0,23.264662506490403,1.5,34.89699375973561,1.938721875540867,0.007754887502163467,68.07839560482668
49,mbpp,validation,49,claude_3_haiku_0_shot_v4_prompt,"def union_elements(tuple1, tuple2):
    """"""
    Find the union of elements of the given tuples.

    Args:
        tuple1 (tuple): The first tuple.
        tuple2 (tuple): The second tuple.

    Returns:
        tuple: The union of elements of the given tuples.
    """"""
    return tuple(set(tuple1 + tuple2))",passed,9.861766666669306e-05,True,True,12,3,2,0,8,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,60.07139517617164
50,mbpp,validation,50,claude_3_haiku_0_shot_v4_prompt,"def assign_elements(test_list):
    result = {}
    for key, value in test_list:
        result.setdefault(key, []).append(value)
        result.setdefault(value, []).append(key)
    return result",failed: ,,False,True,6,6,6,0,0,0,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
51,mbpp,validation,51,claude_3_haiku_0_shot_v4_prompt,"def Find_Max_Length(lst):
    """"""
    Finds the maximum length of a sublist within the given list.

    Args:
        lst (list): A list of sublists.

    Returns:
        int: The maximum length of a sublist in the given list.
    """"""
    return max(len(sublist) for sublist in lst)",passed,7.728496666648728e-05,True,True,11,3,2,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
52,mbpp,validation,52,claude_3_haiku_0_shot_v4_prompt,"def extract_values(text):
    """"""
    Extracts values between quotation marks from a given text.
    
    Args:
        text (str): The input text to extract values from.
    
    Returns:
        list: A list of extracted values.
    """"""
    return re.findall(r'""(.*?)""', text)",failed: name 're' is not defined,,False,True,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
53,mbpp,validation,53,claude_3_haiku_0_shot_v4_prompt,"def count_Pairs(arr, n):
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            if arr[i] != arr[j]:
                count += 1
    return count",passed,4.8725366665773134e-05,True,True,7,7,7,0,0,0,0,4,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,71.2064477082596
54,mbpp,validation,54,claude_3_haiku_0_shot_v4_prompt,"def split(string):
    """"""
    Splits a given string into a list of individual characters.
    
    Args:
        string (str): The input string to be split.
    
    Returns:
        list: A list of individual characters from the input string.
    """"""
    return list(string)",passed,5.052319999852746e-05,True,True,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
55,mbpp,validation,55,claude_3_haiku_0_shot_v4_prompt,"def sum_digits(n):
    if n == 0:
        return 0
    return n % 10 + sum_digits(n // 10)",passed,2.560216666627942e-05,True,True,4,4,4,0,0,0,0,2,4,5,4,8,9,12,19.60964047443681,38.03910001730775,3.2,121.72512005538482,6.762506669743601,0.012679700005769252,75.5328862815304
56,mbpp,validation,56,claude_3_haiku_0_shot_v4_prompt,"def is_sorted(lst):
    """"""
    Checks whether a given list is sorted in ascending order.
    
    Args:
        lst (list): The list to be checked.
    
    Returns:
        bool: True if the list is sorted, False otherwise.
    """"""
    for i in range(len(lst) - 1):
        if lst[i] > lst[i+1]:
            return False
    return True",failed: name 'issort_list' is not defined,,False,True,14,6,5,0,7,2,0,3,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,91.20890456123814
57,mbpp,validation,57,claude_3_haiku_0_shot_v4_prompt,"def empty_list(length):
    return [{} for _ in range(length)]",passed,6.062700000863212e-05,True,True,2,2,2,0,0,0,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
58,mbpp,validation,58,claude_3_haiku_0_shot_v4_prompt,"def sort_sublists(list_of_lists):
    return [sorted(sublist) for sublist in list_of_lists]",passed,0.00011673260000103862,True,True,2,2,2,0,0,0,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
59,mbpp,validation,59,claude_3_haiku_0_shot_v4_prompt,"def remove_words(list1, charlist):
    return [' '.join(word for word in line.split() if all(phrase not in word for phrase in charlist)) for line in list1]",passed,0.0001098544999990736,True,True,2,2,2,0,0,0,0,5,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.01948297264516
60,mbpp,validation,60,claude_3_haiku_0_shot_v4_prompt,"def max_sum_pair_diff_lessthan_K(arr, N, K):
    arr.sort()
    dp = [0] * N
    dp[0] = 0

    for i in range(1, N):
        dp[i] = dp[i - 1]
        if arr[i] - arr[i - 1] < K:
            if i >= 2:
                dp[i] = max(dp[i], dp[i - 2] + arr[i] + arr[i - 1])
            else:
                dp[i] = max(dp[i], arr[i] + arr[i - 1])

    return dp[N - 1]",passed,6.349586666753264e-05,True,True,14,12,12,0,0,2,0,4,5,15,13,26,20,39,70.2129994085646,168.55519570060713,4.333333333333333,730.4058480359641,40.57810266866468,0.05618506523353571,60.329089640139095
61,mbpp,validation,61,claude_3_haiku_0_shot_v4_prompt,"def two_unique_nums(nums):
    unique_nums = set()
    duplicate_nums = set()
    
    for num in nums:
        if num in unique_nums:
            duplicate_nums.add(num)
        else:
            unique_nums.add(num)
    
    return [num for num in nums if num not in duplicate_nums]",passed,7.300393333480315e-05,True,True,11,9,9,0,0,2,0,5,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,70.50137043534603
62,mbpp,validation,62,claude_3_haiku_0_shot_v4_prompt,"def unique_product(list_data):
    unique_nums = set(list_data)
    product = 1
    for num in unique_nums:
        product *= num
    return product",passed,5.750313333360661e-05,True,True,6,6,6,0,0,0,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,78.01508585192973
63,mbpp,validation,63,claude_3_haiku_0_shot_v4_prompt,"def surfacearea_cylinder(radius, height):
    """"""
    Calculates the surface area of a cylinder.

    Args:
        radius (float): The radius of the cylinder.
        height (float): The height of the cylinder.

    Returns:
        float: The surface area of the cylinder.
    """"""
    pi = 3.14159
    lateral_area = 2 * pi * radius * height
    base_area = 2 * pi * radius ** 2
    surface_area = lateral_area + base_area
    return surface_area",failed: ,,False,True,16,7,6,0,8,2,0,1,3,10,7,14,13,21,37.974168451037094,77.70923408096293,2.1,163.18939157002217,9.066077309445676,0.025903078026987644,88.10219108755739
64,mbpp,validation,64,claude_3_haiku_0_shot_v4_prompt,"def count_no(a, n, l, r):
    count = 0
    for num in range(l, r + 1):
        if num % a != 0:
            count += 1
            if count == n:
                return num
    return -1",passed,3.953899999942223e-05,True,True,8,8,8,0,0,0,0,4,5,8,6,11,13,17,35.60964047443681,62.907475208398566,3.4375,216.24444602887007,12.013580334937226,0.02096915840279952,67.16747896373072
65,mbpp,validation,65,claude_3_haiku_0_shot_v4_prompt,"def is_Sub_Array(arr1, arr2, n, m):
    """"""
    Checks if arr2 is a subarray of arr1.
    
    Args:
        arr1 (list): The main array.
        arr2 (list): The subarray to be checked.
        n (int): The length of arr1.
        m (int): The length of arr2.
    
    Returns:
        bool: True if arr2 is a subarray of arr1, False otherwise.
    """"""
    i = 0
    j = 0
    
    while i < n and j < m:
        if arr1[i] == arr2[j]:
            i += 1
            j += 1
            if j == m:
                return True
        else:
            i = i - j + 1
            j = 0
    
    return False",passed,6.736476666446833e-05,True,True,27,14,13,0,10,4,0,5,5,10,9,18,15,27,44.82892142331043,105.48604608143,4.5,474.687207366435,26.3715115203575,0.03516201536047667,88.51510652009037
66,mbpp,validation,66,claude_3_haiku_0_shot_v4_prompt,"def last_Digit_Factorial(n):
    if n == 0:
        return 1
    elif n <= 2:
        return n
    elif n == 3:
        return 6
    elif n == 4:
        return 4
    else:
        last_digit_lookup = [1, 1, 2, 6, 4, 0, 0, 0, 0, 0]
        return last_digit_lookup[n % 10]",failed: ,,False,True,12,12,12,0,0,0,0,5,3,6,5,10,9,15,20.264662506490406,47.548875021634686,2.5,118.87218755408671,6.604010419671484,0.01584962500721156,64.04290643167234
67,mbpp,validation,67,claude_3_haiku_0_shot_v4_prompt,"def interleave_lists(list1, list2, list3):
    """"""
    Interleaves three lists of the same length.

    Args:
        list1 (list): The first list to interleave.
        list2 (list): The second list to interleave.
        list3 (list): The third list to interleave.

    Returns:
        list: The interleaved list.
    """"""
    return [element for elements in zip(list1, list2, list3) for element in elements]",passed,0.00012211906666645216,True,True,13,3,2,0,9,2,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
68,mbpp,validation,68,claude_3_haiku_0_shot_v4_prompt,"def find_dissimilar(tuple1, tuple2):
    """"""
    Find the dissimilar elements in the given two tuples.

    Args:
        tuple1 (tuple): The first tuple.
        tuple2 (tuple): The second tuple.

    Returns:
        tuple: A tuple containing the dissimilar elements.
    """"""
    return tuple(set(tuple1) ^ set(tuple2))",passed,8.042773333727382e-05,True,True,12,3,2,0,8,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,60.07139517617164
69,mbpp,validation,69,claude_3_haiku_0_shot_v4_prompt,"def extract_even(test_tuple):
    """"""
    Extracts the even elements from a nested mixed tuple.

    Args:
        test_tuple (tuple): The input tuple containing mixed elements.

    Returns:
        tuple: A new tuple containing only the even elements from the input tuple.
    """"""
    def _even_ele(elements):
        """"""
        Helper function to recursively extract even elements from a tuple.

        Args:
            elements (tuple): The tuple to extract even elements from.

        Returns:
            tuple: A new tuple containing only the even elements from the input tuple.
        """"""
        result = ()
        for element in elements:
            if isinstance(element, tuple):
                result += (_even_ele(element),)
            elif element % 2 == 0:
                result += (element,)
        return result

    return _even_ele(test_tuple)",passed,0.00010990713333332754,True,True,29,12,10,0,14,5,0,1,3,7,4,8,10,12,24.406371956566698,39.863137138648355,1.7142857142857142,68.33680652339717,3.796489251299843,0.013287712379549451,83.7264583021386
70,mbpp,validation,70,claude_3_haiku_0_shot_v4_prompt,"def surface_Area(base, slant_height):
    """"""
    Calculates the surface area of a square pyramid.

    Args:
        base (float): The length of the base of the pyramid.
        slant_height (float): The slant height of the pyramid.

    Returns:
        float: The surface area of the pyramid.
    """"""
    return 2 * base * slant_height + base ** 2",passed,2.9365566666683664e-05,True,True,12,3,2,0,8,2,0,1,3,6,4,8,9,12,20.264662506490406,38.03910001730775,2.0,76.0782000346155,4.226566668589751,0.012679700005769252,53.74794721316864
71,mbpp,validation,71,claude_3_haiku_0_shot_v4_prompt,"def my_dict(dictionary):
    return not bool(dictionary)",passed,2.924539999942984e-05,True,True,2,2,2,0,0,0,0,1,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,91.19102358831414
72,mbpp,validation,72,claude_3_haiku_0_shot_v4_prompt,"def catalan_number(n):
    if n <= 1:
        return 1
    
    catalans = [1, 1]
    for i in range(2, n+1):
        current_catalan = sum(catalans[j] * catalans[i-j-1] for j in range(i-1))
        catalans.append(current_catalan)
    
    return catalans[n]",failed: ,,False,True,10,8,8,0,0,2,0,4,4,7,6,12,11,18,27.651484454403228,62.26976913547136,3.4285714285714284,213.49635132161606,11.860908406756447,0.020756589711823786,67.19846286871275
73,mbpp,validation,73,claude_3_haiku_0_shot_v4_prompt,"import re

def find_adverbs(text):
    adverbs = []
    for match in re.finditer(r'\w+ly', text):
        start, end = match.span()
        adverb = match.group()
        adverbs.append(f'{start}-{end}: {adverb}')
    return '\n'.join(adverbs)",passed,4.213900001559523e-05,True,True,9,8,8,0,0,1,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
74,mbpp,validation,74,claude_3_haiku_0_shot_v4_prompt,"def expensive_items(items, n):
    """"""
    Find the n most expensive items from a given dataset using a heap queue algorithm.
    
    Args:
        items (list[dict]): A list of dictionaries, where each dictionary represents an item with a 'price' key.
        n (int): The number of most expensive items to return.
    
    Returns:
        list[dict]: A list of the n most expensive items.
    """"""
    return heapq.nlargest(n, items, key=lambda item: item['price'])",failed: name 'heapq' is not defined,,False,True,12,4,2,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
75,mbpp,validation,75,claude_3_haiku_0_shot_v4_prompt,"def split_Arr(arr, n, k):
    """"""
    Splits the input array into two parts and adds the first part to the end.

    Args:
        arr (list): The input array.
        n (int): The length of the input array.
        k (int): The index at which the array should be split.

    Returns:
        list: The modified array.
    """"""
    first_part = arr[:k]
    second_part = arr[k:]
    return second_part + first_part",passed,9.441686666680957e-05,True,True,15,7,4,0,9,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,77.66782260062452
76,mbpp,validation,76,claude_3_haiku_0_shot_v4_prompt,"def list_tuple(input_list):
    """"""
    Converts a list to a tuple.

    Args:
        input_list (list): The input list to be converted.

    Returns:
        tuple: The converted tuple.
    """"""
    return tuple(input_list)",passed,7.134843332702682e-05,True,True,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
77,mbpp,validation,77,claude_3_haiku_0_shot_v4_prompt,"def big_diff(nums):
    if not nums:
        return 0
    
    max_num = max(nums)
    min_num = min(nums)
    
    return max_num - min_num",passed,4.172516666661371e-05,True,True,8,6,6,0,0,2,0,2,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,75.30055572580265
78,mbpp,validation,78,claude_3_haiku_0_shot_v4_prompt,"def perfect_squares(a, b):
    perfect_squares = []
    for num in range(a, b + 1):
        sqrt = num ** 0.5
        if sqrt.is_integer():
            perfect_squares.append(num)
    return perfect_squares",passed,6.800669999999324e-05,True,True,7,7,7,0,0,0,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,72.82491762469213
79,mbpp,validation,79,claude_3_haiku_0_shot_v4_prompt,"import cmath

def polar_rect(r, theta):
    """"""
    Converts polar coordinates to rectangular coordinates.

    Args:
        r (float): The magnitude (radius) of the polar coordinate.
        theta (float): The angle (in radians) of the polar coordinate.

    Returns:
        tuple: A tuple containing the rectangular coordinates (x, y).
    """"""
    x = r * cmath.cos(theta)
    y = r * cmath.sin(theta)
    return (x, y)",failed: ,,False,True,16,6,5,0,8,3,0,1,1,3,2,4,4,6,4.754887502163469,12.0,0.6666666666666666,8.0,0.4444444444444444,0.004,89.87830862820935
80,mbpp,validation,80,claude_3_haiku_0_shot_v4_prompt,"def swap_List(lst):
    if len(lst) < 2:
        return lst
    
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst",passed,5.608113339500657e-05,True,True,6,5,5,0,0,1,0,2,2,3,3,4,5,7,6.754887502163469,16.253496664211536,1.3333333333333333,21.67132888561538,1.2039627158675212,0.005417832221403845,76.0046221524879
81,mbpp,validation,81,claude_3_haiku_0_shot_v4_prompt,"def binomial_coeff(n, k):
    """"""
    Calculates the binomial coefficient C(n, k).
    """"""
    coeff = [0] * (k + 1)
    coeff[0] = 1  # C(n, 0) = 1
    for i in range(1, n + 1):
        for j in range(min(i, k), 0, -1):
            coeff[j] = coeff[j] + coeff[j - 1]
    return coeff[k]

def sum_of_product(n):
    """"""
    Calculates the sum of product of binomial coefficients.
    """"""
    return binomial_coeff(2 * n, n - 1)",failed: name 'sum_Of_product' is not defined,,False,True,16,11,9,1,6,1,0,3,4,11,8,15,15,23,46.053747805010275,89.85848369899593,2.727272727272727,245.0685919063525,13.614921772575139,0.02995282789966531,91.48311429529686
82,mbpp,validation,82,claude_3_haiku_0_shot_v4_prompt,"import re

def removezero_ip(ip_address):
    """"""
    Removes leading zeroes from an IP address.
    
    Args:
        ip_address (str): The IP address to be processed.
        
    Returns:
        str: The IP address with leading zeroes removed.
    """"""
    return re.sub(r'\b0+(\d+)', r'\1', ip_address)",passed,4.608463333397594e-05,True,True,13,4,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
83,mbpp,validation,83,claude_3_haiku_0_shot_v4_prompt,"def diff_even_odd(numbers):
    even_numbers = [num for num in numbers if num % 2 == 0]
    odd_numbers = [num for num in numbers if num % 2 != 0]

    if even_numbers:
        first_even = even_numbers[0]
    else:
        first_even = -1

    if odd_numbers:
        first_odd = odd_numbers[0]
    else:
        first_odd = -1

    return first_even - first_odd",passed,6.076809998679285e-05,True,True,15,12,12,0,0,3,0,7,5,8,7,12,13,19,35.60964047443681,70.30835464468075,3.75,263.6563299175528,14.647573884308489,0.02343611821489358,62.58449179769243
84,mbpp,validation,84,claude_3_haiku_0_shot_v4_prompt,"def min_Swaps(str1, str2):
    if len(str1) != len(str2):
        return ""Not Possible""

    diff_count = 0
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            diff_count += 1

    if diff_count % 2 != 0:
        return ""Not Possible""

    return diff_count // 2",passed,3.3730699995733934e-05,True,True,13,10,10,0,0,3,0,5,4,9,6,12,13,18,36.52932501298081,66.60791492653966,2.6666666666666665,177.62110647077242,9.867839248376246,0.022202638308846556,64.74516944135763
85,mbpp,validation,85,claude_3_haiku_0_shot_v4_prompt,"def tuple_size(tuple_obj):
    """"""
    Returns the size of the given tuple in bytes.
    
    Args:
        tuple_obj (tuple): The tuple whose size is to be determined.
    
    Returns:
        int: The size of the tuple in bytes.
    """"""
    return sys.getsizeof(tuple_obj)",failed: name 'sys' is not defined,,False,True,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
86,mbpp,validation,86,claude_3_haiku_0_shot_v4_prompt,"def find_kth(arr1, arr2, m, n, k):
    if m > n:
        return find_kth(arr2, arr1, n, m, k)

    left, right = 0, m

    while left <= right:
        partitionX = (left + right) // 2
        partitionY = k - partitionX

        maxLeftX = arr1[partitionX - 1] if partitionX != 0 else float('-inf')
        minRightX = arr1[partitionX] if partitionX != m else float('inf')

        maxLeftY = arr2[partitionY - 1] if partitionY != 0 else float('-inf')
        minRightY = arr2[partitionY] if partitionY != n else float('inf')

        if maxLeftX <= minRightY and maxLeftY <= minRightX:
            return max(maxLeftX, maxLeftY)
        elif maxLeftX > minRightY:
            right = partitionX - 1
        else:
            left = partitionX + 1",passed,0.00029159923333281766,True,True,22,17,17,0,0,5,0,10,7,17,17,34,24,51,89.13835275565901,233.833087536779,7.0,1636.831612757453,90.93508959763628,0.07794436251225967,55.22689152969829
87,mbpp,validation,87,claude_3_haiku_0_shot_v4_prompt,"def armstrong_number(num):
    """"""
    Checks if a given number is an Armstrong number.
    
    An Armstrong number is a number that is equal to the sum of the cubes of its digits.
    
    Args:
        num (int): The number to be checked.
    
    Returns:
        bool: True if the number is an Armstrong number, False otherwise.
    """"""
    original_num = num
    digit_count = len(str(num))
    armstrong_sum = 0
    
    while num > 0:
        digit = num % 10
        armstrong_sum += digit ** digit_count
        num //= 10
    
    return original_num == armstrong_sum",passed,2.8920266663590156e-05,True,True,22,10,9,0,8,5,0,2,6,8,6,12,14,18,39.50977500432694,68.53238859703687,4.5,308.3957486866659,17.133097149259218,0.022844129532345624,92.18576411185582
88,mbpp,validation,88,claude_3_haiku_0_shot_v4_prompt,"def sum_average(n):
    total = n * (n + 1) // 2
    average = total / n
    return total, average",passed,4.085026666681794e-05,True,True,4,4,4,0,0,0,0,1,4,6,4,8,10,12,23.509775004326936,39.863137138648355,2.6666666666666665,106.3016990363956,5.905649946466422,0.013287712379549451,75.52495957230771
89,mbpp,validation,89,claude_3_haiku_0_shot_v4_prompt,"def is_Even(n):
    return (n & 1) == 0",passed,2.3423700001027706e-05,True,True,2,2,2,0,0,0,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,84.96220422681199
