,dataset,split,task_id,model,code,result,compiled,passed_tests,avg_test_time,loc,lloc,sloc,comments,multi,blank,single_comments,CC,h1,h2,N1,N2,vocabulary,length,calculated_length,volume,difficulty,effort,time,bugs,MI
0,mbpp,test,0,claude_3_haiku_0_shot,"def remove_occurrences(string, char):
    result = list(string)
    first_index = None
    last_index = None

    for i, c in enumerate(result):
        if c == char:
            if first_index is None:
                first_index = i
            last_index = i

    if first_index is not None:
        result.pop(first_index)
    if last_index is not None:
        result.pop(last_index - (1 if first_index is not None else 0))

    return ''.join(result)",failed: name 'remove_Occ' is not defined,True,False,,17,14,14,0,0,3,0,7,4,6,6,12,10,18,23.509775004326936,59.794705707972525,4.0,239.1788228318901,13.28771237954945,0.019931568569324175,61.61666796307529
1,mbpp,test,1,claude_3_haiku_0_shot,"def sort_matrix(matrix):
    """"""
    Sorts a given matrix in ascending order according to the sum of its rows.

    Args:
        matrix (list): A 2D list representing the matrix.

    Returns:
        list: The sorted matrix.
    """"""
    return sorted(matrix, key=lambda row: sum(row))",passed,True,True,0.00015700256666377753,11,4,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
2,mbpp,test,2,claude_3_haiku_0_shot,"from collections import Counter

def count_most_common_words(text):
    """"""
    Count the most common words in the given text.

    Args:
        text (str): The input text.

    Returns:
        list: A list of the 4 most common words and their counts.
    """"""
    word_counts = Counter(text.split())
    return word_counts.most_common(4)",failed: name 'count_common' is not defined,True,False,,14,5,4,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
3,mbpp,test,3,claude_3_haiku_0_shot,"def calculate_triangular_prism_volume(length, base, height):
    """"""
    Calculates the volume of a triangular prism.

    Args:
        length (float): The length of the triangular prism.
        base (float): The base of the triangular prism.
        height (float): The height of the triangular prism.

    Returns:
        float: The volume of the triangular prism.
    """"""
    return (length * base * height) / 2",failed: name 'find_Volume' is not defined,True,False,,13,3,2,0,9,2,0,1,2,6,3,6,8,9,17.509775004326936,27.0,1.0,27.0,1.5,0.009,51.65087316931213
4,mbpp,test,4,claude_3_haiku_0_shot,"def split_at_lowercase(text):
    """"""
    Split a string at lowercase letters.
    
    Args:
        text (str): The input string to be split.
    
    Returns:
        list: A list of substrings split at lowercase letters.
    """"""
    return re.findall(r'[a-z][^a-z]*', text)",failed: name 'split_lowerstring' is not defined,True,False,,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
5,mbpp,test,5,claude_3_haiku_0_shot,"import re

def find_lowercase_underscore_sequences(text):
    pattern = r'^[a-z]+_[a-z]+$'
    if re.match(pattern, text):
        return 'Found a match!'
    else:
        return 'Not matched!'",failed: name 'text_lowercase_underscore' is not defined,True,False,,8,7,7,0,0,1,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
6,mbpp,test,6,claude_3_haiku_0_shot,"def calculate_square_perimeter(side_length):
    """"""
    Calculates the perimeter of a square.

    Args:
        side_length (float): The length of one side of the square.

    Returns:
        float: The perimeter of the square.
    """"""
    return 4 * side_length",failed: name 'square_perimeter' is not defined,True,False,,11,3,2,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,65.11035329571214
7,mbpp,test,7,claude_3_haiku_0_shot,"NO_OF_CHARS = 256

def remove_dirty_chars(string, second_string):
    char_count = [0] * NO_OF_CHARS
    for char in second_string:
        char_count[ord(char)] += 1

    result = []
    for char in string:
        if char_count[ord(char)] == 0:
            result.append(char)

    return ''.join(result)",passed,True,True,3.932076666615103e-05,13,10,10,0,0,3,0,4,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,67.45805407123096
8,mbpp,test,8,claude_3_haiku_0_shot,"def contains_duplicate(nums):
    return len(set(nums)) != len(nums)",failed: name 'test_duplicate' is not defined,True,False,,2,2,2,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.5574946685516
9,mbpp,test,9,claude_3_haiku_0_shot,"def is_woodall(n):
    if n < 1:
        return False
    if n == 1:
        return True
    if n % 2 == 0:
        return False
    
    power = 0
    while n % 2 == 0:
        n //= 2
        power += 1
    
    return n == 2 ** power",failed: ,True,False,,14,12,12,0,0,2,0,5,6,8,10,20,14,30,39.50977500432694,114.22064766172811,7.5,856.6548574629608,47.591936525720044,0.038073549220576035,61.37790961352295
10,mbpp,test,10,claude_3_haiku_0_shot,"def find_multiples(num, count):
    return [num * i for i in range(1, count + 1)]",failed: name 'multiples_of_num' is not defined,True,False,,2,2,2,0,0,0,0,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,84.82770130283538
11,mbpp,test,11,claude_3_haiku_0_shot,"def find_first_duplicate(nums):
    seen = set()
    for num in nums:
        if num in seen:
            return num
        seen.add(num)
    return -1",passed,True,True,4.9970233333359224e-05,7,7,7,0,0,0,0,3,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,73.70567794030467
12,mbpp,test,12,claude_3_haiku_0_shot,"def maximum_sum(lists):
    """"""
    Find the maximum sum of elements in a list of lists.
    
    Args:
        lists (list): A list of lists containing integers.
        
    Returns:
        int: The maximum sum of elements in the list of lists.
    """"""
    max_sum = float('-inf')
    for lst in lists:
        current_sum = sum(lst)
        max_sum = max(max_sum, current_sum)
    return max_sum",failed: name 'maximum_Sum' is not defined,True,False,,15,7,6,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
13,mbpp,test,13,claude_3_haiku_0_shot,"def binary_to_decimal(binary_num):
    decimal = 0
    for digit in str(binary_num):
        decimal = decimal * 2 + int(digit)
    return decimal",passed,True,True,3.0920100000031424e-05,5,5,5,0,0,0,0,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,76.14705226402761
14,mbpp,test,14,claude_3_haiku_0_shot,"def find_product(arr):
    """"""
    Find the product of non-repeated elements in a given array.
    
    Args:
        arr (list): The input array.
    
    Returns:
        int: The product of non-repeated elements.
    """"""
    unique_elements = set(arr)
    product = 1
    for element in unique_elements:
        product *= element
    return product",failed: name 'find_Product' is not defined,True,False,,15,7,6,0,7,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,99.52233477756639
15,mbpp,test,15,claude_3_haiku_0_shot,"def check_k_elements(test_list, k):
    return all(all(element == k for element in tup) for tup in test_list)",passed,True,True,0.00011653393333593461,2,2,2,0,0,0,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.28848882059837
16,mbpp,test,16,claude_3_haiku_0_shot,"import re

def remove_digits(string_list):
    """"""
    Removes all digits from a list of strings.
    
    Args:
        string_list (list): A list of strings.
        
    Returns:
        list: A list of strings with all digits removed.
    """"""
    return [re.sub(r'\d', '', s) for s in string_list]",failed: name 'remove' is not defined,True,False,,13,4,3,0,7,3,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
17,mbpp,test,17,claude_3_haiku_0_shot,"def binomial_coefficient(n, k):
    """"""
    Calculates the binomial coefficient C(n, k).
    
    Args:
        n (int): The total number of items.
        k (int): The number of items to be chosen.
    
    Returns:
        int: The binomial coefficient C(n, k).
    """"""
    if k > n:
        return 0
    if k == 0 or k == n:
        return 1
    return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)",failed: name 'binomial_Coeff' is not defined,True,False,,16,7,6,0,8,2,0,4,5,8,8,16,13,24,35.60964047443681,88.81055323538621,5.0,444.0527661769311,24.669598120940616,0.029603517745128736,87.2926219403951
18,mbpp,test,18,claude_3_haiku_0_shot,"def find_odd_occurrence(arr):
    """"""
    Find the element occurring an odd number of times in the given array.
    
    Args:
        arr (list): The input array.
    
    Returns:
        int: The element occurring an odd number of times, or -1 if no such element is found.
    """"""
    count = {}
    for num in arr:
        count[num] = count.get(num, 0) + 1
    
    for num, freq in count.items():
        if freq % 2 != 0:
            return num
    
    return -1",failed: name 'get_Odd_Occurrence' is not defined,True,False,,19,9,8,0,7,4,0,4,4,6,4,7,10,11,23.509775004326936,36.541209043760986,2.3333333333333335,85.26282110210897,4.736823394561609,0.012180403014586996,94.9913967310749
19,mbpp,test,19,claude_3_haiku_0_shot,"def count_substrings_with_equal_ends(s):
    count = 0
    for i in range(len(s)):
        for j in range(i+1, len(s)+1):
            substring = s[i:j]
            if substring[0] == substring[-1]:
                count += 1
    return count",failed: name 'count_Substring_With_Equal_Ends' is not defined,True,False,,8,9,8,0,0,0,0,4,3,6,5,9,9,14,20.264662506490406,44.37895002019238,2.25,99.85263754543286,5.547368752524047,0.014792983340064125,67.11262134714077
20,mbpp,test,20,claude_3_haiku_0_shot,"from collections import Counter
import heapq

def top_k_frequent(nums, k):
    """"""
    Find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.
    
    Args:
        nums (List[List[int]]): A list of sorted and distinct integers.
        k (int): The number of most frequent integers to return.
    
    Returns:
        List[int]: The top k integers that occur most frequently.
    """"""
    # Count the frequency of each integer
    freq = Counter(num for row in nums for num in row)
    
    # Use a min-heap to keep track of the k most frequent integers
    heap = [(-count, num) for num, count in freq.items()]
    heapq.heapify(heap)
    
    # Pop the k most frequent integers from the heap
    return [heapq.heappop(heap)[1] for _ in range(k)]",failed: name 'func' is not defined,True,False,,23,8,7,3,8,5,3,5,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,92.65572602053562
21,mbpp,test,21,claude_3_haiku_0_shot,"def find_largest_prime_factor(n):
    """"""
    Find the largest prime factor of a given number.
    
    Args:
        n (int): The number to find the largest prime factor for.
    
    Returns:
        int: The largest prime factor of the given number.
    """"""
    largest_prime_factor = 1
    
    while n % 2 == 0:
        largest_prime_factor = 2
        n //= 2
    
    for i in range(3, int(n ** 0.5) + 1, 2):
        while n % i == 0:
            largest_prime_factor = i
            n //= i
    
    if n > 2:
        largest_prime_factor = n
    
    return largest_prime_factor",failed: name 'max_Prime_Factors' is not defined,True,False,,25,13,12,0,7,6,0,5,6,9,9,18,15,27,44.039100017307746,105.48604608143,6.0,632.91627648858,35.162015360476666,0.03516201536047667,90.09926442773734
22,mbpp,test,22,claude_3_haiku_0_shot,"def decimal_to_binary(decimal_number):
    binary_number = 0
    power = 0
    while decimal_number:
        remainder = decimal_number % 2
        binary_number += remainder * 10 ** power
        decimal_number //= 2
        power += 1
    return binary_number",failed: name 'decimal_To_Binary' is not defined,True,False,,9,9,9,0,0,0,0,2,5,9,6,12,14,18,40.13896548741762,68.53238859703687,3.3333333333333335,228.44129532345625,12.691183073525346,0.022844129532345624,66.06021535463522
23,mbpp,test,23,claude_3_haiku_0_shot,"def find_missing(arr, n):
    left, right = 0, n - 1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] != mid + 1:
            if mid == 0 or arr[mid - 1] == mid:
                return mid + 1
            right = mid - 1
        else:
            left = mid + 1

    return -1",passed,True,True,5.887313333327408e-05,14,11,11,0,0,3,0,5,8,13,14,27,21,41,72.10571633583419,180.0850143339292,8.307692307692308,1496.0908883126426,83.11616046181348,0.06002833811130973,60.8176991615131
24,mbpp,test,24,claude_3_haiku_0_shot,"def get_nth_rectangular_number(n):
    """"""
    Calculates the n-th rectangular number.
    
    Args:
        n (int): The position of the rectangular number to be calculated.
    
    Returns:
        int: The n-th rectangular number.
    """"""
    if n < 1:
        raise ValueError(""n must be a positive integer"")
    return n * (n + 1)",failed: name 'find_rect_num' is not defined,True,False,,13,5,4,0,7,2,0,2,3,3,3,6,6,9,9.509775004326938,23.264662506490403,3.0,69.79398751947122,3.877443751081734,0.007754887502163467,86.31376183131415
25,mbpp,test,25,claude_3_haiku_0_shot,"def find_nth_digit_in_fraction(numerator, denominator, n):
    """"""
    Find the nth digit in the proper fraction of two given numbers.
    
    Args:
        numerator (int): The numerator of the fraction.
        denominator (int): The denominator of the fraction.
        n (int): The position of the digit to be found, starting from the first digit after the decimal point.
    
    Returns:
        int: The nth digit in the proper fraction.
    """"""
    if n <= 0:
        raise ValueError(""n must be a positive integer"")
    
    remainder = numerator
    for _ in range(n):
        remainder *= 10
        digit = remainder // denominator
        remainder %= denominator
    
    return digit",failed: name 'find_Nth_Digit' is not defined,True,False,,22,10,9,0,9,4,0,3,4,5,4,8,9,12,19.60964047443681,38.03910001730775,3.2,121.72512005538482,6.762506669743601,0.012679700005769252,92.360045978899
26,mbpp,test,26,claude_3_haiku_0_shot,"def sort_mixed_list(mixed_list):
    integers = []
    strings = []
    for item in mixed_list:
        if isinstance(item, int):
            integers.append(item)
        elif isinstance(item, str):
            strings.append(item)
    return sorted(integers) + sorted(strings)",passed,True,True,0.00010254526666659084,9,9,9,0,0,0,0,4,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,73.90483161137286
27,mbpp,test,27,claude_3_haiku_0_shot,"def find_division_of_first_even_and_odd(numbers):
    """"""
    Find the division of the first even and odd numbers in the given list.
    
    Args:
        numbers (list): A list of integers.
    
    Returns:
        float: The division of the first even and odd numbers in the list.
    """"""
    try:
        first_even = next((num for num in numbers if num % 2 == 0), None)
        first_odd = next((num for num in numbers if num % 2 != 0), None)
        
        if first_even is None or first_odd is None:
            return 0.0
        
        return first_even / first_odd
    except ZeroDivisionError:
        return 0.0",failed: name 'div_even_odd' is not defined,True,False,,20,10,9,0,7,4,0,8,6,10,8,16,16,24,48.72905595320056,96.0,4.8,460.79999999999995,25.599999999999998,0.032,91.51249538909849
28,mbpp,test,28,claude_3_haiku_0_shot,"from collections import Counter
import heapq

def rearrange_string(s):
    """"""
    Check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.
    """"""
    # Count the frequency of each character
    char_counts = Counter(s)

    # Create a max-heap of characters based on their frequency
    heap = [(-count, char) for char, count in char_counts.items()]
    heapq.heapify(heap)

    # Check if the most frequent character appears more than half the length of the string
    if (-heap[0][0]) * 2 > len(s) + 1:
        return """"

    # Rearrange the string
    result = []
    while len(heap) >= 2:
        # Pop the two most frequent characters
        count1, char1 = heapq.heappop(heap)
        count2, char2 = heapq.heappop(heap)

        # Add the characters to the result
        result.append(char1)
        result.append(char2)

        # Push the characters back to the heap with decremented counts
        if count1 + 1:
            heapq.heappush(heap, (count1 + 1, char1))
        if count2 + 1:
            heapq.heappush(heap, (count2 + 1, char2))

    # Add the remaining character, if any
    if heap:
        result.append(heap[0][1])

    return ''.join(result)",failed: name 'rearange_string' is not defined,True,False,,40,22,21,8,3,8,8,7,5,11,10,18,16,28,49.663388279447084,112.0,4.090909090909091,458.1818181818182,25.454545454545453,0.037333333333333336,84.5920839594824
29,mbpp,test,29,claude_3_haiku_0_shot,"from collections import Counter

def get_element_frequency(nested_list):
    """"""
    Find the frequency of elements in a given list of lists.

    Args:
        nested_list (list): A list of lists containing the elements.

    Returns:
        dict: A dictionary where the keys are the elements and the values are their frequencies.
    """"""
    flattened_list = [item for sublist in nested_list for item in sublist]
    return dict(Counter(flattened_list))",failed: name 'freq_element' is not defined,True,False,,14,5,4,0,7,3,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
30,mbpp,test,30,claude_3_haiku_0_shot,"def filter_even_numbers(numbers):
    return list(filter(lambda num: num % 2 == 0, numbers))",failed: name 'filter_evennumbers' is not defined,True,False,,2,3,2,0,0,0,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,81.12095583420833
31,mbpp,test,31,claude_3_haiku_0_shot,"def find_repeated_sum(arr):
    """"""
    Finds the sum of repeated elements in a given array.
    
    Args:
        arr (list): The input array.
        
    Returns:
        int: The sum of repeated elements.
    """"""
    repeated_elements = set()
    for element in arr:
        if arr.count(element) > 1:
            repeated_elements.add(element)
    
    return sum(repeated_elements)",failed: name 'find_Sum' is not defined,True,False,,16,7,6,0,7,3,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,99.38783185358979
32,mbpp,test,32,claude_3_haiku_0_shot,"import re

def find_lowercase_sequences(text):
    pattern = r'^[a-z]+_[a-z]+$'
    if re.match(pattern, text):
        return ""Found a match!""
    else:
        return ""Not matched!""",failed: name 'text_match' is not defined,True,False,,8,7,7,0,0,1,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
33,mbpp,test,33,claude_3_haiku_0_shot,"import re

def match_word_start(text):
    pattern = r'^\w+'
    if re.search(pattern, text):
        return 'Found a match!'
    else:
        return 'Not matched!'",failed: name 'text_match_string' is not defined,True,False,,8,7,7,0,0,1,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
34,mbpp,test,34,claude_3_haiku_0_shot,"def gcd(numbers):
    """"""
    Find the greatest common divisor of the given list of numbers.
    
    Args:
        numbers (list): A list of integers.
    
    Returns:
        int: The greatest common divisor of the given numbers.
    """"""
    if not numbers:
        return 0
    
    result = numbers[0]
    for num in numbers[1:]:
        result = _gcd(result, num)
    
    return result

def _gcd(a, b):
    """"""
    Find the greatest common divisor of two integers.
    
    Args:
        a (int): An integer.
        b (int): Another integer.
    
    Returns:
        int: The greatest common divisor of the two given integers.
    """"""
    while b:
        a, b = b, a % b
    return a",failed: name 'get_gcd' is not defined,True,False,,33,13,11,0,15,7,0,3,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,87.02915119456276
35,mbpp,test,35,claude_3_haiku_0_shot,"def are_all_numbers_distinct(numbers):
    """"""
    Determines whether all the numbers in the given list are distinct.
    
    Args:
        numbers (list): A list of numbers.
    
    Returns:
        bool: True if all numbers are distinct, False otherwise.
    """"""
    return len(numbers) == len(set(numbers))",failed: name 'test_distinct' is not defined,True,False,,11,3,2,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,65.11035329571214
36,mbpp,test,36,claude_3_haiku_0_shot,"def compute_last_digit(a, b):
    if a == b:
        return 1
    if b - a >= 5:
        return 0

    last_digit = 1
    for i in range(a + 1, b + 1):
        last_digit = (last_digit * (i % 10)) % 10
    return last_digit",failed: name 'compute_Last_Digit' is not defined,True,False,,10,9,9,0,0,1,0,4,6,10,8,16,16,24,48.72905595320056,96.0,4.8,460.79999999999995,25.599999999999998,0.032,64.76628728159095
37,mbpp,test,37,claude_3_haiku_0_shot,"def set_odd_bits(num):
    """"""
    Set all odd bits of a given number.
    
    Args:
        num (int): The input number.
    
    Returns:
        int: The number with all odd bits set.
    """"""
    return num | (0b10101010101010101010101010101010 & num)",failed: name 'odd_bit_set_number' is not defined,True,False,,11,3,2,0,7,2,0,1,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,61.84139504366193
38,mbpp,test,38,claude_3_haiku_0_shot,"def extract_elements(matrix, index=0):
    """"""
    Extracts the elements at the specified index from each inner list in the given 2D matrix.
    
    Args:
        matrix (list): A 2D list (matrix) of elements.
        index (int, optional): The index of the elements to extract. Defaults to 0.
    
    Returns:
        list: A list containing the extracted elements.
    """"""
    return [row[index] for row in matrix]",failed: name 'specified_element' is not defined,True,False,,12,3,2,0,8,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
39,mbpp,test,39,claude_3_haiku_0_shot,"def min_length_list(input_list):
    min_length = min(map(len, input_list))
    min_list = min(input_list, key=len)
    return min_length, min_list",passed,True,True,0.00011411856666541099,4,4,4,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
40,mbpp,test,40,claude_3_haiku_0_shot,"def is_equilateral_triangle(a, b, c):
    """"""
    Checks if a triangle with the given side lengths is equilateral.
    
    Args:
        a (float): Length of the first side.
        b (float): Length of the second side.
        c (float): Length of the third side.
    
    Returns:
        bool: True if the triangle is equilateral, False otherwise.
    """"""
    return a == b == c",failed: name 'check_equilateral' is not defined,True,False,,13,3,2,0,9,2,0,1,1,3,2,3,4,5,4.754887502163469,10.0,0.5,5.0,0.2777777777777778,0.0033333333333333335,54.67128791764748
41,mbpp,test,41,claude_3_haiku_0_shot,"def calculate_parallelogram_area(base, height):
    """"""
    Calculates the area of a parallelogram.

    Args:
        base (float): The base length of the parallelogram.
        height (float): The height of the parallelogram.

    Returns:
        float: The area of the parallelogram.
    """"""
    return base * height",failed: name 'parallelogram_area' is not defined,True,False,,12,3,2,0,8,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,60.07139517617164
42,mbpp,test,42,claude_3_haiku_0_shot,"def check_equality(string: str) -> str:
    """"""
    Check if the first and last characters of a given string are equal.

    Args:
        string (str): The input string.

    Returns:
        str: ""Equal"" if the first and last characters are equal, ""Not Equal"" otherwise.
    """"""
    return ""Equal"" if string and string[0] == string[-1] else ""Not Equal""",failed: name 'check_Equality' is not defined,True,False,,11,3,2,0,7,2,0,3,3,5,3,5,8,8,16.36452797660028,24.0,1.5,36.0,2.0,0.008,59.91843509331234
43,mbpp,test,43,claude_3_haiku_0_shot,"def counting_sort(arr):
    """"""
    Sorts the given array using counting sort algorithm.
    
    Args:
        arr (list): The input array to be sorted.
    
    Returns:
        list: The sorted array.
    """"""
    # Find the maximum element in the array
    max_element = max(arr)
    
    # Create a count array to store the count of individual elements
    count_arr = [0] * (max_element + 1)
    
    # Store the count of each element
    for element in arr:
        count_arr[element] += 1
    
    # Modify the count_arr to get the actual position of this element in the output array
    for i in range(1, max_element + 1):
        count_arr[i] += count_arr[i - 1]
    
    # Build the output array
    output_arr = [0] * len(arr)
    i = len(arr) - 1
    while i >= 0:
        output_arr[count_arr[arr[i]] - 1] = arr[i]
        count_arr[arr[i]] -= 1
        i -= 1
    
    return output_arr",passed,True,True,9.992186666636371e-05,33,15,14,5,7,7,5,4,4,14,12,24,18,36,61.30296890880645,150.11730005192322,3.4285714285714284,514.6878858923081,28.593771438461562,0.05003910001730774,86.05864305388742
44,mbpp,test,44,claude_3_haiku_0_shot,"def find_nth_term_geometric_series(first_term, n, common_ratio):
    """"""
    Calculates the n-th term of a geometric series.

    Args:
        first_term (float): The first term of the geometric series.
        n (int): The index of the term to be calculated (1-based).
        common_ratio (float): The common ratio of the geometric series.

    Returns:
        float: The n-th term of the geometric series.
    """"""
    return first_term * common_ratio ** (n - 1)",failed: name 'tn_gp' is not defined,True,False,,13,3,2,0,9,2,0,1,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,51.48333087196182
45,mbpp,test,45,claude_3_haiku_0_shot,"def is_one_less_than_twice_reverse(num):
    """"""
    Check if a given number is one less than twice its reverse.
    """"""
    reverse_num = int(str(num)[::-1])
    return num == 2 * reverse_num - 1",failed: name 'check' is not defined,True,False,,6,5,3,0,3,0,0,1,4,6,4,7,10,11,23.509775004326936,36.541209043760986,2.3333333333333335,85.26282110210897,4.736823394561609,0.012180403014586996,99.31787569389687
46,mbpp,test,46,claude_3_haiku_0_shot,"def find_max_number(digits):
    """"""
    Find the largest number that can be formed with the given digits.
    
    Args:
        digits (list): A list of digits.
    
    Returns:
        int: The largest number that can be formed with the given digits.
    """"""
    digits.sort(reverse=True)
    return int(''.join(map(str, digits)))",failed: name 'find_Max_Num' is not defined,True,False,,12,4,3,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
47,mbpp,test,47,claude_3_haiku_0_shot,"def check_opposite_signs(num1, num2):
    """"""
    Checks if the given two integers have opposite signs.

    Args:
        num1 (int): The first integer.
        num2 (int): The second integer.

    Returns:
        bool: True if the numbers have opposite signs, False otherwise.
    """"""
    return (num1 < 0 and num2 > 0) or (num1 > 0 and num2 < 0)",failed: name 'opposite_Signs' is not defined,True,False,,12,3,2,0,8,2,0,4,4,9,7,14,13,21,36.52932501298081,77.70923408096293,3.111111111111111,241.762061585218,13.431225643623222,0.025903078026987644,51.17211711057459
48,mbpp,test,48,claude_3_haiku_0_shot,"def nth_octagonal_number(n):
    """"""
    Calculates the nth octagonal number.
    
    Args:
        n (int): The position of the octagonal number to be calculated.
    
    Returns:
        int: The nth octagonal number.
    """"""
    return (3 * n * n) - (2 * n)",failed: name 'is_octagonal' is not defined,True,False,,11,3,2,0,7,2,0,1,2,6,4,8,8,12,17.509775004326936,36.0,1.3333333333333333,48.0,2.6666666666666665,0.012,58.95444763005946
49,mbpp,test,49,claude_3_haiku_0_shot,"def max_length_subsequence(arr):
    n = len(arr)
    dp = [1] * n
    
    for i in range(1, n):
        for j in range(i):
            if abs(arr[i] - arr[j]) <= 1:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)",failed: name 'max_len_sub' is not defined,True,False,,10,8,8,0,0,2,0,4,4,7,4,8,11,12,27.651484454403228,41.51317942364757,2.2857142857142856,94.88726725405158,5.27151484744731,0.01383772647454919,68.43145617991885
50,mbpp,test,50,claude_3_haiku_0_shot,"def count_substrings_with_digit_sum_equal_length(s):
    n = len(s)
    digit_sum_count = defaultdict(int)
    digit_sum_count[0] = 1
    total_count = 0
    current_sum = 0

    for i in range(n):
        current_sum += int(s[i])
        total_count += digit_sum_count[current_sum - i]
        digit_sum_count[current_sum] += 1

    return total_count",failed: name 'count_Substrings' is not defined,True,False,,13,11,11,0,0,2,0,2,2,7,4,8,9,12,21.651484454403228,38.03910001730775,1.1428571428571428,43.47325716263743,2.415180953479857,0.012679700005769252,65.94929869720794
51,mbpp,test,51,claude_3_haiku_0_shot,"def find_smallest(numbers):
    """"""
    Finds the smallest number in the given list of numbers.

    Args:
        numbers (list): A list of numbers.

    Returns:
        The smallest number in the list.
    """"""
    if not numbers:
        return None

    smallest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num

    return smallest",failed: name 'smallest_num' is not defined,True,False,,19,9,8,0,7,4,0,4,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,98.47814820094777
52,mbpp,test,52,claude_3_haiku_0_shot,"def max_difference(test_list):
    """"""
    Find the maximum difference between available pairs in the given tuple list.
    
    Args:
        test_list (list): A list of tuples, where each tuple contains two integers.
    
    Returns:
        int: The maximum difference between any pair of integers in the input list.
    """"""
    differences = [abs(b - a) for a, b in test_list]
    return max(differences)",passed,True,True,0.0001279733999998219,12,4,3,0,7,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,81.16751561438626
53,mbpp,test,53,claude_3_haiku_0_shot,"def sort_subject_marks(subject_marks):
    """"""
    Sorts a list of tuples containing subject names and marks in ascending order of marks.

    Args:
        subject_marks (list): A list of tuples, where each tuple contains a subject name and its corresponding marks.

    Returns:
        list: The sorted list of tuples.
    """"""
    return sorted(subject_marks, key=lambda x: x[1])",failed: name 'subject_marks' is not defined,True,False,,11,4,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
54,mbpp,test,54,claude_3_haiku_0_shot,"def recursive_list_sum(data_list):
    if not data_list:
        return 0
    
    total = 0
    for element in data_list:
        if isinstance(element, list):
            total += recursive_list_sum(element)
        else:
            total += element
    
    return total",passed,True,True,5.719029999985044e-05,12,10,10,0,0,2,0,4,2,4,3,5,6,8,10.0,20.67970000576925,1.25,25.84962500721156,1.43609027817842,0.006893233335256416,68.43656623957125
55,mbpp,test,55,claude_3_haiku_0_shot,"def count_positive_numbers(numbers):
    """"""
    Counts the number of positive numbers in a given list.
    
    Args:
        numbers (list): A list of numbers.
    
    Returns:
        int: The count of positive numbers in the list.
    """"""
    positive_count = 0
    for number in numbers:
        if number > 0:
            positive_count += 1
    return positive_count",failed: name 'pos_count' is not defined,True,False,,15,7,6,0,7,2,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,95.79254141185018
56,mbpp,test,56,claude_3_haiku_0_shot,"def bell_number(n):
    """"""
    Calculates the Bell number for the given input n.
    
    Args:
        n (int): The input number for which the Bell number is to be calculated.
    
    Returns:
        int: The Bell number for the given input n.
    """"""
    bell = [[0] * (n + 1) for _ in range(n + 1)]
    bell[0][0] = 1

    for i in range(1, n + 1):
        bell[i][0] = bell[i - 1][i - 1]
        for j in range(1, i + 1):
            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]

    return bell[n][0]",passed,True,True,0.0002304401000000104,19,9,8,0,7,4,0,4,3,8,11,22,11,33,28.75488750216347,114.16124341503082,4.125,470.91512908700213,26.161951615944563,0.03805374780501027,91.52725031178369
57,mbpp,test,57,claude_3_haiku_0_shot,"def is_monotonic(arr):
    """"""
    Checks if the given array is monotonic (non-decreasing or non-increasing).
    
    Args:
        arr (list): The input array to be checked.
    
    Returns:
        bool: True if the array is monotonic, False otherwise.
    """"""
    is_non_decreasing = all(arr[i] <= arr[i+1] for i in range(len(arr)-1))
    is_non_increasing = all(arr[i] >= arr[i+1] for i in range(len(arr)-1))
    return is_non_decreasing or is_non_increasing",failed: name 'is_Monotonic' is not defined,True,False,,13,5,4,0,7,2,0,4,5,10,7,14,15,21,44.82892142331043,82.0447025077789,3.5,287.15645877722613,15.953136598734785,0.02734823416925963,82.21217756389261
58,mbpp,test,58,claude_3_haiku_0_shot,"def is_sublist(lst, sub_lst):
    if not sub_lst:
        return True
    if sub_lst == lst:
        return True
    if len(sub_lst) > len(lst):
        return False

    for i in range(len(lst) - len(sub_lst) + 1):
        if lst[i] == sub_lst[0] and lst[i:i+len(sub_lst)] == sub_lst:
            return True

    return False",passed,True,True,5.9704366666816595e-05,13,11,11,0,0,2,0,7,6,15,9,17,21,26,74.11313393845472,114.20025299224778,3.4,388.28086017364245,21.571158898535693,0.03806675099741593,61.93376509668894
59,mbpp,test,59,claude_3_haiku_0_shot,"def are_tuples_equal_length(tuples):
    """"""
    Checks if all tuples in the given list have the same length.
    
    Args:
        tuples (list): A list of tuples.
        
    Returns:
        str: A message indicating whether all tuples have the same length or not.
    """"""
    expected_length = len(tuples[0]) if tuples else 0
    for tup in tuples:
        if len(tup) != expected_length:
            return ""All tuples do not have the same length""
    return ""All tuples have the same length""",failed: name 'get_equal' is not defined,True,False,,15,7,6,0,7,2,0,4,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,99.25332892961319
60,mbpp,test,60,claude_3_haiku_0_shot,"def comb_sort(nums):
    shrink_factor = 1.25
    gap = len(nums)
    swapped = True

    while gap > 1 or swapped:
        gap = max(1, int(gap / shrink_factor))
        swapped = False
        for i in range(len(nums) - gap):
            if nums[i] > nums[i + gap]:
                nums[i], nums[i + gap] = nums[i + gap], nums[i]
                swapped = True

    return nums",passed,True,True,5.2149333333299336e-05,14,12,12,0,0,2,0,5,5,9,8,16,14,24,40.13896548741762,91.37651812938249,4.444444444444445,406.1178583528111,22.56210324182284,0.03045883937646083,62.056474798805915
61,mbpp,test,61,claude_3_haiku_0_shot,"def is_difference_of_squares(n):
    """"""
    Checks if a given number can be represented as the difference of two squares.
    
    Args:
        n (int): The number to be checked.
    
    Returns:
        bool: True if the number can be represented as the difference of two squares, False otherwise.
    """"""
    if n % 4 == 2:
        return False
    else:
        return True",failed: name 'dif_Square' is not defined,True,False,,14,6,5,0,7,2,0,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,93.02920003266628
62,mbpp,test,62,claude_3_haiku_0_shot,"import re

def split_with_multiple_delimiters(text):
    """"""
    Split the given text using multiple delimiters.
    
    Args:
        text (str): The input text to be split.
    
    Returns:
        list: A list of substrings obtained by splitting the input text.
    """"""
    delimiters = r'; |, |\*|\n'
    return re.split(delimiters, text)",failed: name 'multiple_split' is not defined,True,False,,14,5,4,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
63,mbpp,test,63,claude_3_haiku_0_shot,"def is_same_patterns(colors, patterns):
    if len(colors) != len(patterns):
        return False

    pattern_to_color = {}
    unique_patterns = set()
    unique_colors = set()

    for i, pattern in enumerate(patterns):
        unique_patterns.add(pattern)
        unique_colors.add(colors[i])

        if pattern not in pattern_to_color:
            pattern_to_color[pattern] = []
        pattern_to_color[pattern].append(colors[i])

    if len(unique_patterns) != len(unique_colors):
        return False

    for color_sequence in pattern_to_color.values():
        if len(set(color_sequence)) != 1:
            return False

    return True",failed: name 'is_samepatterns' is not defined,True,False,,24,18,18,0,0,6,0,7,2,8,4,8,10,12,26.0,39.863137138648355,1.0,39.863137138648355,2.2146187299249087,0.013287712379549451,60.46878774319913
64,mbpp,test,64,claude_3_haiku_0_shot,"def find_tuples_divisible_by_k(tuples, k):
    """"""
    Find tuples from the given list of tuples where all elements are divisible by k.
    
    Args:
        tuples (list): A list of tuples.
        k (int): The divisor.
        
    Returns:
        list: A list of tuples where all elements are divisible by k.
    """"""
    return [t for t in tuples if all(x % k == 0 for x in t)]",failed: name 'find_tuples' is not defined,True,False,,12,3,2,0,8,2,0,4,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,56.07259596250222
65,mbpp,test,65,claude_3_haiku_0_shot,"def count_squares(length, width):
    """"""
    Calculates the number of squares in a rectangle.

    Args:
        length (int): The length of the rectangle.
        width (int): The width of the rectangle.

    Returns:
        int: The number of squares in the rectangle.
    """"""
    if width < length:
        length, width = width, length

    return int((length * (length + 1) * (2 * length + 1) // 6) + (width - length) * length * (length + 1) // 2)",failed: name 'count_Squares' is not defined,True,False,,15,5,4,0,8,3,0,2,5,16,13,26,21,39,75.60964047443682,171.30037948837168,4.0625,695.9077916715099,38.661543981750555,0.05710012649612389,74.9733974919844
66,mbpp,test,66,claude_3_haiku_0_shot,"def find_digit_diff(number):
    even_sum = 0
    odd_sum = 0

    while number > 0:
        digit = number % 10
        if digit % 2 == 0:
            even_sum += digit
        else:
            odd_sum += digit
        number //= 10

    return abs(even_sum - odd_sum)",failed: name 'is_Diff' is not defined,True,False,,13,11,11,0,0,2,0,3,6,8,8,16,14,24,39.50977500432694,91.37651812938249,6.0,548.259108776295,30.45883937646083,0.03045883937646083,63.14979895508195
67,mbpp,test,67,claude_3_haiku_0_shot,"def count_with_odd_set_bits(n):
    """"""
    Counts the number of integers with an odd number of set bits up to the given number n.
    """"""
    if n % 2 != 0:
        return (n + 1) // 2
    
    set_bits_count = bin(n).count('1')
    if set_bits_count % 2 != 0:
        return n // 2 + 1
    else:
        return n // 2",failed: name 'count_With_Odd_SetBits' is not defined,True,False,,12,9,8,0,3,1,0,3,4,9,9,18,13,27,36.52932501298081,99.91187238980949,4.0,399.64748955923795,22.202638308846552,0.03330395746326983,92.69657306273525
68,mbpp,test,68,claude_3_haiku_0_shot,"def has_odd_length_word(text):
    words = text.split()
    for word in words:
        if len(word) % 2 != 0:
            return True
    return False",failed: name 'word_len' is not defined,True,False,,6,6,6,0,0,0,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,74.28529248621352
69,mbpp,test,69,claude_3_haiku_0_shot,"def get_tetrahedral_number(n: int) -> float:
    """"""
    Calculates the nth tetrahedral number.

    Args:
        n (int): The position of the tetrahedral number to calculate.

    Returns:
        float: The nth tetrahedral number.
    """"""
    return (n * (n + 1) * (n + 2)) / 6",failed: name 'tetrahedral_number' is not defined,True,False,,11,3,2,0,7,2,0,1,3,8,5,10,11,15,28.75488750216347,51.89147427955947,1.875,97.296514274174,5.405361904120777,0.01729715809318649,57.84257339380942
70,mbpp,test,70,claude_3_haiku_0_shot,"def zip_tuples(test_tup1, test_tup2):
    return list(zip(test_tup1, test_tup2 * (len(test_tup1) // len(test_tup2) + (len(test_tup1) % len(test_tup2) > 0))))",passed,True,True,0.00014237670000056825,2,2,2,0,0,0,0,1,5,10,5,10,15,15,44.82892142331043,58.60335893412778,2.5,146.50839733531944,8.139355407517748,0.019534452978042596,80.91982292328977
71,mbpp,test,71,claude_3_haiku_0_shot,"def calculate_sphere_volume(radius):
    """"""
    Calculates the volume of a sphere given its radius.

    Args:
        radius (float): The radius of the sphere.

    Returns:
        float: The volume of the sphere.
    """"""
    return (4/3) * math.pi * radius ** 3",failed: name 'volume_sphere' is not defined,True,False,,11,3,2,0,7,2,0,1,3,7,4,8,10,12,24.406371956566698,39.863137138648355,1.7142857142857142,68.33680652339717,3.796489251299843,0.013287712379549451,58.64447569950984
72,mbpp,test,72,claude_3_haiku_0_shot,"def get_char(string):
    total = sum(ord(char) - ord('a') + 1 for char in string)
    return 'z' if total % 26 == 0 else chr(ord('a') + (total - 1) % 26)",failed: name 'get_Char' is not defined,True,False,,3,3,3,0,0,0,0,3,4,11,7,14,15,21,46.053747805010275,82.0447025077789,2.5454545454545454,208.84106092889172,11.602281162716206,0.02734823416925963,75.78637825558066
73,mbpp,test,73,claude_3_haiku_0_shot,"def newman_conway(n):
    if n <= 2:
        return 1
    return newman_conway(newman_conway(n - 1)) + newman_conway(n - newman_conway(n - 1))",failed: name 'sequence' is not defined,True,False,,4,4,4,0,0,0,0,2,3,6,5,10,9,15,20.264662506490406,47.548875021634686,2.5,118.87218755408671,6.604010419671484,0.01584962500721156,74.85432109624742
74,mbpp,test,74,claude_3_haiku_0_shot,"def calculate_sphere_surface_area(radius):
    """"""
    Calculates the surface area of a sphere.

    Args:
        radius (float): The radius of the sphere.

    Returns:
        float: The surface area of the sphere.
    """"""
    return 4 * math.pi * radius ** 2",failed: name 'surfacearea_sphere' is not defined,True,False,,11,3,2,0,7,2,0,1,2,6,3,6,8,9,17.509775004326936,27.0,1.0,27.0,1.5,0.009,59.82927030652102
75,mbpp,test,75,claude_3_haiku_0_shot,"def get_nth_centered_hexagonal_number(n):
    """"""
    Calculates the nth centered hexagonal number.
    
    Args:
        n (int): The position of the centered hexagonal number to calculate.
    
    Returns:
        int: The nth centered hexagonal number.
    """"""
    if n < 1:
        raise ValueError(""n must be a positive integer"")
    return 3 * n * (n - 1) + 1",failed: name 'centered_hexagonal_number' is not defined,True,False,,13,5,4,0,7,2,0,2,4,6,5,10,10,15,23.509775004326936,49.82892142331044,3.3333333333333335,166.09640474436813,9.227578041353786,0.016609640474436815,83.99760280277457
76,mbpp,test,76,claude_3_haiku_0_shot,"def merge_dictionaries_three(dict1, dict2, dict3):
    return {**dict1, **dict2, **dict3}",failed: ,True,False,,2,2,2,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
77,mbpp,test,77,claude_3_haiku_0_shot,"def get_element_frequency(elements):
    """"""
    Returns the frequency of each element in the given list.
    """"""
    return collections.Counter(elements)",failed: name 'freq_count' is not defined,True,False,,5,3,2,0,3,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
78,mbpp,test,78,claude_3_haiku_0_shot,"def find_closest_smaller(n):
    if n > 0:
        return n - 1
    else:
        return None",failed: name 'closest_num' is not defined,True,False,,5,5,5,0,0,0,0,2,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,76.47338445371699
79,mbpp,test,79,claude_3_haiku_0_shot,"def find_longest_word_length(word_list):
    """"""
    Finds the length of the longest word in the given list of words.

    Args:
        word_list (list): A list of strings representing words.

    Returns:
        int: The length of the longest word in the list.
    """"""
    longest_length = 0
    for word in word_list:
        word_length = len(word)
        if word_length > longest_length:
            longest_length = word_length
    return longest_length",failed: name 'len_log' is not defined,True,False,,16,8,7,0,7,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
80,mbpp,test,80,claude_3_haiku_0_shot,"def contains_substring(strings, substring):
    """"""
    Checks if a given substring is present in any of the strings in the provided list.

    Args:
        strings (list[str]): A list of string values.
        substring (str): The substring to search for.

    Returns:
        bool: True if the substring is found in any of the strings, False otherwise.
    """"""
    return any(substring in s for s in strings)",failed: name 'find_substring' is not defined,True,False,,12,3,2,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.93689225219502
81,mbpp,test,81,claude_3_haiku_0_shot,"def is_undulating(number: str) -> bool:
    """"""
    Check if the given number is undulating.
    
    An undulating number is a number where the digits alternate between increasing and decreasing.
    
    Args:
        number (str): The number to check.
    
    Returns:
        bool: True if the number is undulating, False otherwise.
    """"""
    if len(number) <= 2:
        return False
    
    for i in range(2, len(number)):
        if number[i - 2] == number[i]:
            return False
    
    return True",failed: ,True,False,,20,8,7,0,8,5,0,4,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,93.1165182443189
82,mbpp,test,82,claude_3_haiku_0_shot,"def power(base, exponent):
    """"""
    Calculates the value of 'base' raised to the power of 'exponent'.

    Args:
        base (float): The base number.
        exponent (int): The exponent.

    Returns:
        float: The result of 'base' raised to the power of 'exponent'.
    """"""
    if exponent == 0:
        return 1
    elif base == 0:
        return 0
    elif exponent == 1:
        return base
    else:
        return base * power(base, exponent - 1)",passed,True,True,3.527150000005956e-05,19,10,9,0,8,2,0,4,3,5,5,10,8,15,16.36452797660028,45.0,3.0,135.0,7.5,0.015,93.19590951765781
83,mbpp,test,83,claude_3_haiku_0_shot,"def find_index_of_minimum_value(records):
    """"""
    Extracts the index of the minimum value record from the given list of tuples.
    
    Args:
        records (list): A list of tuples, where each tuple represents a record.
    
    Returns:
        int: The index of the record with the minimum value.
    """"""
    return min(records, key=lambda x: x[1])[0]",failed: name 'index_minimum' is not defined,True,False,,11,4,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
84,mbpp,test,84,claude_3_haiku_0_shot,"def find_minimum_sublist_length(lst):
    """"""
    Find the minimum length of sublist in the given list.
    
    Args:
        lst (list): A list of sublists.
        
    Returns:
        int: The minimum length of the sublists.
    """"""
    return min(len(sublist) for sublist in lst)",failed: name 'Find_Min_Length' is not defined,True,False,,11,3,2,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
85,mbpp,test,85,claude_3_haiku_0_shot,"def count_divisors(n):
    """"""
    Finds the number of divisors of a given integer.
    
    Args:
        n (int): The integer to find the divisors for.
        
    Returns:
        int: The number of divisors of the given integer.
    """"""
    return sum(1 for i in range(1, n+1) if n % i == 0)",failed: name 'divisor' is not defined,True,False,,11,3,2,0,7,2,0,3,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,59.560264458567794
86,mbpp,test,86,claude_3_haiku_0_shot,"def frequency_count(nested_list):
    """"""
    Finds the frequency count of elements in a nested list.

    Args:
        nested_list (list): A list of lists.

    Returns:
        dict: A dictionary where the keys are the unique elements in the nested list
              and the values are the frequency counts of those elements.
    """"""
    frequency_dict = {}
    for item in [element for sublist in nested_list for element in sublist]:
        frequency_dict[item] = frequency_dict.get(item, 0) + 1
    return frequency_dict",failed: name 'frequency_lists' is not defined,True,False,,15,6,5,0,8,2,0,4,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,92.28989622305845
87,mbpp,test,87,claude_3_haiku_0_shot,"def calculate_average_product(numbers):
    """"""
    Calculates the average product of all numbers in the given list.
    
    Args:
        numbers (list): A list of numbers.
    
    Returns:
        float: The average product of all numbers in the list.
    """"""
    if not numbers:
        return 0.0
    
    product = 1
    for num in numbers:
        product *= num
    
    return product / len(numbers)",failed: name 'multiply_num' is not defined,True,False,,18,8,7,0,7,4,0,3,3,4,3,5,7,8,12.75488750216347,22.458839376460833,1.875,42.11032383086406,2.3394624350480036,0.007486279792153611,96.07639868121721
88,mbpp,test,88,claude_3_haiku_0_shot,"def decimal_to_binary(decimal_number):
    """"""
    Converts a decimal number to its binary equivalent.

    Args:
        decimal_number (int): The decimal number to be converted.

    Returns:
        str: The binary equivalent of the input decimal number.
    """"""
    return format(decimal_number, 'b')",passed,True,True,2.688523333442087e-05,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
89,mbpp,test,89,claude_3_haiku_0_shot,"def next_smallest_palindrome(num):
    num_str = str(num)
    length = len(num_str)

    # Handle single-digit numbers
    if length == 1:
        return num + 1

    # Handle multi-digit numbers
    mid = length // 2
    left = num_str[:mid]
    right = num_str[mid:][::-1] if length % 2 == 0 else num_str[mid+1:][::-1]

    # Find the next palindrome
    new_left = left
    new_right = right
    carry = 0
    for i in range(len(right) - 1, -1, -1):
        digit_sum = int(right[i]) + int(left[i]) + carry
        carry = digit_sum // 10
        new_right = str(digit_sum % 10) + new_right
        new_left = left[:i] + str(digit_sum % 10) + left[i+1:]

    if carry:
        new_left = str(carry) + new_left

    return int(new_left + new_right)",failed: ,True,False,,27,22,19,3,0,5,3,5,6,23,22,40,29,62,119.55169999363824,301.1948216979095,5.217391304347826,1571.451243641267,87.30284686895928,0.10039827389930317,74.13245126544678
90,mbpp,test,90,claude_3_haiku_0_shot,"def find_kth_element(arr, k):
    """"""
    Find the kth element in the given array.
    
    Args:
        arr (list): The input array.
        k (int): The index of the element to find (1-indexed).
    
    Returns:
        The kth element in the array.
    """"""
    arr.sort()
    return arr[k - 1]",failed: name 'kth_element' is not defined,True,False,,13,4,3,0,8,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,74.98090723848824
91,mbpp,test,91,claude_3_haiku_0_shot,"def snake_to_camel(snake_case_string):
    """"""
    Converts a snake case string to a camel case string.
    
    Args:
        snake_case_string (str): The input snake case string.
    
    Returns:
        str: The converted camel case string.
    """"""
    words = snake_case_string.split('_')
    camel_case_words = [words[0]] + [word.capitalize() for word in words[1:]]
    return ''.join(camel_case_words)",failed: ,True,False,,13,6,4,0,7,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,89.41478873042239
92,mbpp,test,92,claude_3_haiku_0_shot,"def eulerian_number(n, m):
    """"""
    Calculates the Eulerian number a(n, m).

    Args:
        n (int): The first parameter of the Eulerian number.
        m (int): The second parameter of the Eulerian number.

    Returns:
        int: The Eulerian number a(n, m).
    """"""
    if m >= n or n == 0:
        return 0
    if m == 0:
        return 1
    return (n - m) * eulerian_number(n - 1, m - 1) + (m + 1) * eulerian_number(n - 1, m)",failed: name 'eulerian_num' is not defined,True,False,,16,7,6,0,8,2,0,4,6,12,12,24,18,36,58.52932501298082,150.11730005192322,6.0,900.7038003115393,50.03910001730774,0.05003910001730774,85.69639982551732
93,mbpp,test,93,claude_3_haiku_0_shot,"def sort_sublists(input_list):
    """"""
    Sorts each sublist of strings in the given list of lists using a lambda function.
    
    Args:
        input_list (list): A list of lists, where each sublist contains strings.
    
    Returns:
        list: A new list where each sublist is sorted based on the first character of each string.
    """"""
    return [sorted(sublist, key=lambda item: item[0]) for sublist in input_list]",passed,True,True,0.00014666489999986727,11,4,2,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
94,mbpp,test,94,claude_3_haiku_0_shot,"def count_true_booleans(boolean_list):
    """"""
    Counts the number of True values in the given list of booleans.

    Args:
        boolean_list (list): A list of boolean values.

    Returns:
        int: The count of True values in the list.
    """"""
    return sum(1 for value in boolean_list if value)",failed: name 'count' is not defined,True,False,,11,3,2,0,7,2,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
95,mbpp,test,95,claude_3_haiku_0_shot,"def add_lists(test_list, test_tup):
    """"""
    Adds the given list to the given tuple and returns the result as a tuple.

    Args:
        test_list (list): The list to be added to the tuple.
        test_tup (tuple): The tuple to which the list will be added.

    Returns:
        tuple: The result of adding the list to the tuple.
    """"""
    return tuple(list(test_tup) + test_list)",passed,True,True,7.15362333342758e-05,12,3,2,0,8,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,60.07139517617164
96,mbpp,test,96,claude_3_haiku_0_shot,"def count_hexadecimal(start, end):
    count = 0
    for num in range(start, end + 1):
        if 10 <= num <= 15 or any(int(digit, 16) >= 10 for digit in hex(num)[2:]):
            count += 1
    return count",failed: name 'count_Hexadecimal' is not defined,True,False,,6,6,6,0,0,0,0,5,4,9,6,11,13,17,36.52932501298081,62.907475208398566,2.4444444444444446,153.7738282871965,8.542990460399805,0.02096915840279952,69.75838514719202
97,mbpp,test,97,claude_3_haiku_0_shot,"from typing import List, Iterator

def merge_sorted_iterators(iterators: List[Iterator[int]]) -> Iterator[int]:
    """"""
    Merge multiple sorted iterators into a single sorted iterator using a heap queue.
    
    Args:
        iterators (List[Iterator[int]]): A list of sorted iterators.
        
    Returns:
        Iterator[int]: A single sorted iterator containing all the elements from the input iterators.
    """"""
    heap = []
    for i, iterator in enumerate(iterators):
        try:
            value = next(iterator)
            heapq.heappush(heap, (value, i, iterator))
        except StopIteration:
            pass
    
    while heap:
        value, i, iterator = heapq.heappop(heap)
        yield value
        try:
            next_value = next(iterator)
            heapq.heappush(heap, (next_value, i, iterator))
        except StopIteration:
            pass",failed: name 'merge_sorted_list' is not defined,True,False,,28,18,17,0,7,4,0,5,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
98,mbpp,test,98,claude_3_haiku_0_shot,"def count_rotations_with_odd_ones(binary_string):
    n = len(binary_string)
    ones_count = sum(1 for char in binary_string if char == '1')
    if ones_count % 2 == 0:
        return 0
    return n",failed: name 'odd_Equivalent' is not defined,True,False,,6,6,6,0,0,0,0,4,2,6,3,6,8,9,17.509775004326936,27.0,1.0,27.0,1.5,0.009,72.4649970147854
99,mbpp,test,99,claude_3_haiku_0_shot,"def extract_missing(test_list, start_val, end_val):
    missing_ranges = []
    current_val = start_val

    for sub_range in test_list:
        if sub_range[0] > current_val:
            missing_ranges.append((current_val, sub_range[0]))
        current_val = sub_range[1]

    if current_val < end_val:
        missing_ranges.append((current_val, end_val))

    return missing_ranges",failed: ,True,False,,13,10,10,0,0,3,0,4,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,69.63772110572219
100,mbpp,test,100,claude_3_haiku_0_shot,"def find_common_elements(nested_lists):
    """"""
    Find the common elements in a list of nested lists.

    Args:
        nested_lists (list): A list of nested lists.

    Returns:
        list: A list of common elements.
    """"""
    if not nested_lists:
        return []

    common_elements = set(nested_lists[0])
    for lst in nested_lists[1:]:
        common_elements.intersection_update(lst)

    return list(common_elements)",failed: name 'common_in_nested_lists' is not defined,True,False,,18,8,7,0,7,4,0,3,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,100.0
101,mbpp,test,101,claude_3_haiku_0_shot,"def calculate_cylinder_perimeter(diameter, height):
    """"""
    Calculates the perimeter of a cylinder.

    Args:
        diameter (float): The diameter of the cylinder.
        height (float): The height of the cylinder.

    Returns:
        float: The perimeter of the cylinder.
    """"""
    return 2 * (diameter + height)",failed: name 'perimeter' is not defined,True,False,,12,3,2,0,8,2,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,56.47610473443205
102,mbpp,test,102,claude_3_haiku_0_shot,"def is_integer(text):
    text = text.strip()
    if not text:
        return None
    
    if text.isdigit():
        return True
    
    if text[0] in ('+', '-') and text[1:].isdigit():
        return True
    
    return False",failed: name 'check_integer' is not defined,True,False,,12,9,9,0,0,3,0,5,3,5,3,5,8,8,16.36452797660028,24.0,1.5,36.0,2.0,0.008,68.84741633294965
103,mbpp,test,103,claude_3_haiku_0_shot,"from collections import Counter

def assign_frequency(tuples):
    """"""
    Assigns frequency to each tuple in the given tuple list.
    
    Args:
        tuples (list): A list of tuples.
    
    Returns:
        list: A list of tuples, where each tuple contains the original tuple and its frequency.
    """"""
    frequencies = Counter(tuples)
    result = [(tup, freq) for tup, freq in frequencies.items()]
    return result",failed: name 'assign_freq' is not defined,True,False,,15,6,5,0,7,3,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
104,mbpp,test,104,claude_3_haiku_0_shot,"def is_all_dicts_empty(dicts_list):
    return all(not bool(d) for d in dicts_list)",failed: name 'empty_dit' is not defined,True,False,,2,2,2,0,0,0,0,2,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,91.05652066433751
105,mbpp,test,105,claude_3_haiku_0_shot,"def convert_tuple_to_int(tuple_of_integers):
    """"""
    Converts a tuple of positive integers into a single integer.

    Args:
        tuple_of_integers (tuple): A tuple of positive integers.

    Returns:
        int: The integer formed by concatenating the digits in the tuple.
    """"""
    return int(''.join(map(str, tuple_of_integers)))",failed: name 'tuple_to_int' is not defined,True,False,,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
106,mbpp,test,106,claude_3_haiku_0_shot,"def list_to_float(test_list):
    result = []
    for item in test_list:
        converted_item = []
        for element in item:
            if element.isalpha():
                converted_item.append(element)
            else:
                converted_item.append(float(element))
        result.append(tuple(converted_item))
    return str(result)",passed,True,True,9.773270000058195e-05,11,11,11,0,0,0,0,4,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
107,mbpp,test,107,claude_3_haiku_0_shot,"def convert_string_to_list(input_string: str) -> list:
    """"""
    Converts a given string to a list of strings.

    Args:
        input_string (str): The input string to be converted.

    Returns:
        list: A list of strings, where each element is a word from the input string.
    """"""
    return input_string.split()",failed: name 'string_to_list' is not defined,True,False,,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
108,mbpp,test,108,claude_3_haiku_0_shot,"def find_unique_element(arr):
    """"""
    Find the element that appears only once in a sorted array.
    
    Args:
        arr (list): A sorted list of integers.
    
    Returns:
        int: The element that appears only once in the array.
    """"""
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = left + (right - left) // 2
        
        if mid == 0 or mid == len(arr) - 1:
            return arr[mid]
        
        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:
            return arr[mid]
        
        if arr[mid] == arr[mid - 1]:
            left = mid + 1
        else:
            right = mid - 1
    
    return -1",failed: name 'search' is not defined,True,False,,27,14,13,0,7,7,0,7,9,21,19,37,30,56,120.76799089133479,274.78587335407707,7.928571428571429,2178.6594244501825,121.03663469167681,0.0915952911180257,86.18178793154637
109,mbpp,test,109,claude_3_haiku_0_shot,"def find_max_product(tuples):
    """"""
    Find the maximum product from the pairs of tuples in a given list.
    
    Args:
        tuples (list): A list of tuples.
    
    Returns:
        int: The maximum product from the pairs of tuples.
    """"""
    products = [abs(x * y) for x, y in tuples]
    return max(products)",failed: name 'max_product_tuple' is not defined,True,False,,12,4,3,0,7,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,81.16751561438626
110,mbpp,test,110,claude_3_haiku_0_shot,"def find_triplet(arr, target_sum):
    """"""
    Find a triplet in the given array that sums up to the target sum.
    
    Args:
        arr (list): The input array.
        target_sum (int): The target sum.
    
    Returns:
        bool: True if a triplet is found, False otherwise.
    """"""
    arr.sort()
    n = len(arr)
    
    for i in range(n - 2):
        if i > 0 and arr[i] == arr[i - 1]:
            continue
        left = i + 1
        right = n - 1
        
        while left < right:
            current_sum = arr[i] + arr[left] + arr[right]
            if current_sum == target_sum:
                return True
            elif current_sum < target_sum:
                left += 1
            else:
                right -= 1
    
    return False",failed: name 'check_triplet' is not defined,True,False,,30,18,17,0,8,5,0,7,6,17,14,28,23,42,84.99664330558272,189.98960215439456,4.9411764705882355,938.7721518217144,52.15400843453969,0.06332986738479819,84.63453048614555
111,mbpp,test,111,claude_3_haiku_0_shot,"MAX = 3000

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def smart_number(n):
    primes = [0] * MAX
    result = []
    for i in range(2, MAX):
        if primes[i] == 0:
            if is_prime(i) and is_prime(i + 2) and is_prime(i + 4):
                result.append(i)
                primes[i] = 1
                primes[i + 2] = 1
                primes[i + 4] = 1
    return result[n - 1]",failed: name 'smartNumber' is not defined,True,False,,21,19,19,0,0,2,0,4,8,20,13,27,28,40,110.43856189774725,192.29419688230416,5.4,1038.3886631644425,57.68825906469125,0.06409806562743472,54.90242740874752
112,mbpp,test,112,claude_3_haiku_0_shot,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int) or limit < 1:
        return ""Input is not a positive integer!""

    amicables = set()
    for num in range(2, limit + 1):
        if num in amicables:
            continue

        divisors_sum = sum(divisor for divisor in range(1, num) if num % divisor == 0)
        if divisors_sum != num and sum(divisor for divisor in range(1, divisors_sum) if divisors_sum % divisor == 0) == num:
            amicables.add(num)
            amicables.add(divisors_sum)

    return sum(amicables)",passed,True,True,4.758375171933333,15,12,12,0,0,3,0,11,9,15,12,23,24,35,87.1326839471086,160.4736875252405,6.9,1107.2684439241596,61.5149135513422,0.05349122917508017,59.53698031190102
113,mbpp,test,113,claude_3_haiku_0_shot,"def get_angle_of_complex_number(real, imaginary):
    """"""
    Calculates the angle of a complex number.
    
    Args:
        real (float): The real part of the complex number.
        imaginary (float): The imaginary part of the complex number.
    
    Returns:
        float: The angle of the complex number in radians.
    """"""
    complex_number = complex(real, imaginary)
    angle = cmath.phase(complex_number)
    return angle",failed: name 'angle_complex' is not defined,True,False,,14,5,4,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
114,mbpp,test,114,claude_3_haiku_0_shot,"def find_max_diff_0_1(binary_string):
    n = len(binary_string)
    max_diff = 0
    current_diff = 0
    
    for char in binary_string:
        if char == '0':
            current_diff += 1
        else:
            current_diff -= 1
        
        max_diff = max(max_diff, current_diff)
        
        if current_diff < 0:
            current_diff = 0
    
    return max_diff",failed: name 'find_length' is not defined,True,False,,17,13,13,0,0,4,0,4,4,5,4,8,9,12,19.60964047443681,38.03910001730775,3.2,121.72512005538482,6.762506669743601,0.012679700005769252,64.09767520507738
115,mbpp,test,115,claude_3_haiku_0_shot,"def find_common_divisors_sum(a, b):
    divisors_sum = 0
    for i in range(1, min(a, b) + 1):
        if a % i == 0 and b % i == 0:
            divisors_sum += i
    return divisors_sum",failed: 'int' object is not iterable,True,False,,6,6,6,0,0,0,0,4,4,11,7,14,15,21,46.053747805010275,82.0447025077789,2.5454545454545454,208.84106092889172,11.602281162716206,0.02734823416925963,69.08521783156247
116,mbpp,test,116,claude_3_haiku_0_shot,"def multiply_int(x, y):
    """"""
    Multiply two integers without using the * operator.
    
    Args:
        x (int): The first integer to multiply.
        y (int): The second integer to multiply.
    
    Returns:
        int: The product of the two input integers.
    """"""
    if y < 0:
        return -multiply_int(x, abs(y))
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)",passed,True,True,3.1781099999979766e-05,19,10,9,0,8,2,0,4,5,6,6,11,11,17,27.11941547876375,58.81033751683406,4.583333333333333,269.54738028548945,14.97485446030497,0.019603445838944685,92.38198740039783
117,mbpp,test,117,claude_3_haiku_0_shot,"def get_long_words(words, min_length):
    return [word for word in words if len(word) > min_length]",failed: name 'long_words' is not defined,True,False,,2,2,2,0,0,0,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.28848882059837
118,mbpp,test,118,claude_3_haiku_0_shot,"def is_magic_square(matrix):
    n = len(matrix)
    target_sum = sum(matrix[0])

    # Check rows
    for row in matrix:
        if sum(row) != target_sum:
            return False

    # Check columns
    for i in range(n):
        if sum(row[i] for row in matrix) != target_sum:
            return False

    # Check diagonals
    if sum(matrix[i][i] for i in range(n)) != target_sum:
        return False
    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:
        return False

    return True",failed: name 'magic_square_test' is not defined,True,False,,21,14,14,3,0,4,3,10,2,9,6,12,11,18,30.529325012980813,62.26976913547136,1.3333333333333333,83.02635884729514,4.612575491516397,0.020756589711823786,85.02913410079852
119,mbpp,test,119,claude_3_haiku_0_shot,"def find_max_frequency_item(nums):
    """"""
    Find the item with maximum frequency in a given list.
    
    Args:
        nums (list): The input list.
    
    Returns:
        tuple: A tuple containing the item with maximum frequency and its count.
    """"""
    freq_dict = {}
    for num in nums:
        if num in freq_dict:
            freq_dict[num] += 1
        else:
            freq_dict[num] = 1
    
    max_freq_item, max_count = max(freq_dict.items(), key=lambda x: x[1])
    return max_freq_item, max_count",failed: name 'max_occurrences' is not defined,True,False,,19,11,9,0,7,3,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,96.82532535150919
120,mbpp,test,120,claude_3_haiku_0_shot,"def reverse_vowels(string):
    vowels = [char for char in string if char.lower() in 'aeiou']
    result = list(string)
    i = len(vowels) - 1
    for j, char in enumerate(result):
        if char.lower() in 'aeiou':
            result[j] = vowels[i]
            i -= 1
    return ''.join(result)",passed,True,True,3.045840000102847e-05,9,9,9,0,0,0,0,5,2,6,4,8,8,12,17.509775004326936,36.0,1.3333333333333333,48.0,2.6666666666666665,0.012,67.61442302174355
121,mbpp,test,121,claude_3_haiku_0_shot,"def convert_tuple_to_string(tuple_input):
    return ''.join(tuple_input)",failed: name 'tup_string' is not defined,True,False,,2,2,2,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
122,mbpp,test,122,claude_3_haiku_0_shot,"def sum_negative_numbers(numbers):
    return sum(filter(lambda x: x < 0, numbers))",failed: name 'sum_negativenum' is not defined,True,False,,2,3,2,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,84.71624627594792
123,mbpp,test,123,claude_3_haiku_0_shot,"def check_last(arr, n, p):
    total = sum(arr)
    if p == 1:
        return ""ODD"" if total % 2 == 0 else ""EVEN""
    return ""EVEN""",passed,True,True,4.423906666678098e-05,5,5,5,0,0,0,0,3,2,6,3,6,8,9,17.509775004326936,27.0,1.0,27.0,1.5,0.009,74.32675679259947
124,mbpp,test,124,claude_3_haiku_0_shot,"def get_nth_hexagonal_number(n):
    """"""
    Calculates the nth hexagonal number.

    Args:
        n (int): The position of the hexagonal number to calculate.

    Returns:
        int: The nth hexagonal number.
    """"""
    return n * (2 * n - 1)",failed: name 'hexagonal_num' is not defined,True,False,,11,3,2,0,7,2,0,1,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,60.03109586151661
125,mbpp,test,125,claude_3_haiku_0_shot,"def calculate_electricity_bill(units):
    """"""
    Calculates the electricity bill based on the given units.
    
    Args:
        units (int): The number of electricity units consumed.
    
    Returns:
        float: The total electricity bill.
    """"""
    rates = [
        (50, 2.60, 25),
        (100, 3.25, 35),
        (200, 5.26, 45),
        (float('inf'), 8.45, 75)
    ]
    
    total_bill = 0
    for threshold, rate, surcharge in rates:
        if units <= threshold:
            total_bill = units * rate + surcharge
            break
        else:
            total_bill += (min(threshold, units) - (threshold - 50)) * rate
            units -= threshold
    
    return total_bill",failed: name 'cal_electbill' is not defined,True,False,,27,12,16,0,7,4,0,3,4,11,8,16,15,24,46.053747805010275,93.76537429460444,2.909090909090909,272.7719979479402,15.153999885996676,0.03125512476486815,90.90249558071724
126,mbpp,test,126,claude_3_haiku_0_shot,"from array import array

def calculate_zero_ratio(numbers):
    total_count = len(numbers)
    zero_count = sum(1 for num in numbers if num == 0)
    return round(zero_count / total_count, 2)",failed: name 'zero_count' is not defined,True,False,,6,5,5,0,0,1,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,76.012549340051
127,mbpp,test,127,claude_3_haiku_0_shot,"def is_sum_of_powers_of_two(n):
    """"""
    Check if a given number can be represented as the sum of non-zero powers of 2.
    
    Args:
        n (int): The number to be checked.
    
    Returns:
        bool: True if the number can be represented as the sum of non-zero powers of 2, False otherwise.
    """"""
    if n < 1:
        return False
    
    while n % 2 == 0:
        n //= 2
    
    return n == 1",failed: name 'is_Sum_Of_Powers_Of_Two' is not defined,True,False,,17,7,6,0,7,4,0,3,4,5,5,10,9,15,19.60964047443681,47.548875021634686,4.0,190.19550008653874,10.566416671474375,0.01584962500721156,92.38581870530382
128,mbpp,test,128,claude_3_haiku_0_shot,"def calculate_circle_circumference(radius):
    """"""
    Calculates the circumference of a circle given its radius.
    
    Args:
        radius (float): The radius of the circle.
    
    Returns:
        float: The circumference of the circle.
    """"""
    pi = 3.14159
    circumference = 2 * pi * radius
    return circumference",failed: name 'circle_circumference' is not defined,True,False,,13,5,4,0,7,2,0,1,1,4,2,4,5,6,8.0,13.931568569324174,0.5,6.965784284662087,0.3869880158145604,0.004643856189774725,88.00759025618628
129,mbpp,test,129,claude_3_haiku_0_shot,"def extract_singly(test_list):
    result = []
    element_counts = {}

    for inner_tuple in test_list:
        for element in inner_tuple:
            element_counts[element] = element_counts.get(element, 0) + 1

    for element, count in element_counts.items():
        if count == 1:
            result.append(element)

    return result",failed: ,True,False,,13,10,10,0,0,3,0,5,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,69.50321818174558
130,mbpp,test,130,claude_3_haiku_0_shot,"def pancake_sort(arr):
    n = len(arr)
    for i in range(n, 0, -1):
        max_index = arr.index(i)
        
        # Bring the maximum element to the front
        arr[:max_index + 1] = reversed(arr[:max_index + 1])
        
        # Bring the maximum element to its correct position
        arr[:i] = reversed(arr[:i])
    return arr",failed: 5 is not in list,True,False,,11,9,7,2,0,2,2,2,2,2,3,5,4,8,4.0,16.0,2.5,40.0,2.2222222222222223,0.005333333333333333,96.64230116659803
131,mbpp,test,131,claude_3_haiku_0_shot,"def count_same_pairs(list1, list2, list3):
    """"""
    Count the number of elements that are the same across the three input lists.
    
    Args:
        list1 (list): The first input list.
        list2 (list): The second input list.
        list3 (list): The third input list.
    
    Returns:
        int: The number of elements that are the same across the three input lists.
    """"""
    return sum(1 for m, n, o in zip(list1, list2, list3) if m == n == o)",failed: name 'count_samepair' is not defined,True,False,,13,3,2,0,9,2,0,3,1,3,2,3,4,5,4.754887502163469,10.0,0.5,5.0,0.2777777777777778,0.0033333333333333335,54.40228206969426
132,mbpp,test,132,claude_3_haiku_0_shot,"def count_lists(input_data):
    """"""
    Counts the number of lists present in the given input.
    
    Args:
        input_data (tuple): The input data to be analyzed.
    
    Returns:
        int: The number of lists present in the input data.
    """"""
    if isinstance(input_data, list):
        return 1
    else:
        return sum(1 for element in input_data if isinstance(element, list))",failed: name 'find_lists' is not defined,True,False,,14,6,5,0,7,2,0,4,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
133,mbpp,test,133,claude_3_haiku_0_shot,"def sum_of_absolute_differences(arr):
    n = len(arr)
    total_sum = 0

    for i in range(n):
        for j in range(n):
            total_sum += abs(arr[i] - arr[j])

    return total_sum",failed: name 'sum_Pairs' is not defined,True,False,,9,7,7,0,0,2,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,72.82491762469213
134,mbpp,test,134,claude_3_haiku_0_shot,"def find_max_abs_diff(arr):
    """"""
    Find the maximum absolute difference between any two elements in the given array.
    
    Args:
        arr (list): The input array.
    
    Returns:
        int: The maximum absolute difference.
    """"""
    min_val = min(arr)
    max_val = max(arr)
    return max_val - min_val",failed: name 'max_Abs_Diff' is not defined,True,False,,13,5,4,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,91.27654850823647
135,mbpp,test,135,claude_3_haiku_0_shot,"def get_total_ascii_value(input_string):
    total_ascii_value = 0
    for char in input_string:
        total_ascii_value += ord(char)
    return total_ascii_value",failed: name 'ascii_value_string' is not defined,True,False,,5,5,5,0,0,0,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,79.7423427057672
136,mbpp,test,136,claude_3_haiku_0_shot,"def max_path_sum(triangle):
    """"""
    Find the maximum total path sum in the given triangle.
    
    Args:
        triangle (list[list[int]]): A list of lists representing the triangle.
    
    Returns:
        int: The maximum total path sum.
    """"""
    for i in range(len(triangle) - 2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])
    return triangle[0][0]",failed: max_path_sum() takes 1 positional argument but 3 were given,True,False,,14,6,5,0,7,2,0,3,3,7,7,12,10,19,24.406371956566698,63.11663380285989,2.5714285714285716,162.29991549306828,9.016661971837127,0.021038877934286628,88.62670170114632
137,mbpp,test,137,claude_3_haiku_0_shot,"def sum_digits(num):
    """"""
    Calculates the sum of digits of a given number.
    """"""
    total = 0
    while num:
        total += num % 10
        num //= 10
    return total

def find_max_sum_digits(num):
    """"""
    Divides a number into two parts such that the sum of digits is maximum.
    """"""
    # Find the largest number that is less than or equal to the given number
    # and has the maximum sum of digits
    largest_num = 0
    while (largest_num * 10 + 9) <= num:
        largest_num = largest_num * 10 + 9

    # Calculate the sum of digits for the two parts
    part1_sum = sum_digits(largest_num)
    part2_sum = sum_digits(num - largest_num)

    return part1_sum + part2_sum",failed: name 'sum_digits_twoparts' is not defined,True,False,,25,15,13,3,6,3,3,2,6,13,10,20,19,30,63.61549134016113,127.43782540330756,4.615384615384615,588.1745787844964,32.67636548802758,0.042479275134435855,88.09691143101253
138,mbpp,test,138,claude_3_haiku_0_shot,"def longest_subsequence_with_diff_one(arr):
    n = len(arr)
    dp = [1] * n
    
    for i in range(1, n):
        for j in range(i):
            if abs(arr[i] - arr[j]) == 1:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)",failed: name 'longest_subseq_with_diff_one' is not defined,True,False,,10,8,8,0,0,2,0,4,4,7,4,8,11,12,27.651484454403228,41.51317942364757,2.2857142857142856,94.88726725405158,5.27151484744731,0.01383772647454919,68.43145617991885
139,mbpp,test,139,claude_3_haiku_0_shot,"def contains_in_sequence(a, b, c):
    """"""
    Determines if the given number 'b' is present in the infinite sequence defined by the formula:
    a + n * c, where n is an integer.

    Args:
        a (int): The starting value of the sequence.
        b (int): The number to check for in the sequence.
        c (int): The common difference between consecutive terms in the sequence.

    Returns:
        bool: True if 'b' is present in the sequence, False otherwise.
    """"""
    if a == b:
        return True
    if (b - a) * c > 0 and (b - a) % c == 0:
        return True
    return False",failed: name 'does_Contain_B' is not defined,True,False,,18,7,6,0,10,2,0,4,6,10,8,16,16,24,48.72905595320056,96.0,4.8,460.79999999999995,25.599999999999998,0.032,80.29944826168193
140,mbpp,test,140,claude_3_haiku_0_shot,"def is_coprime(a, b):
    """"""
    Check if two numbers are co-prime (i.e., their greatest common divisor is 1).
    
    Args:
        a (int): The first number.
        b (int): The second number.
    
    Returns:
        bool: True if the numbers are co-prime, False otherwise.
    """"""
    return gcd(a, b) == 1

def gcd(p, q):
    """"""
    Calculate the greatest common divisor of two numbers using the Euclidean algorithm.
    
    Args:
        p (int): The first number.
        q (int): The second number.
    
    Returns:
        int: The greatest common divisor of the two numbers.
    """"""
    while q != 0:
        p, q = q, p % q
    return p",passed,True,True,3.3141266665855555e-05,27,8,6,0,16,5,0,1,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,62.9986638252789
141,mbpp,test,141,claude_3_haiku_0_shot,"def merge(left, right):
    result = []
    left_index, right_index = 0, 0

    while left_index < len(left) and right_index < len(right):
        if left[left_index] < right[right_index]:
            result.append(left[left_index])
            left_index += 1
        else:
            result.append(right[right_index])
            right_index += 1

    result.extend(left[left_index:])
    result.extend(right[right_index:])
    return result

def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    left_half = merge_sort(left_half)
    right_half = merge_sort(right_half)

    return merge(left_half, right_half)",passed,True,True,9.508209999845955e-05,28,26,22,0,0,6,0,4,5,13,8,16,18,24,59.715356810271004,100.07820003461549,3.076923076923077,307.9329231834323,17.107384621301794,0.0333594000115385,54.454904271490804
142,mbpp,test,142,claude_3_haiku_0_shot,"def find_parabola_vertex(a, b, c):
    """"""
    Calculates the vertex of a parabola given the coefficients a, b, and c.

    Args:
        a (float): The coefficient of the quadratic term.
        b (float): The coefficient of the linear term.
        c (float): The constant term.

    Returns:
        tuple: The coordinates of the vertex (x, y).
    """"""
    x_vertex = -b / (2 * a)
    y_vertex = (4 * a * c - b ** 2) / (4 * a)
    return (x_vertex, y_vertex)",failed: name 'parabola_vertex' is not defined,True,False,,15,5,4,0,9,2,0,1,5,12,9,17,17,26,54.62919048309069,106.27403387250884,3.5416666666666665,376.38720329846876,20.910400183248264,0.03542467795750295,71.40772956635792
143,mbpp,test,143,claude_3_haiku_0_shot,"def extract_specified_elements(data, indices):
    """"""
    Extracts the elements at the specified indices from each inner list in the given 2D list.
    
    Args:
        data (list): The 2D list from which to extract the elements.
        indices (list): The indices of the elements to extract.
    
    Returns:
        list: A list containing the extracted elements.
    """"""
    return [[row[i] for i in indices] for row in data]",failed: name 'specified_element' is not defined,True,False,,12,3,2,0,8,2,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
144,mbpp,test,144,claude_3_haiku_0_shot,"def toggle_even_bits(num):
    even_mask = 0b10101010101010101010101010101010
    return num ^ even_mask",failed: name 'even_bit_toggle_number' is not defined,True,False,,3,3,3,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,84.71624627594792
145,mbpp,test,145,claude_3_haiku_0_shot,"def convert_tuple_to_integers(tuple_of_strings):
    """"""
    Converts a tuple of string values to a tuple of integer values.
    
    Args:
        tuple_of_strings (tuple): A tuple of string values.
    
    Returns:
        tuple: A tuple of integer values.
    """"""
    return tuple(
        (int(item[0]), int(item[1]))
        for item in tuple_of_strings
    )",failed: name 'tuple_int_str' is not defined,True,False,,14,3,5,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
146,mbpp,test,146,claude_3_haiku_0_shot,"def encode_list(input_list):
    """"""
    Encodes the given list using run-length encoding.

    Args:
        input_list (list): The input list to be encoded.

    Returns:
        list: The encoded list, where each element is a list containing the count and the corresponding element.
    """"""
    encoded_list = []
    for _, group in groupby(input_list):
        group_list = list(group)
        encoded_list.append([len(group_list), group_list[0]])
    return encoded_list",failed: name 'groupby' is not defined,True,False,,15,7,6,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
147,mbpp,test,147,claude_3_haiku_0_shot,"def min_operations_to_equalize(arr, k):
    """"""
    Find the minimum number of operations required to make all elements in the array equal.
    
    Args:
        arr (list): The input array.
        k (int): The number of operations to perform on each element.
    
    Returns:
        int: The minimum number of operations required to make all elements equal, or -1 if it's not possible.
    """"""
    max_element = max(arr)
    total_operations = 0
    
    for element in arr:
        if (max_element - element) % k != 0:
            return -1
        total_operations += (max_element - element) // k
    
    return total_operations",failed: name 'min_Ops' is not defined,True,False,,20,9,8,0,8,4,0,3,6,10,7,13,16,20,48.72905595320056,80.0,3.9,312.0,17.333333333333332,0.02666666666666667,91.09752999164368
148,mbpp,test,148,claude_3_haiku_0_shot,"def get_season(month, day):
    seasons = {
        'winter': ('January', 'February', 'December'),
        'spring': ('March', 'April', 'May'),
        'summer': ('June', 'July', 'August'),
        'autumn': ('September', 'October', 'November')
    }

    for season, months in seasons.items():
        if month in months:
            if season == 'winter' and month == 'December' and day > 20:
                return 'winter'
            elif season == 'spring' and month == 'March' and day > 19:
                return 'spring'
            elif season == 'summer' and month == 'June' and day > 20:
                return 'summer'
            elif season == 'autumn' and (month == 'September' and day > 21 or
                                        month == 'October' and day > 21 or
                                        month == 'November' and day > 21):
                return 'autumn'
            else:
                return season",failed: name 'month_season' is not defined,True,False,,22,15,21,0,0,1,0,19,5,37,25,54,42,79,204.35941500270798,425.99307639952207,3.6486486486486487,1554.2990625387968,86.34994791882204,0.14199769213317404,53.3781208512651
149,mbpp,test,149,claude_3_haiku_0_shot,"def find_xy(a, b, n):
    for x in range(n // a + 1):
        y = (n - a * x) // b
        if a * x + b * y == n:
            return f""x = {x}, y = {y}""
    return ""No solution""",failed: name 'solution' is not defined,True,False,,6,6,6,0,0,0,0,3,5,12,9,18,17,27,54.62919048309069,110.36149671375918,3.75,413.85561267659693,22.99197848203316,0.03678716557125306,68.31809226867222
150,mbpp,test,150,claude_3_haiku_0_shot,"def remove_elements(list1, list2):
    """"""
    Removes all elements from `list1` that are present in `list2`.
    
    Args:
        list1 (list): The list from which elements will be removed.
        list2 (list): The list containing elements to be removed from `list1`.
    
    Returns:
        list: A new list containing the elements from `list1` that are not present in `list2`.
    """"""
    return [item for item in list1 if item not in list2]",passed,True,True,0.00011269366666700383,12,3,2,0,8,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.802389328218425
151,mbpp,test,151,claude_3_haiku_0_shot,"def sum_series(n):
    """"""
    Calculates the sum of the positive integers of n+(n-2)+(n-4)... (until n-x <= 0).
    
    Args:
        n (int): The starting number for the series.
    
    Returns:
        int: The sum of the series.
    """"""
    if n <= 0:
        return 0
    
    total = 0
    while n > 0:
        total += n
        n -= 2
    
    return total",passed,True,True,2.5604533332549786e-05,19,9,8,0,7,4,0,3,4,4,4,8,8,12,16.0,36.0,4.0,144.0,8.0,0.012,95.17127558539875
152,mbpp,test,152,claude_3_haiku_0_shot,"from math import tan, pi

def calculate_regular_polygon_area(num_sides, side_length):
    """"""
    Calculates the area of a regular polygon.

    Args:
        num_sides (int): The number of sides of the regular polygon.
        side_length (float): The length of each side of the regular polygon.

    Returns:
        float: The area of the regular polygon.
    """"""
    return (num_sides * side_length ** 2) / (4 * tan(pi / num_sides))",failed: name 'area_polygon' is not defined,True,False,,14,4,3,0,8,3,0,1,3,9,5,10,12,15,33.28421251514428,53.77443751081735,1.6666666666666667,89.62406251802892,4.9791145843349405,0.017924812503605784,67.60473710600276
153,mbpp,test,153,claude_3_haiku_0_shot,"def sum_of_divisors(n):
    divisors_sum = 1
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            divisors_sum += i
            if i != n // i:
                divisors_sum += n // i
    return divisors_sum

def are_divisors_sums_equal(num1, num2):
    return sum_of_divisors(num1) == sum_of_divisors(num2)",failed: name 'areEquivalent' is not defined,True,False,,11,10,10,0,0,1,0,4,6,12,10,20,18,30,58.52932501298082,125.09775004326937,5.0,625.4887502163468,34.74937501201927,0.04169925001442312,62.96305569991806
154,mbpp,test,154,claude_3_haiku_0_shot,"def count_char_position(string):
    count = 0
    for i, char in enumerate(string):
        if i == (ord(char.upper()) - ord('A')):
            count += 1
    return count",passed,True,True,2.9896900014136917e-05,6,6,6,0,0,0,0,3,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,72.43195764141169
155,mbpp,test,155,claude_3_haiku_0_shot,"def count_even_xor_pairs(arr, n):
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            if (arr[i] ^ arr[j]) % 2 == 0:
                count += 1
    return count",failed: name 'find_even_Pair' is not defined,True,False,,7,7,7,0,0,0,0,4,4,9,5,10,13,15,36.52932501298081,55.506595772116384,2.2222222222222223,123.34799060470309,6.852666144705727,0.01850219859070546,68.81312627594012
156,mbpp,test,156,claude_3_haiku_0_shot,"def next_power_of_2(n):
    """"""
    Find the smallest power of 2 greater than or equal to n.
    """"""
    if n == 0:
        return 1
    
    n -= 1
    n |= n >> 1
    n |= n >> 2
    n |= n >> 4
    n |= n >> 8
    n |= n >> 16
    
    return n + 1",failed: name 'next_Power_Of_2' is not defined,True,False,,15,11,10,0,3,2,0,2,5,12,13,26,17,39,54.62919048309069,159.41105080876326,5.416666666666667,863.4765252141344,47.97091806745191,0.05313701693625442,88.09794038676313
157,mbpp,test,157,claude_3_haiku_0_shot,"def find_frequency(arr, target):
    """"""
    Finds the frequency of a target element in a given array.

    Args:
        arr (list): The input array.
        target (int): The element to find the frequency of.

    Returns:
        int: The frequency of the target element in the array.
    """"""
    return arr.count(target)",failed: name 'frequency' is not defined,True,False,,12,3,2,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
158,mbpp,test,158,claude_3_haiku_0_shot,"def get_pell(n):
    if n <= 2:
        return n
    
    a, b = 1, 2
    for _ in range(3, n + 1):
        a, b = b, 2 * b + a
    
    return b",passed,True,True,2.767573333433878e-05,9,7,7,0,0,2,0,3,3,6,4,8,9,12,20.264662506490406,38.03910001730775,2.0,76.0782000346155,4.226566668589751,0.012679700005769252,70.09676010342874
159,mbpp,test,159,claude_3_haiku_0_shot,"def sum_range_list(lst, start, end):
    return sum(lst[start:end+1])",passed,True,True,8.729269999984505e-05,2,3,2,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,84.71624627594792
160,mbpp,test,160,claude_3_haiku_0_shot,"def calculate_pentagon_perimeter(side_length):
    """"""
    Calculates the perimeter of a regular pentagon.
    
    Args:
        side_length (float): The length of one side of the pentagon.
    
    Returns:
        float: The perimeter of the pentagon.
    """"""
    return 5 * side_length",failed: name 'perimeter_pentagon' is not defined,True,False,,11,3,2,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,65.11035329571214
161,mbpp,test,161,claude_3_haiku_0_shot,"def count_occurrences(text):
    count = 0
    for i in range(len(text) - 2):
        if text[i:i+3] == 'std':
            count += 1
    return count",failed: name 'count_occurance' is not defined,True,False,,6,6,6,0,0,0,0,3,3,8,4,8,11,12,28.75488750216347,41.51317942364757,1.5,62.26976913547136,3.4594316186372978,0.01383772647454919,71.29136821133338
162,mbpp,test,162,claude_3_haiku_0_shot,"def remove_non_alphanumeric(text):
    """"""
    Remove everything except alphanumeric characters from a string.
    
    Args:
        text (str): The input string.
    
    Returns:
        str: The string with non-alphanumeric characters removed.
    """"""
    return ''.join(char for char in text if char.isalnum())",failed: name 'remove_splchar' is not defined,True,False,,11,3,2,0,7,2,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
163,mbpp,test,163,claude_3_haiku_0_shot,"def group_keyvalue(key_value_pairs):
    result = {}
    for key, value in key_value_pairs:
        if key not in result:
            result[key] = []
        result[key].append(value)
    return result",passed,True,True,0.0001418797000004209,7,7,7,0,0,0,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,76.42020806643173
164,mbpp,test,164,claude_3_haiku_0_shot,"def is_valid_parentheses(s: str) -> bool:
    stack = []
    pchar = {""("": "")"", ""{"": ""}"", ""["": ""]""}

    for char in s:
        if char in pchar:
            stack.append(char)
        elif stack and pchar[stack.pop()] == char:
            continue
        else:
            return False

    return not stack",failed: name 'is_valid_parenthese' is not defined,True,False,,13,12,11,0,0,2,0,5,4,5,4,7,9,11,19.60964047443681,34.86917501586544,2.8,97.63369004442322,5.424093891356845,0.011623058338621813,64.98606761715769
165,mbpp,test,165,claude_3_haiku_0_shot,"def calculate_triangle_perimeter(side_a, side_b, side_c):
    """"""
    Calculates the perimeter of a triangle.

    Args:
        side_a (float): Length of the first side of the triangle.
        side_b (float): Length of the second side of the triangle.
        side_c (float): Length of the third side of the triangle.

    Returns:
        float: The perimeter of the triangle.
    """"""
    return side_a + side_b + side_c",failed: name 'perimeter_triangle' is not defined,True,False,,13,3,2,0,9,2,0,1,1,4,2,4,5,6,8.0,13.931568569324174,0.5,6.965784284662087,0.3869880158145604,0.004643856189774725,53.66299790645304
166,mbpp,test,166,claude_3_haiku_0_shot,"from math import gcd

def lcm(a, b):
    return (a * b) // gcd(a, b)

def find_numbers_within_range(L, R):
    for a in range(L, R + 1):
        for b in range(a + 1, R + 1):
            if L <= lcm(a, b) <= R:
                return (a, b)
    return (-1, -1)",failed: name 'answer' is not defined,True,False,,11,9,9,0,0,2,0,1,5,9,9,15,14,24,40.13896548741762,91.37651812938249,4.166666666666667,380.7354922057604,21.15197178920891,0.03045883937646083,64.91638683022046
167,mbpp,test,167,claude_3_haiku_0_shot,"import re

def search_literals(patterns, text):
    matches = []
    for pattern in patterns:
        if re.search(pattern, text):
            matches.append(""Matched!"")
        else:
            matches.append(""Not Matched!"")
    return matches",failed: name 'string_literals' is not defined,True,False,,10,9,9,0,0,1,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
168,mbpp,test,168,claude_3_haiku_0_shot,"def is_keith_number(n):
    """"""
    Checks if the given number is a Keith number.
    
    A Keith number is a number where the sum of the digits of the number,
    followed by the sum of the digits of the next number, and so on,
    eventually reaches the original number.
    """"""
    digits = [int(d) for d in str(n)]
    sequence = digits[:]
    
    while sum(sequence) < n:
        next_term = sum(sequence[-len(digits):])
        sequence.append(next_term)
    
    return sum(sequence) == n",failed: name 'is_num_keith' is not defined,True,False,,16,10,7,0,6,3,0,3,3,4,3,5,7,8,12.75488750216347,22.458839376460833,1.875,42.11032383086406,2.3394624350480036,0.007486279792153611,95.81135935479419
169,mbpp,test,169,claude_3_haiku_0_shot,"from math import radians, sin, cos, acos

def calculate_distance(start_latitude, start_longitude, end_latitude, end_longitude):
    """"""
    Calculate the distance between two points using latitude and longitude.
    
    Args:
        start_latitude (float): Latitude of the starting point.
        start_longitude (float): Longitude of the starting point.
        end_latitude (float): Latitude of the ending point.
        end_longitude (float): Longitude of the ending point.
        
    Returns:
        float: Distance between the two points in kilometers.
    """"""
    radius = 6371.01  # Earth's radius in kilometers
    
    start_lat_rad = radians(start_latitude)
    start_lon_rad = radians(start_longitude)
    end_lat_rad = radians(end_latitude)
    end_lon_rad = radians(end_longitude)
    
    distance = radius * acos(sin(start_lat_rad) * sin(end_lat_rad) + cos(start_lat_rad) * cos(end_lat_rad) * cos(start_lon_rad - end_lon_rad))
    
    return distance",failed: name 'distance_lat_long' is not defined,True,False,,25,10,9,1,10,6,0,1,3,12,6,12,15,18,47.77443751081735,70.32403072095333,1.5,105.48604608143,5.860335893412778,0.02344134357365111,87.1012359450031
170,mbpp,test,170,claude_3_haiku_0_shot,"def find_longest_common_prefix(strings):
    if not strings:
        return """"

    prefix = strings[0]
    for string in strings[1:]:
        while string and prefix and string[0] == prefix[0]:
            prefix = prefix[:len(prefix)-1]
            string = string[1:]
    return prefix",failed: name 'common_prefix' is not defined,True,False,,10,11,9,0,0,1,0,6,4,8,4,8,12,12,32.0,43.01955000865388,2.0,86.03910001730776,4.779950000961542,0.014339850002884626,65.03713001710202
171,mbpp,test,171,claude_3_haiku_0_shot,"import re

def find_character_types(input_string):
    uppercase_chars = re.findall(r'[A-Z]', input_string)
    lowercase_chars = re.findall(r'[a-z]', input_string)
    numeric_chars = re.findall(r'\d', input_string)
    special_chars = re.findall(r'[, .!?]', input_string)

    return uppercase_chars, lowercase_chars, numeric_chars, special_chars",failed: name 'find_character' is not defined,True,False,,9,7,7,0,0,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
172,mbpp,test,172,claude_3_haiku_0_shot,"def count_distinct_pairs(arr, k):
    """"""
    Count all the distinct pairs having a difference of k in the given array.
    
    Args:
        arr (list): The input array.
        k (int): The difference to be checked.
        
    Returns:
        int: The count of distinct pairs having a difference of k.
    """"""
    pairs = set()
    for num in arr:
        pairs.add((num, num + k))
        pairs.add((num, num - k))
    return len(pairs)",failed: name 'count_pairs' is not defined,True,False,,16,7,6,0,8,2,0,2,2,2,2,4,4,6,4.0,12.0,2.0,24.0,1.3333333333333333,0.004,93.6483610904691
173,mbpp,test,173,claude_3_haiku_0_shot,"def find_greater_values(lst, num):
    """"""
    Find all the values in a list that are greater than a specified number.
    
    Args:
        lst (list): The input list.
        num (int): The specified number.
    
    Returns:
        list: A list of values greater than the specified number.
    """"""
    return [x for x in lst if x > num]",failed: name 'greater_specificnum' is not defined,True,False,,12,3,2,0,8,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.802389328218425
174,mbpp,test,174,claude_3_haiku_0_shot,"def find_parabola_focus(a, b, c):
    """"""
    Calculates the focus of a parabola given the coefficients a, b, and c.

    Args:
        a (float): The coefficient of the x^2 term.
        b (float): The coefficient of the x term.
        c (float): The constant term.

    Returns:
        tuple: The coordinates of the focus as (x, y).
    """"""
    x_focus = -b / (2 * a)
    y_focus = (4 * a * c - b ** 2) / (4 * a)
    return (x_focus, y_focus)",failed: name 'parabola_focus' is not defined,True,False,,15,5,4,0,9,2,0,1,5,12,9,17,17,26,54.62919048309069,106.27403387250884,3.5416666666666665,376.38720329846876,20.910400183248264,0.03542467795750295,71.40772956635792
175,mbpp,test,175,claude_3_haiku_0_shot,"import re

def check_literals(text, patterns):
    matches = []
    for pattern in patterns:
        if re.search(pattern, text):
            matches.append(""Matched!"")
        else:
            matches.append(""Not Matched!"")
    return matches",failed: ,True,False,,10,9,9,0,0,1,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
176,mbpp,test,176,claude_3_haiku_0_shot,"def longest_common_subsequence(sequence1, sequence2):
    m, n = len(sequence1), len(sequence2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if sequence1[i - 1] == sequence2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    return dp[m][n]",failed: longest_common_subsequence() takes 2 positional arguments but 4 were given,True,False,,12,10,10,0,0,2,0,5,4,10,13,26,14,39,41.219280948873624,148.48684196024655,5.2,772.131578193282,42.89619878851567,0.04949561398674885,62.30733361634816
177,mbpp,test,177,claude_3_haiku_0_shot,"def is_product_of_squares(n):
    """"""
    Checks if a given number can be represented as the product of two squares.
    
    Args:
        n (int): The number to be checked.
    
    Returns:
        bool: True if the number can be represented as the product of two squares, False otherwise.
    """"""
    for i in range(1, int(n ** 0.5) + 1):
        for j in range(i, int(n ** 0.5) + 1):
            if i * i * j * j == n:
                return True
    return False",failed: name 'prod_Square' is not defined,True,False,,15,7,6,0,7,2,0,4,4,10,8,16,14,24,41.219280948873624,91.37651812938249,3.2,292.404858014024,16.244714334112444,0.03045883937646083,90.2648841484608
178,mbpp,test,178,claude_3_haiku_0_shot,"def first_missing_positive(arr):
    n = len(arr)

    # Step 1: Mark numbers as negative
    for i in range(n):
        a = abs(arr[i])
        if 1 <= a <= n:
            arr[a - 1] = -abs(arr[a - 1])

    # Step 2: Find the first positive number
    for i in range(n):
        if arr[i] > 0:
            return i + 1

    # If all numbers are negative, return n + 1
    return n + 1",failed: name 'first_Missing_Positive' is not defined,True,False,,16,10,10,3,0,3,3,5,5,7,8,14,12,22,31.26112492884004,78.86917501586544,5.0,394.3458750793272,21.90810417107373,0.026289725005288478,90.73726328651175
179,mbpp,test,179,claude_3_haiku_0_shot,"def count_integral_points(x1, y1, x2, y2):
    """"""
    Counts the number of integral coordinates that lie inside a square.

    Args:
        x1 (int): The x-coordinate of the first corner of the square.
        y1 (int): The y-coordinate of the first corner of the square.
        x2 (int): The x-coordinate of the second corner of the square.
        y2 (int): The y-coordinate of the second corner of the square.

    Returns:
        int: The number of integral coordinates that lie inside the square.
    """"""
    width = x2 - x1
    height = y2 - y1
    return width * height",failed: name 'count_Intgral_Points' is not defined,True,False,,16,5,4,0,10,2,0,1,2,6,3,6,8,9,17.509775004326936,27.0,1.0,27.0,1.5,0.009,70.67047478822204
180,mbpp,test,180,claude_3_haiku_0_shot,"def has_thirty_days(month_name):
    thirty_day_months = (""April"", ""June"", ""September"", ""November"")
    return month_name in thirty_day_months",failed: name 'check_monthnumber' is not defined,True,False,,3,3,3,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,84.71624627594792
181,mbpp,test,181,claude_3_haiku_0_shot,"def has_letter_and_number(string):
    has_letter = False
    has_number = False
    for char in string:
        if char.isalpha():
            has_letter = True
        elif char.isdigit():
            has_number = True
        if has_letter and has_number:
            return True
    return has_letter and has_number",failed: name 'check_String' is not defined,True,False,,11,11,11,0,0,0,0,7,1,2,2,4,3,6,2.0,9.509775004326938,1.0,9.509775004326938,0.5283208335737188,0.003169925001442313,69.49241605266025
182,mbpp,test,182,claude_3_haiku_0_shot,"def remove_duplicates(tup):
    """"""
    Removes duplicates from the given tuple.
    
    Args:
        tup (tuple): The input tuple.
    
    Returns:
        tuple: A new tuple with duplicates removed.
    """"""
    return tuple(set(tup))",failed: name 'remove_tuple' is not defined,True,False,,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
183,mbpp,test,183,claude_3_haiku_0_shot,"def octal_to_decimal(octal_number):
    decimal_value = 0
    for digit in str(octal_number):
        decimal_value = decimal_value * 8 + int(digit)
    return decimal_value",failed: name 'octal_To_Decimal' is not defined,True,False,,5,5,5,0,0,0,0,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,76.14705226402761
184,mbpp,test,184,claude_3_haiku_0_shot,"def find_first_occurrence(arr, target, n):
    left = 0
    right = n - 1
    first_index = -1

    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            first_index = mid
            right = mid - 1
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return first_index",failed: name 'first' is not defined,True,False,,16,14,14,0,0,2,0,4,7,10,10,19,17,29,52.87076540327685,118.53642239625987,6.65,788.2672089351281,43.792622718618226,0.03951214079875329,59.9392548704384
185,mbpp,test,185,claude_3_haiku_0_shot,"def remove_tuples(tuples, k):
    """"""
    Removes all tuples of length `k` from the given list of tuples.
    
    Args:
        tuples (list): A list of tuples.
        k (int): The length of tuples to be removed.
    
    Returns:
        list: A new list containing the tuples of length other than `k`.
    """"""
    return [t for t in tuples if len(t) != k]",passed,True,True,0.00014465853333263113,12,3,2,0,8,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.802389328218425
186,mbpp,test,186,claude_3_haiku_0_shot,"def exponentiate_tuples(tuple1, tuple2):
    """"""
    Perform exponentiation of the elements in the given tuples.

    Args:
        tuple1 (tuple): The first tuple.
        tuple2 (tuple): The second tuple.

    Returns:
        tuple: The result of exponentiation.
    """"""
    return tuple(a ** b for a, b in zip(tuple1, tuple2))",failed: name 'find_exponentio' is not defined,True,False,,12,3,2,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.93689225219502
187,mbpp,test,187,claude_3_haiku_0_shot,"import math

def find_largest_inscribed_triangle(a, b):
    """"""
    Finds the area of the largest triangle that can be inscribed in an ellipse.

    Args:
        a (float): The semi-major axis of the ellipse.
        b (float): The semi-minor axis of the ellipse.

    Returns:
        float: The area of the largest inscribed triangle.
    """"""
    if a < 0 or b < 0:
        return -1

    area = (3 * math.sqrt(3) * a ** 2) / (4 * b)
    return area",failed: name 'largest_triangle' is not defined,True,False,,18,7,6,0,8,4,0,3,6,14,9,17,20,26,68.81274391313339,112.37013046707143,3.642857142857143,409.34833241576024,22.74157402309779,0.03745671015569048,86.71161498068167
188,mbpp,test,188,claude_3_haiku_0_shot,"def highest_power_of_2(n):
    """"""
    Find the highest power of 2 less than or equal to the given number.
    """"""
    return 2 ** (n.bit_length() - 1)",failed: name 'highest_Power_of_2' is not defined,True,False,,5,3,2,0,3,0,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,97.72315463799069
189,mbpp,test,189,claude_3_haiku_0_shot,"def find_max_indices(lst):
    """"""
    Find all index positions of the maximum values in a given list.
    
    Args:
        lst (list): The input list.
    
    Returns:
        list: A list of indices where the maximum value(s) occur.
    """"""
    max_value = max(lst)
    return [i for i, x in enumerate(lst) if x == max_value]",failed: name 'position_max' is not defined,True,False,,12,4,3,0,7,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,81.03301269040966
190,mbpp,test,190,claude_3_haiku_0_shot,"def is_list_elements_same(lst):
    """"""
    Checks if all elements in the given list are the same.

    Args:
        lst (list): The input list to be checked.

    Returns:
        bool: True if all elements are the same, False otherwise.
    """"""
    return len(set(lst)) == 1",failed: name 'chkList' is not defined,True,False,,11,3,2,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,65.11035329571214
191,mbpp,test,191,claude_3_haiku_0_shot,"def remove_even_chars(string):
    return ''.join(char for i, char in enumerate(string) if i % 2 != 0)",failed: name 'remove_even' is not defined,True,False,,2,2,2,0,0,0,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,84.69319837885878
192,mbpp,test,192,claude_3_haiku_0_shot,"def hamming_distance(num1, num2):
    """"""
    Calculates the Hamming distance between two integers.
    
    Args:
        num1 (int): The first integer.
        num2 (int): The second integer.
    
    Returns:
        int: The Hamming distance between the two integers.
    """"""
    diff = num1 ^ num2
    return bin(diff).count('1')",failed: name 'hamming_Distance' is not defined,True,False,,13,4,3,0,8,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,74.98090723848824
193,mbpp,test,193,claude_3_haiku_0_shot,"def count_char(string, char):
    return string.count(char)",failed: name 'count' is not defined,True,False,,2,2,2,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
194,mbpp,test,194,claude_3_haiku_0_shot,"def find_inversions(tuples):
    return [tuple(~x for x in t) for t in tuples]",failed: name 'inversion_elements' is not defined,True,False,,2,2,2,0,0,0,0,3,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,90.92201774036091
195,mbpp,test,195,claude_3_haiku_0_shot,"def concatenate_adjacent_elements(tuples):
    """"""
    Concatenates adjacent elements in the given tuple.
    
    Args:
        tuples (tuple): The input tuple.
    
    Returns:
        tuple: A new tuple with adjacent elements concatenated.
    """"""
    result = []
    for i in range(len(tuples) - 1):
        result.append(str(tuples[i]) + str(tuples[i+1]))
    return tuple(result)",failed: name 'concatenate_elements' is not defined,True,False,,14,6,5,0,7,2,0,2,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,91.54523304021033
196,mbpp,test,196,claude_3_haiku_0_shot,"def find_longest_repeating_subsequence(string):
    n = len(string)
    dp = [[0] * (n + 1) for _ in range(n + 1)]

    for i in range(1, n + 1):
        for j in range(1, n + 1):
            if string[i - 1] == string[j - 1] and i != j:
                dp[i][j] = 1 + dp[i - 1][j - 1]
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    return dp[n][n]",failed: name 'find_longest_repeating_subseq' is not defined,True,False,,12,10,10,0,0,2,0,6,6,11,15,30,17,45,53.563522809337215,183.9358278562653,8.181818181818182,1504.9295006421705,83.60719448012058,0.0613119426187551,61.521794988793744
197,mbpp,test,197,claude_3_haiku_0_shot,"import re

def is_decimal(num: str) -> bool:
    """"""
    Check if the given string represents a decimal number with a precision of 2.
    
    Args:
        num (str): The input string to be checked.
    
    Returns:
        bool: True if the input string represents a decimal number with a precision of 2, False otherwise.
    """"""
    return bool(re.fullmatch(r""^\d+(\.\d{1,2})?$"", num))",passed,True,True,3.0172099999011457e-05,13,4,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
198,mbpp,test,198,claude_3_haiku_0_shot,"def heap_replace(heap, new_item):
    """"""
    Replace the smallest element in the given heap with a new item.
    
    Args:
        heap (list): The heap to be modified.
        new_item (any): The new item to be inserted into the heap.
    
    Returns:
        list: The modified heap.
    """"""
    hq.heapify(heap)
    hq.heappushpop(heap, new_item)
    return heap",failed: name 'hq' is not defined,True,False,,14,5,4,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
199,mbpp,test,199,claude_3_haiku_0_shot,"import re

def is_allowed_specific_char(string):
    allowed_chars = r'^[a-zA-Z0-9.]+$'
    return bool(re.match(allowed_chars, string))",passed,True,True,4.344849999900665e-05,5,4,4,0,0,1,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
200,mbpp,test,200,claude_3_haiku_0_shot,"def count_set_bits_at_positions(n, o, p):
    """"""
    Counts the number of integers in the range [0, n-1] where the oth and pth bits are set.

    Args:
        n (int): The upper bound of the range.
        o (int): The position of the first bit to check.
        p (int): The position of the second bit to check.

    Returns:
        int: The count of integers in the range [0, n-1] where the oth and pth bits are set.
    """"""
    count = 0
    for i in range(n):
        if (i & (1 << o)) and (i & (1 << p)):
            count += 1
    return count",failed: name 'count_Num' is not defined,True,False,,17,7,6,0,9,2,0,4,4,9,6,12,13,18,36.52932501298081,66.60791492653966,2.6666666666666665,177.62110647077242,9.867839248376246,0.022202638308846556,84.86089695379934
201,mbpp,test,201,claude_3_haiku_0_shot,"def fourth_power_sum(n):
    return sum(i**4 for i in range(1, n+1))",failed: name 'fourth_Power_Sum' is not defined,True,False,,2,2,2,0,0,0,0,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,84.82770130283538
202,mbpp,test,202,claude_3_haiku_0_shot,"def concatenate_strings(tuple1, tuple2):
    """"""
    Concatenates the corresponding elements of two input tuples.
    
    Args:
        tuple1 (tuple): The first input tuple.
        tuple2 (tuple): The second input tuple.
    
    Returns:
        tuple: A new tuple containing the concatenated strings.
    """"""
    return tuple(a + b for a, b in zip(tuple1, tuple2))",passed,True,True,0.00010388540000008106,12,3,2,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.93689225219502
203,mbpp,test,203,claude_3_haiku_0_shot,"def radians_to_degrees(radians):
    """"""
    Converts radians to degrees.
    
    Args:
        radians (float): The angle in radians.
    
    Returns:
        float: The angle in degrees.
    """"""
    return radians * (180 / math.pi)",failed: name 'degree_radian' is not defined,True,False,,11,3,2,0,7,2,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,61.515062853972545
204,mbpp,test,204,claude_3_haiku_0_shot,"def decode_list(encoded_list):
    decoded_list = []
    for element in encoded_list:
        if isinstance(element, list):
            count, value = element
            decoded_list.extend([value] * count)
        else:
            decoded_list.append(element)
    return decoded_list",passed,True,True,0.00010892510000151864,9,9,9,0,0,0,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,74.03933453534945
205,mbpp,test,205,claude_3_haiku_0_shot,"def is_subset(outer_list, inner_list):
    """"""
    Checks if a nested list is a subset of another nested list.

    Args:
        outer_list (list): The larger list to check against.
        inner_list (list): The smaller list to check if it is a subset.

    Returns:
        bool: True if the inner_list is a subset of the outer_list, False otherwise.
    """"""
    return all(item in outer_list for item in inner_list)",failed: name 'check_subset_list' is not defined,True,False,,12,3,2,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.93689225219502
206,mbpp,test,206,claude_3_haiku_0_shot,"def find_first_repeated_char(string):
    char_count = {}
    for char in string:
        if char in char_count:
            return char
        char_count[char] = 1
    return None",failed: name 'first_Repeated_Char' is not defined,True,False,,7,7,7,0,0,0,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,76.42020806643173
207,mbpp,test,207,claude_3_haiku_0_shot,"def min_operations(a, b):
    """"""
    Find the minimum number of operations required to make two numbers equal.

    Args:
        a (int): The first number.
        b (int): The second number.

    Returns:
        int: The minimum number of operations required to make the two numbers equal.
    """"""
    if a > b:
        a, b = b, a

    gcd = math.gcd(a, b)
    return b // gcd - 1",failed: name 'min_Operations' is not defined,True,False,,16,6,5,0,8,3,0,2,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,87.27781908182052
208,mbpp,test,208,claude_3_haiku_0_shot,"def extract_min_max(test_tuple, k):
    """"""
    Extracts the minimum and maximum k elements from the given tuple.

    Args:
        test_tuple (tuple): The input tuple.
        k (int): The number of minimum and maximum elements to extract.

    Returns:
        tuple: A tuple containing the minimum and maximum k elements.
    """"""
    sorted_tuple = sorted(test_tuple)
    min_elements = sorted_tuple[:k]
    max_elements = sorted_tuple[-k:]
    return tuple(min_elements + max_elements)",failed: ,True,False,,15,8,5,0,8,2,0,1,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,87.25346576142329
209,mbpp,test,209,claude_3_haiku_0_shot,"def replace_max_special_chars(text, max_replacements):
    pattern = r""[ ,.]""
    return re.sub(pattern, "":"", text, max_replacements)",failed: name 'replace_max_specialchar' is not defined,True,False,,3,3,3,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
210,mbpp,test,210,claude_3_haiku_0_shot,"def find_first_even(numbers):
    """"""
    Find the first even number in the given list of numbers.

    Args:
        numbers (list): A list of numbers.

    Returns:
        int: The first even number in the list, or -1 if no even number is found.
    """"""
    for num in numbers:
        if num % 2 == 0:
            return num
    return -1",failed: name 'first_even' is not defined,True,False,,14,6,5,0,7,2,0,3,3,5,3,5,8,8,16.36452797660028,24.0,1.5,36.0,2.0,0.008,91.56707519598268
211,mbpp,test,211,claude_3_haiku_0_shot,"def check_type(test_tuple):
    """"""
    Checks if all elements in the given tuple have the same data type.

    Args:
        test_tuple (tuple): The tuple to be checked.

    Returns:
        bool: True if all elements have the same data type, False otherwise.
    """"""
    if not test_tuple:
        return True

    element_type = type(test_tuple[0])
    return all(isinstance(elem, element_type) for elem in test_tuple)",passed,True,True,4.7297666666660615e-05,15,6,5,0,7,3,0,3,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,99.12351647019182
212,mbpp,test,212,claude_3_haiku_0_shot,"def is_majority(arr, n, x):
    """"""
    Check if the given element 'x' is a majority element in the sorted array 'arr' of length 'n'.
    
    Args:
        arr (list): The sorted array to check for majority element.
        n (int): The length of the array.
        x (int): The element to check for majority.
    
    Returns:
        bool: True if 'x' is a majority element, False otherwise.
    """"""
    # Find the first occurrence of 'x' in the array using binary search
    i = _binary_search(arr, 0, n-1, x)
    if i == -1:
        return False
    
    # Check if the element at index 'i + n//2' is also 'x'
    if (i + n//2) <= (n - 1) and arr[i + n//2] == x:
        return True
    else:
        return False

def _binary_search(arr, low, high, x):
    """"""
    Perform binary search to find the first occurrence of 'x' in the sorted array 'arr'.
    
    Args:
        arr (list): The sorted array to search.
        low (int): The lower index of the search range.
        high (int): The upper index of the search range.
        x (int): The element to search for.
    
    Returns:
        int: The index of the first occurrence of 'x' in the array, or -1 if not found.
    """"""
    while low <= high:
        mid = (low + high) // 2
        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:
            return mid
        elif x > arr[mid]:
            low = mid + 1
        else:
            high = mid - 1
    return -1",passed,True,True,6.183720000005147e-05,45,20,18,2,19,6,2,4,9,28,24,46,37,70,163.13526283059372,364.6617355940265,7.392857142857143,2695.8921167129815,149.7717842618323,0.1215539118646755,75.43808710504199
213,mbpp,test,213,claude_3_haiku_0_shot,"def count_set_bits(num: int) -> int:
    """"""
    Counts the number of set bits in the binary representation of a given integer.

    Args:
        num (int): The integer whose set bits are to be counted.

    Returns:
        int: The number of set bits in the binary representation of the input integer.
    """"""
    return bin(num).count('1')",failed: name 'count_Set_Bits' is not defined,True,False,,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
214,mbpp,test,214,claude_3_haiku_0_shot,"def find_min(arr):
    left, right = 0, len(arr) - 1

    while left < right:
        mid = left + (right - left) // 2

        if arr[mid] > arr[right]:
            left = mid + 1
        else:
            right = mid

    return arr[left]",failed: name 'find_Min' is not defined,True,False,,12,9,9,0,0,3,0,3,5,10,7,14,15,21,44.82892142331043,82.0447025077789,3.5,287.15645877722613,15.953136598734785,0.02734823416925963,65.37847236293541
215,mbpp,test,215,claude_3_haiku_0_shot,"def remove_odd_index_chars(string):
    return ''.join(char for i, char in enumerate(string) if i % 2 == 0)",failed: name 'odd_values_string' is not defined,True,False,,2,2,2,0,0,0,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,84.69319837885878
216,mbpp,test,216,claude_3_haiku_0_shot,"def find_minimum(a, b, c):
    return min(a, b, c)",failed: name 'min_of_three' is not defined,True,False,,2,2,2,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
217,mbpp,test,217,claude_3_haiku_0_shot,"def are_all_bits_unset_in_range(n, l, r):
    mask = (1 << r) - 1
    mask ^= (1 << (l - 1)) - 1
    return (n & mask) == 0",failed: name 'all_Bits_Set_In_The_Given_Range' is not defined,True,False,,4,4,4,0,0,0,0,1,5,11,8,16,16,24,49.663388279447084,96.0,3.6363636363636362,349.09090909090907,19.39393939393939,0.032,72.85229283872809
218,mbpp,test,218,claude_3_haiku_0_shot,"def rearrange_array(arr):
    """"""
    Rearrange the elements of the given array so that all negative elements appear before positive ones.
    """"""
    negative_elements = [x for x in arr if x < 0]
    positive_elements = [x for x in arr if x >= 0]
    return negative_elements + positive_elements",failed: name 're_arrange_array' is not defined,True,False,,7,5,4,0,3,0,0,5,3,4,3,6,7,9,12.75488750216347,25.26619429851844,2.25,56.848937171666485,3.158274287314805,0.008422064766172813,100.0
219,mbpp,test,219,claude_3_haiku_0_shot,"def replace_blanks(input_string, replacement_char):
    """"""
    Replaces all blank spaces in the input string with the given replacement character.
    
    Args:
        input_string (str): The input string to be modified.
        replacement_char (str): The character to replace the blank spaces with.
    
    Returns:
        str: The modified string with blank spaces replaced.
    """"""
    return input_string.replace("" "", replacement_char)",failed: name 'replace_blank' is not defined,True,False,,12,3,2,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
220,mbpp,test,220,claude_3_haiku_0_shot,"def max_sum_triangle(triangle):
    n = len(triangle)
    
    # Traverse the triangle from bottom to top
    for i in range(n-2, -1, -1):
        for j in range(i+1):
            # Update the current element with the maximum of its two child elements
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
    
    # The maximum sum is stored in the top element of the triangle
    return triangle[0][0]",failed: name 'max_sum' is not defined,True,False,,11,6,6,3,0,2,3,3,3,7,8,14,10,22,24.406371956566698,73.08241808752197,3.0,219.24725426256592,12.180403014586995,0.024360806029173992,98.64832364986913
221,mbpp,test,221,claude_3_haiku_0_shot,"def get_n_largest(data, n):
    """"""
    Retrieves the n largest items from the given dataset.
    
    Args:
        data (list): The dataset to search.
        n (int): The number of largest items to retrieve.
    
    Returns:
        list: The n largest items from the dataset.
    """"""
    return heapq.nlargest(n, data)",failed: name 'larg_nnum' is not defined,True,False,,12,3,2,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
222,mbpp,test,222,claude_3_haiku_0_shot,"def calculate_lateral_surface_area(radius, height):
    """"""
    Calculates the lateral surface area of a cylinder.

    Args:
        radius (float): The radius of the cylinder.
        height (float): The height of the cylinder.

    Returns:
        float: The lateral surface area of the cylinder.
    """"""
    return 2 * 3.14159 * radius * height",failed: name 'lateralsuface_cylinder' is not defined,True,False,,12,3,2,0,8,2,0,1,1,6,3,6,7,9,15.509775004326936,25.26619429851844,0.5,12.63309714925922,0.701838730514401,0.008422064766172813,54.992137741976116
223,mbpp,test,223,claude_3_haiku_0_shot,"def calculate_cube_volume(side_length):
    """"""
    Calculates the volume of a cube.

    Args:
        side_length (float): The length of one side of the cube.

    Returns:
        float: The volume of the cube.
    """"""
    return side_length ** 3",failed: name 'volume_cube' is not defined,True,False,,11,3,2,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,65.11035329571214
224,mbpp,test,224,claude_3_haiku_0_shot,"def set_even_bits(num):
    """"""
    Set all even bits of a given number.
    
    Args:
        num (int): The input number.
    
    Returns:
        int: The number with all even bits set.
    """"""
    even_mask = 0xAAAAAAAA  # Mask with 1s at even bit positions
    return num | even_mask",failed: name 'even_bit_set_number' is not defined,True,False,,12,4,3,1,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,74.98090723848824
225,mbpp,test,225,claude_3_haiku_0_shot,"def count_equilateral_triangles(side_length, sub_triangle_side_length):
    if side_length < sub_triangle_side_length:
        return -1

    upper_triangles = (side_length - sub_triangle_side_length + 1) * (side_length - sub_triangle_side_length + 2) // 2
    lower_triangles = (side_length - 2 * sub_triangle_side_length + 1) * (side_length - 2 * sub_triangle_side_length + 2) // 2

    return upper_triangles + lower_triangles",failed: name 'No_of_Triangle' is not defined,True,False,,8,6,6,0,0,2,0,2,6,18,17,33,24,50,90.56842503028855,229.24812503605784,5.5,1260.8646876983182,70.04803820546212,0.07641604167868594,66.22953856721664
226,mbpp,test,226,claude_3_haiku_0_shot,"from collections import Counter

def check_occurrences(records):
    """"""
    Checks the occurrences of records that occur similar times in the given list of tuples.

    Args:
        records (list): A list of tuples representing the records.

    Returns:
        dict: A dictionary where the keys are the sorted tuples of records and the values are the number of occurrences.
    """"""
    return dict(Counter(tuple(sorted(record)) for record in records))",failed: name 'check_occurences' is not defined,True,False,,13,4,3,0,7,3,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
227,mbpp,test,227,claude_3_haiku_0_shot,"def count_non_empty_substrings(string):
    """"""
    Counts the number of non-empty substrings of a given string.
    
    Args:
        string (str): The input string.
    
    Returns:
        int: The number of non-empty substrings.
    """"""
    return (len(string) * (len(string) + 1)) // 2",failed: name 'number_of_substrings' is not defined,True,False,,11,3,2,0,7,2,0,1,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,59.66172800917071
228,mbpp,test,228,claude_3_haiku_0_shot,"def get_total_number_of_sequences(m, n):
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if j == 1:
                dp[i][j] = i
            elif i < j:
                dp[i][j] = 0
            else:
                dp[i][j] = dp[i - 1][j] + dp[max(1, i // 2)][j - 1]

    return dp[m][n]",passed,True,True,6.572876666647669e-05,13,11,11,0,0,2,0,6,6,10,11,22,16,33,48.72905595320056,132.0,6.6,871.1999999999999,48.4,0.044,61.62779332351888
229,mbpp,test,229,claude_3_haiku_0_shot,"def replace_last_element(original_list, new_list):
    """"""
    Replaces the last element of the original list with the new list.
    
    Args:
        original_list (list): The list to be modified.
        new_list (list): The list to replace the last element of the original list.
    
    Returns:
        list: The modified original list.
    """"""
    return original_list[:-1] + new_list",failed: name 'replace_list' is not defined,True,False,,12,4,2,0,8,2,0,1,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,54.631455942606664
230,mbpp,test,230,claude_3_haiku_0_shot,"def generate_3d_array(rows, cols, depth):
    return [[['*' for _ in range(cols)] for _ in range(rows)] for _ in range(depth)]",failed: name 'array_3d' is not defined,True,False,,2,2,2,0,0,0,0,4,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
231,mbpp,test,231,claude_3_haiku_0_shot,"def count_characters(text: str) -> int:
    """"""
    Counts the total number of characters in the given string.
    
    Args:
        text (str): The input string.
    
    Returns:
        int: The total number of characters in the input string.
    """"""
    return len(text)",failed: name 'count_charac' is not defined,True,False,,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
232,mbpp,test,232,claude_3_haiku_0_shot,"def sort_on_occurrence(lst):
    """"""Sort the given list based on the occurrence of the first element of tuples.""""""
    frequency_map = {}
    for item in lst:
        key, value = item
        frequency_map.setdefault(key, []).append(value)

    sorted_items = sorted(frequency_map.items(), key=lambda x: (-len(x[1]), x[0]))
    return [(key, *set(values), len(values)) for key, values in sorted_items]",failed: name 'sort_on_occurence' is not defined,True,False,,9,9,7,0,0,1,1,3,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,76.67286345511201
233,mbpp,test,233,claude_3_haiku_0_shot,"def next_perfect_square(n):
    """"""
    Find the next perfect square greater than a given number.
    
    Args:
        n (int): The input number.
    
    Returns:
        int: The next perfect square greater than the input number.
    """"""
    next_square = int(math.ceil(math.sqrt(n))) ** 2
    return next_square",failed: name 'next_Perfect_Square' is not defined,True,False,,12,4,3,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,81.30201853836287
234,mbpp,test,234,claude_3_haiku_0_shot,"def max_sum_bitonic_subsequence(arr):
    n = len(arr)
    
    # Calculate the maximum sum of increasing subsequence
    max_increasing_sum = [x for x in arr]
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j]:
                max_increasing_sum[i] = max(max_increasing_sum[i], max_increasing_sum[j] + arr[i])
    
    # Calculate the maximum sum of decreasing subsequence
    max_decreasing_sum = [x for x in arr]
    for i in range(n-2, -1, -1):
        for j in range(i+1, n):
            if arr[i] > arr[j]:
                max_decreasing_sum[i] = max(max_decreasing_sum[i], max_decreasing_sum[j] + arr[i])
    
    # Find the maximum sum of bitonic subsequence
    max_bitonic_sum = float('-inf')
    for i in range(n):
        max_bitonic_sum = max(max_bitonic_sum, max_increasing_sum[i] + max_decreasing_sum[i] - arr[i])
    
    return max_bitonic_sum",failed: name 'max_sum' is not defined,True,False,,23,16,16,3,0,4,3,10,4,16,10,18,20,28,72.0,121.01398665684616,2.25,272.28146997790384,15.12674833210577,0.040337995552282055,80.65827607124226
235,mbpp,test,235,claude_3_haiku_0_shot,"def compute_square_root(number):
    """"""
    Compute the square root of a number using the Babylonian method.

    Args:
        number (float): The number to find the square root of.

    Returns:
        float: The square root of the input number.
    """"""
    if number == 0:
        return 0

    guess = number / 2
    next_guess = guess + 1

    while abs(guess - next_guess) > 1e-10:
        next_guess = (guess + number / guess) / 2
        guess = next_guess

    return guess",failed: name 'babylonian_squareroot' is not defined,True,False,,21,10,9,0,7,5,0,3,5,10,8,16,15,24,44.82892142331043,93.76537429460444,4.0,375.06149717841777,20.836749843245432,0.03125512476486815,92.25663179111692
236,mbpp,test,236,claude_3_haiku_0_shot,"def longest_palindromic_subsequence(s):
    n = len(s)
    dp = [[0] * n for _ in range(n)]

    for i in range(n):
        dp[i][i] = 1

    for length in range(2, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            if s[i] == s[j]:
                if length == 2:
                    dp[i][j] = 2
                else:
                    dp[i][j] = dp[i + 1][j - 1] + 2
            else:
                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])

    return dp[0][n - 1]",failed: name 'lps' is not defined,True,False,,19,16,16,0,0,3,0,7,4,12,14,28,16,42,51.01955000865388,168.0,4.666666666666667,784.0,43.55555555555556,0.056,57.21020468235005
237,mbpp,test,237,claude_3_haiku_0_shot,"def harmonic_sum(n):
    if n < 2:
        return 1.0
    return 1 / n + harmonic_sum(n - 1)",passed,True,True,3.2646366666237254e-05,4,4,4,0,0,0,0,2,4,5,4,8,9,12,19.60964047443681,38.03910001730775,3.2,121.72512005538482,6.762506669743601,0.012679700005769252,75.5328862815304
238,mbpp,test,238,claude_3_haiku_0_shot,"def intersection_array(array_nums1, array_nums2):
    return list(set(filter(lambda x: x in array_nums1, array_nums2)))",failed: ,True,False,,2,3,2,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,84.71624627594792
239,mbpp,test,239,claude_3_haiku_0_shot,"def count_occurrences(tup, element):
    """"""
    Count the occurrences of an element in a tuple.

    Args:
        tup (tuple): The input tuple.
        element: The element to count the occurrences of.

    Returns:
        int: The number of occurrences of the element in the tuple.
    """"""
    return tup.count(element)",failed: name 'count_X' is not defined,True,False,,12,3,2,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
240,mbpp,test,240,claude_3_haiku_0_shot,"def insert_element(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result",passed,True,True,5.042643333202553e-05,6,6,6,0,0,0,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
241,mbpp,test,241,claude_3_haiku_0_shot,"def complex_to_polar(complex_num):
    """"""
    Converts a complex number to its polar coordinates.

    Args:
        complex_num (complex): The complex number to be converted.

    Returns:
        tuple: A tuple containing the magnitude (float) and angle (float) of the complex number in polar coordinates.
    """"""
    magnitude, angle = cmath.polar(complex_num)
    return magnitude, angle",failed: name 'convert' is not defined,True,False,,12,4,3,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
242,mbpp,test,242,claude_3_haiku_0_shot,"def count_integers(lst):
    """"""
    Count the number of integers in a given list.

    Args:
        lst (list): The input list.

    Returns:
        int: The count of integers in the list.
    """"""
    return sum(1 for item in lst if isinstance(item, int))",failed: name 'count_integer' is not defined,True,False,,11,3,2,0,7,2,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
243,mbpp,test,243,claude_3_haiku_0_shot,"def find_words_with_ae(text):
    """"""
    Find all words starting with 'a' or 'e' in the given text.
    
    Args:
        text (str): The input text.
    
    Returns:
        list: A list of words starting with 'a' or 'e'.
    """"""
    return re.findall(r'\b[ae]\w+\b', text)",failed: name 'words_ae' is not defined,True,False,,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
244,mbpp,test,244,claude_3_haiku_0_shot,"from itertools import product

def generate_color_combinations(colors, num_colors):
    """"""
    Generate all combinations of the given colors with repetitions.

    Args:
        colors (list): A list of colors.
        num_colors (int): The number of colors to choose from the given list.

    Returns:
        list: A list of all possible combinations of the given colors with repetitions.
    """"""
    return list(product(colors, repeat=num_colors))",failed: name 'combinations_colors' is not defined,True,False,,14,4,3,0,8,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
245,mbpp,test,245,claude_3_haiku_0_shot,"def count_prime_numbers(n):
    if n <= 2:
        return 0

    primes = [True] * n
    primes[0] = primes[1] = False

    for i in range(2, int(n ** 0.5) + 1):
        if primes[i]:
            for j in range(i * i, n, i):
                primes[j] = False

    return sum(primes)",failed: name 'count_Primes_nums' is not defined,True,False,,13,10,10,0,0,3,0,5,4,7,5,10,11,15,27.651484454403228,51.89147427955947,2.857142857142857,148.26135508445563,8.236741949136423,0.01729715809318649,65.50439653189305
246,mbpp,test,246,claude_3_haiku_0_shot,"def swap_numbers(a, b):
    """"""
    Swaps the values of two input numbers.

    Args:
        a (int): The first number to be swapped.
        b (int): The second number to be swapped.

    Returns:
        tuple: A tuple containing the swapped values of a and b.
    """"""
    return b, a",passed,True,True,3.222629999678854e-05,12,3,2,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
247,mbpp,test,247,claude_3_haiku_0_shot,"def count_odd(array_nums):
    return sum(1 for num in array_nums if num % 2 != 0)",passed,True,True,5.5832366668558583e-05,2,2,2,0,0,0,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,84.69319837885878
248,mbpp,test,248,claude_3_haiku_0_shot,"def maximize_elements(tuple1, tuple2):
    """"""
    Maximizes the elements of two tuples element-wise.

    Args:
        tuple1 (tuple): The first tuple.
        tuple2 (tuple): The second tuple.

    Returns:
        tuple: A new tuple with the maximized elements.
    """"""
    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))",failed: ,True,False,,12,3,2,0,8,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
249,mbpp,test,249,claude_3_haiku_0_shot,"def is_newman_prime(n):
    """"""
    Check if a number is a Newman-Shanks-Williams prime.
    """"""
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False

    i = 3
    while i * i <= n:
        if n % i == 0:
            return False
        i += 2

    return True

def nth_newman_prime(n):
    """"""
    Find the nth Newman-Shanks-Williams prime number.
    """"""
    if n <= 0:
        return 1

    count = 0
    num = 2
    while count < n:
        if is_newman_prime(num):
            count += 1
        num += 1

    return num - 1",failed: name 'newman_prime' is not defined,True,False,,34,25,23,0,6,5,0,6,7,12,14,28,19,42,62.67103446305711,178.41295556463058,8.166666666666666,1457.0391371111496,80.9466187283972,0.059470985188210194,78.01379580714176
250,mbpp,test,250,claude_3_haiku_0_shot,"def divide_tuples(tuple1, tuple2):
    """"""
    Performs mathematical division operation across the given tuples.
    
    Args:
        tuple1 (tuple): The first tuple of numbers.
        tuple2 (tuple): The second tuple of numbers.
    
    Returns:
        tuple: The result of the division operation.
    """"""
    if len(tuple1) != len(tuple2):
        raise ValueError(""Tuples must have the same length."")
    
    result = tuple(a // b for a, b in zip(tuple1, tuple2))
    return result",failed: name 'division_elements' is not defined,True,False,,16,6,5,0,8,3,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,88.82910870529545
251,mbpp,test,251,claude_3_haiku_0_shot,"def split_list(lst, length):
    """"""
    Splits a given list into two parts where the length of the first part is specified.
    
    Args:
        lst (list): The input list to be split.
        length (int): The length of the first part of the split list.
    
    Returns:
        tuple: A tuple containing the two parts of the split list.
    """"""
    if length < 0 or length > len(lst):
        raise ValueError(""Length must be between 0 and the length of the input list."")
    
    return lst[:length], lst[length:]",failed: name 'split_two_parts' is not defined,True,False,,15,6,4,0,8,3,0,3,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,78.73001497982428
252,mbpp,test,252,claude_3_haiku_0_shot,"def merge_dicts(dict1: dict, dict2: dict) -> dict:
    """"""
    Merge two dictionaries into a new dictionary.

    Args:
        dict1 (dict): The first dictionary to be merged.
        dict2 (dict): The second dictionary to be merged.

    Returns:
        dict: A new dictionary containing the merged contents of dict1 and dict2.
    """"""
    merged_dict = dict1.copy()
    merged_dict.update(dict2)
    return merged_dict",failed: name 'merge_dict' is not defined,True,False,,14,5,4,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
253,mbpp,test,253,claude_3_haiku_0_shot,"def calculate_dog_age(human_age):
    """"""
    Calculates a dog's age in dog years.

    Args:
        human_age (int): The age of the dog in human years.

    Returns:
        float: The age of the dog in dog years.
    """"""
    if human_age < 0:
        raise ValueError(""Human age cannot be negative."")
    elif human_age <= 2:
        dog_age = human_age * 10.5
    else:
        dog_age = 21 + (human_age - 2) * 4
    return dog_age",failed: name 'dog_age' is not defined,True,False,,17,9,8,0,7,2,0,3,5,8,6,12,13,18,35.60964047443681,66.60791492653966,3.75,249.77968097452373,13.876648943029096,0.022202638308846556,93.30017425861327
254,mbpp,test,254,claude_3_haiku_0_shot,"def split_list(lst, n):
    """"""
    Splits a list into smaller lists, where each smaller list contains every nth element.

    Args:
        lst (list): The input list to be split.
        n (int): The step size for splitting the list.

    Returns:
        list: A list of smaller lists, where each smaller list contains every nth element.
    """"""
    return [lst[i::n] for i in range(n)]",failed: name 'list_split' is not defined,True,False,,12,4,2,0,8,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
255,mbpp,test,255,claude_3_haiku_0_shot,"def calculate_lateral_surface_area(side_length):
    """"""
    Calculates the lateral surface area of a cube.

    Args:
        side_length (float): The length of one side of the cube.

    Returns:
        float: The lateral surface area of the cube.
    """"""
    return 4 * (side_length ** 2)",failed: name 'lateralsurface_cube' is not defined,True,False,,11,3,2,0,7,2,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,61.515062853972545
256,mbpp,test,256,claude_3_haiku_0_shot,"def sum_of_squares_odd_numbers(n):
    """"""
    Calculates the sum of squares of the first n odd natural numbers.

    Args:
        n (int): The number of odd natural numbers to consider.

    Returns:
        int: The sum of squares of the first n odd natural numbers.
    """"""
    return n ** 2 * n",failed: name 'square_Sum' is not defined,True,False,,11,3,2,0,7,2,0,1,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,61.84139504366193
257,mbpp,test,257,claude_3_haiku_0_shot,"def get_nth_star_number(n: int) -> int:
    """"""
    Calculates the n-th star number.

    Args:
        n (int): The index of the star number to calculate.

    Returns:
        int: The n-th star number.
    """"""
    return 6 * n * (n - 1) + 1",failed: name 'find_star_num' is not defined,True,False,,11,3,2,0,7,2,0,1,3,6,4,8,9,12,20.264662506490406,38.03910001730775,2.0,76.0782000346155,4.226566668589751,0.012679700005769252,58.78690533270914
258,mbpp,test,258,claude_3_haiku_0_shot,"def get_ascii_value(character):
    """"""
    Returns the ASCII value of the given character.
    """"""
    return ord(character)",failed: name 'ascii_value' is not defined,True,False,,5,3,2,0,3,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
259,mbpp,test,259,claude_3_haiku_0_shot,"def find_sum_of_even_at_even_index(numbers):
    total = 0
    for i, num in enumerate(numbers):
        if i % 2 == 0 and num % 2 == 0:
            total += num
    return total",failed: name 'sum_even_and_even_index' is not defined,True,False,,6,6,6,0,0,0,0,4,4,9,6,12,13,18,36.52932501298081,66.60791492653966,2.6666666666666665,177.62110647077242,9.867839248376246,0.022202638308846556,69.71907301153837
260,mbpp,test,260,claude_3_haiku_0_shot,"def sum_of_fifth_power_even_numbers(n):
    return sum([(2 * i) ** 5 for i in range(1, n + 1)])",failed: name 'even_Power_Sum' is not defined,True,False,,2,2,2,0,0,0,0,2,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,82.97436645803353
261,mbpp,test,261,claude_3_haiku_0_shot,"def extract_last_elements(records):
    """"""
    Extracts the last element from each tuple in the given list of tuples.
    
    Args:
        records (list): A list of tuples.
    
    Returns:
        list: A list containing the last element from each tuple in the input list.
    """"""
    return [record[-1] for record in records]",failed: name 'rear_extract' is not defined,True,False,,11,3,2,0,7,2,0,2,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,67.60937929149806
262,mbpp,test,262,claude_3_haiku_0_shot,"def subtract_elements(tuple1, tuple2):
    """"""
    Subtracts the elements of two tuples with corresponding indices.

    Args:
        tuple1 (tuple): The first tuple.
        tuple2 (tuple): The second tuple.

    Returns:
        tuple: A new tuple containing the differences of the corresponding elements.
    """"""
    if len(tuple1) != len(tuple2):
        raise ValueError(""Tuples must have the same length."")

    result = tuple(a - b for a, b in zip(tuple1, tuple2))
    return result",failed: name 'substract_elements' is not defined,True,False,,16,6,5,0,8,3,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,88.82910870529545
263,mbpp,test,263,claude_3_haiku_0_shot,"def binomial_coefficient(n, k):
    """"""
    Calculates the binomial coefficient C(n, k).
    """"""
    return math.comb(n, k)

def sum_even_binomial_coefficients(n):
    """"""
    Calculates the sum of even index binomial coefficients.
    """"""
    total = 0
    for i in range(0, n, 2):
        total += binomial_coefficient(n, i)
    return total",failed: name 'even_binomial_Coeff_Sum' is not defined,True,False,,14,9,7,0,6,1,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
264,mbpp,test,264,claude_3_haiku_0_shot,"def get_position(arr, n, m):
    """"""
    Find the position of the last removed element from the given array.

    Args:
        arr (list): The input array.
        n (int): The length of the array.
        m (int): The divisor.

    Returns:
        int: The position of the last removed element.
    """"""
    # Update the array elements
    arr = [(elem // m) + (1 if elem % m != 0 else 0) for elem in arr]

    # Find the position of the last removed element
    last_removed_pos = -1
    max_value = -1
    for i in range(n - 1, -1, -1):
        if arr[i] > max_value:
            max_value = arr[i]
            last_removed_pos = i

    return last_removed_pos + 1",failed: name 'get_Position' is not defined,True,False,,24,10,9,2,9,4,2,5,7,11,11,18,18,29,57.705232259413506,120.92782504182705,5.7272727272727275,692.586634330464,38.47703524058133,0.04030927501394235,84.91479290027146
265,mbpp,test,265,claude_3_haiku_0_shot,"def calculate_cylinder_volume(radius, height):
    """"""
    Calculates the volume of a cylinder.

    Args:
        radius (float): The radius of the cylinder.
        height (float): The height of the cylinder.

    Returns:
        float: The volume of the cylinder.
    """"""
    return 3.14159 * radius ** 2 * height",failed: name 'volume_cylinder' is not defined,True,False,,12,3,2,0,8,2,0,1,2,6,3,6,8,9,17.509775004326936,27.0,1.0,27.0,1.5,0.009,54.79031218698052
266,mbpp,test,266,claude_3_haiku_0_shot,"def filter_dictionary(dictionary, threshold):
    """"""
    Filters a dictionary based on the values.
    
    Args:
        dictionary (dict): The dictionary to be filtered.
        threshold (int): The minimum value to be included in the filtered dictionary.
    
    Returns:
        dict: The filtered dictionary.
    """"""
    return {key: value for key, value in dictionary.items() if value >= threshold}",failed: name 'dict_filter' is not defined,True,False,,12,4,2,0,8,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,57.07698022078051
267,mbpp,test,267,claude_3_haiku_0_shot,"def count_first_elements(test_tuple):
    for index, element in enumerate(test_tuple):
        if isinstance(element, tuple):
            return index
    return len(test_tuple)",passed,True,True,5.5502966666646596e-05,5,5,5,0,0,0,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
268,mbpp,test,268,claude_3_haiku_0_shot,"def nth_decagonal_number(n):
    """"""
    Calculates the nth decagonal number.

    Args:
        n (int): The position of the decagonal number to be calculated.

    Returns:
        int: The nth decagonal number.
    """"""
    return (5 * n**2 - 3 * n) // 2",failed: name 'is_num_decagonal' is not defined,True,False,,11,3,2,0,7,2,0,1,4,8,5,10,12,15,32.0,53.77443751081735,2.5,134.43609377704337,7.468671876502409,0.017924812503605784,57.73418316322667
269,mbpp,test,269,claude_3_haiku_0_shot,"def sequential_search(data_list, target):
    for index, element in enumerate(data_list):
        if element == target:
            return True, index
    return False, -1",passed,True,True,7.618579999946936e-05,5,5,5,0,0,0,0,3,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,76.89330965566353
270,mbpp,test,270,claude_3_haiku_0_shot,"def is_unique(lst):
    """"""
    Checks if all elements in the given list are unique.
    
    Args:
        lst (list): The list to check.
    
    Returns:
        bool: True if all elements are unique, False otherwise.
    """"""
    return len(set(lst)) == len(lst)",failed: name 'all_unique' is not defined,True,False,,11,3,2,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,65.11035329571214
271,mbpp,test,271,claude_3_haiku_0_shot,"def subtract_lists(list1, list2):
    """"""
    Subtracts two lists element-wise using map and lambda.
    
    Args:
        list1 (list): The first list.
        list2 (list): The second list.
    
    Returns:
        list: The result of subtracting the second list from the first list.
    """"""
    return list(map(lambda x, y: x - y, list1, list2))",failed: name 'sub_list' is not defined,True,False,,12,4,2,0,8,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,57.34598606873373
272,mbpp,test,272,claude_3_haiku_0_shot,"def validate(n):
    digit_counts = [0] * 10
    while n:
        digit = n % 10
        digit_counts[digit] += 1
        if digit_counts[digit] > digit:
            return False
        n //= 10
    return True",passed,True,True,2.8834266656000786e-05,9,9,9,0,0,0,0,3,5,7,5,10,12,15,31.26112492884004,53.77443751081735,3.5714285714285716,192.0515625386334,10.6695312521463,0.017924812503605784,66.66316440286398
273,mbpp,test,273,claude_3_haiku_0_shot,"def are_all_equal(lst, element):
    return all(item == element for item in lst)",failed: name 'check_element' is not defined,True,False,,2,2,2,0,0,0,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.42299174457497
274,mbpp,test,274,claude_3_haiku_0_shot,"import re

def text_match_two_three(text):
    pattern = r'ab{2,3}'
    if re.search(pattern, text):
        return 'Found a match!'
    else:
        return 'Not matched!'",passed,True,True,3.418056666646407e-05,8,7,7,0,0,1,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
275,mbpp,test,275,claude_3_haiku_0_shot,"def max_sub_array_sum_repeated(arr, n, k):
    max_so_far = float('-inf')
    max_ending_here = 0

    for i in range(n * k):
        max_ending_here = max_ending_here + arr[i % n]
        max_so_far = max(max_so_far, max_ending_here)
        max_ending_here = max(max_ending_here, 0)

    return max_so_far",passed,True,True,6.42369999998967e-05,10,8,8,0,0,2,0,2,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,70.00859375530068
276,mbpp,test,276,claude_3_haiku_0_shot,"def sum_of_squares_even_numbers(n):
    """"""
    Calculates the sum of squares of the first n even natural numbers.

    Args:
        n (int): The number of even natural numbers to consider.

    Returns:
        int: The sum of squares of the first n even natural numbers.
    """"""
    return n * (n + 1) * (2 * n + 1) // 3",failed: name 'square_Sum' is not defined,True,False,,11,3,2,0,7,2,0,1,3,9,6,12,12,18,33.28421251514428,64.52932501298082,2.0,129.05865002596164,7.169925001442313,0.02150977500432694,57.17975503730353
277,mbpp,test,277,claude_3_haiku_0_shot,"def count_self_inverse_elements(arr, p):
    """"""
    Count the number of elements in the given array that have a modular inverse under the given prime number p equal to themselves.
    
    Args:
        arr (list): The input array.
        p (int): The prime number.
    
    Returns:
        int: The count of elements with self-inverse modular inverse.
    """"""
    return sum(1 for x in arr if (x * x) % p == 1)",failed: name 'modular_inverse' is not defined,True,False,,12,3,2,0,8,2,0,3,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,54.5213063390273
278,mbpp,test,278,claude_3_haiku_0_shot,"def calculate_odd_days(year):
    """"""
    Calculates the number of odd days in a given year.

    Args:
        year (int): The year for which to calculate the odd days.

    Returns:
        int: The number of odd days in the given year.
    """"""
    century_count = year // 100
    four_century_count = year // 400
    leap_year_count = year >> 2
    odd_day_count = year - leap_year_count

    if century_count:
        odd_day_count += century_count
        leap_year_count -= century_count

    if four_century_count:
        odd_day_count -= four_century_count
        leap_year_count += four_century_count

    total_days = odd_day_count + leap_year_count * 2
    odd_days = total_days % 7

    return odd_days",failed: name 'odd_Days' is not defined,True,False,,27,15,14,0,7,6,0,3,6,11,11,22,17,33,53.563522809337215,134.8862737612612,6.0,809.3176425675672,44.962091253753734,0.044962091253753736,88.10405485918886
279,mbpp,test,279,claude_3_haiku_0_shot,"def find_max_length_list(list_of_lists):
    """"""
    Find the list with the maximum length from a given list of lists.

    Args:
        list_of_lists (list): A list of lists.

    Returns:
        tuple: A tuple containing the maximum length and the list with the maximum length.
    """"""
    max_length = max(len(lst) for lst in list_of_lists)
    max_list = max(list_of_lists, key=len)
    return max_length, max_list",failed: name 'max_length' is not defined,True,False,,13,5,4,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
280,mbpp,test,280,claude_3_haiku_0_shot,"def count_no_of_ways(n, k):
    if n == 1:
        return k
    if n == 2:
        return k * k

    dp = [0] * (n + 1)
    dp[1] = k
    dp[2] = k * k

    for i in range(3, n + 1):
        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % 1000000007

    return dp[n]",passed,True,True,3.083686666703518e-05,14,11,11,0,0,3,0,4,5,13,13,26,18,39,59.715356810271004,162.62707505625016,5.0,813.1353752812508,45.17418751562505,0.05420902501875005,61.26228430339115
281,mbpp,test,281,claude_3_haiku_0_shot,"def find_quotient(dividend, divisor):
    """"""
    Calculates the quotient of two numbers.

    Args:
        dividend (int or float): The number to be divided.
        divisor (int or float): The number to divide by.

    Returns:
        int or float: The quotient of the division.
    """"""
    return dividend // divisor",failed: name 'find' is not defined,True,False,,12,3,2,0,8,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,60.07139517617164
282,mbpp,test,282,claude_3_haiku_0_shot,"def find_third_side(width, height):
    """"""
    Calculates the third side of a right-angled triangle.

    Args:
        width (float): The length of one side of the triangle.
        height (float): The length of the other side of the triangle.

    Returns:
        float: The length of the third side of the triangle.
    """"""
    return math.sqrt(width ** 2 + height ** 2)",failed: name 'otherside_rightangle' is not defined,True,False,,12,3,2,0,8,2,0,1,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,54.992137741976116
283,mbpp,test,283,claude_3_haiku_0_shot,"def find_max_value(lst):
    """"""
    Find the maximum value in a given heterogeneous list.
    
    Args:
        lst (list): A heterogeneous list containing different data types.
    
    Returns:
        int: The maximum value in the list, if any integers are present. Otherwise, returns None.
    """"""
    try:
        return max(filter(lambda x: isinstance(x, int), lst))
    except ValueError:
        return None",failed: name 'max_val' is not defined,True,False,,14,7,5,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
284,mbpp,test,284,claude_3_haiku_0_shot,"def sum_of_divisors(n):
    """"""
    Returns the sum of all divisors of the given number.
    """"""
    divisors = [1]
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            divisors.append(i)
            if i != n // i:
                divisors.append(n // i)
    return sum(set(divisors))",failed: name 'sum_div' is not defined,True,False,,11,9,8,0,3,0,0,4,6,8,7,14,14,21,39.50977500432694,79.95445336320968,5.25,419.7608801568508,23.320048897602824,0.026651484454403226,93.23968603648298
285,mbpp,test,285,claude_3_haiku_0_shot,"def count_inversions(arr):
    """"""
    Counts the number of inversions in the given array.
    An inversion is a pair of elements (a[i], a[j]) where i < j and a[i] > a[j].
    """"""
    n = len(arr)
    return _merge_sort_and_count(arr, 0, n - 1)

def _merge_sort_and_count(arr, left, right):
    """"""
    Recursive helper function to count inversions using merge sort.
    """"""
    if left >= right:
        return 0

    mid = (left + right) // 2
    left_count = _merge_sort_and_count(arr, left, mid)
    right_count = _merge_sort_and_count(arr, mid + 1, right)

    return left_count + right_count + _merge_and_count(arr, left, mid, right)

def _merge_and_count(arr, left, mid, right):
    """"""
    Merges two sorted subarrays and counts the number of inversions.
    """"""
    i = j = 0
    count = 0
    temp = [0] * (right - left + 1)

    for k in range(left, right + 1):
        if i <= mid - left and j <= right - mid - 1:
            if arr[left + i] <= arr[mid + 1 + j]:
                temp[k - left] = arr[left + i]
                i += 1
            else:
                temp[k - left] = arr[mid + 1 + j]
                j += 1
                count += mid - left - i + 1
        elif i <= mid - left:
            temp[k - left] = arr[left + i]
            i += 1
        else:
            temp[k - left] = arr[mid + 1 + j]
            j += 1

    for k in range(left, right + 1):
        arr[k] = temp[k - left]

    return count",failed: name 'get_Inv_Count' is not defined,True,False,,49,35,32,0,10,7,0,1,7,37,43,86,44,129,212.4012589826744,704.2666788042113,8.135135135135135,5729.30460324507,318.29470018028167,0.23475555960140376,72.08937704887082
286,mbpp,test,286,claude_3_haiku_0_shot,"def flatten_list(nested_list):
    result = []
    stack = [nested_list]

    while stack:
        item = stack.pop()
        if isinstance(item, list):
            stack.extend(item[::-1])
        else:
            result.append(item)

    return result[::-1]",failed: ,True,False,,12,12,10,0,0,2,0,3,1,1,2,2,2,4,0.0,4.0,1.0,4.0,0.2222222222222222,0.0013333333333333333,71.8396383600064
287,mbpp,test,287,claude_3_haiku_0_shot,"def find_common_elements(list1, list2):
    """"""
    Find the common elements between a list and the nested elements of another list.

    Args:
        list1 (list): The first list.
        list2 (list): The second list, which may contain nested lists.

    Returns:
        list: A list of lists, where each inner list contains the common elements between list1 and the corresponding nested list in list2.
    """"""
    result = []
    for nested_list in list2:
        common_elements = [element for element in nested_list if element in list1]
        result.append(common_elements)
    return result",failed: name 'intersection_nested_lists' is not defined,True,False,,16,7,6,0,8,2,0,4,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,96.19445160929479
288,mbpp,test,288,claude_3_haiku_0_shot,"def calculate_max_aggregate(student_data):
    """"""
    Calculates the maximum aggregate from the list of tuples.

    Args:
        student_data (list): A list of tuples, where each tuple contains a student's name and their marks.

    Returns:
        tuple: A tuple containing the student's name and their maximum aggregate.
    """"""
    aggregates = {}
    for name, marks in student_data:
        if name in aggregates:
            aggregates[name] += marks
        else:
            aggregates[name] = marks
    return max(aggregates.items(), key=lambda x: x[1])",failed: name 'max_aggregate' is not defined,True,False,,17,10,8,0,7,2,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,96.73373855571135
289,mbpp,test,289,claude_3_haiku_0_shot,"def count_binary_seq(n):
    """"""
    Find the count of all binary sequences of length 2n such that the sum of the first n bits is the same as the sum of the last n bits.
    """"""
    total_count = 0
    for i in range(n + 1):
        combination_count = factorial(n) // (factorial(i) * factorial(n - i))
        total_count += combination_count ** 2
    return total_count

def factorial(n):
    """"""
    Calculate the factorial of a given number.
    """"""
    if n == 0:
        return 1
    return n * factorial(n - 1)",passed,True,True,3.304456666721005e-05,17,12,10,0,6,1,0,2,6,15,9,18,21,27,74.11313393845472,118.59257041502654,3.6,426.93325349409554,23.718514083005307,0.03953085680500885,90.75533141743342
290,mbpp,test,290,claude_3_haiku_0_shot,"def get_dict_depth(dictionary):
    """"""
    Recursively calculates the depth of a dictionary.

    Args:
        dictionary (dict): The dictionary to calculate the depth of.

    Returns:
        int: The depth of the dictionary.
    """"""
    if not isinstance(dictionary, dict):
        return 0
    return 1 + (max(map(get_dict_depth, dictionary.values())) if dictionary else 0)",failed: name 'dict_depth' is not defined,True,False,,13,5,4,0,7,2,0,3,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,88.29301253415619
291,mbpp,test,291,claude_3_haiku_0_shot,"def find_most_significant_set_bit(n):
    """"""
    Find the most significant bit number which is also a set bit.
    
    Args:
        n (int): The input number.
    
    Returns:
        int: The most significant set bit number.
    """"""
    if n == 0:
        return 0
    
    msb = 0
    while n > 0:
        n >>= 1
        msb += 1
    
    return 1 << (msb - 1)",failed: name 'set_Bit_Number' is not defined,True,False,,19,9,8,0,7,4,0,3,6,5,6,12,11,18,27.11941547876375,62.26976913547136,7.2,448.3423377753938,24.907907654188545,0.020756589711823786,93.50497322322555
292,mbpp,test,292,claude_3_haiku_0_shot,"def count_inversions(arr):
    """"""
    Counts the number of inversions in the given array.
    
    An inversion is a pair of elements (a[i], a[j]) in the array where i < j and a[i] > a[j].
    
    Args:
        arr (list): The input array.
        
    Returns:
        int: The count of inversions in the array.
    """"""
    n = len(arr)
    count = 0
    
    for i in range(n):
        for j in range(i+1, n):
            if arr[i] > arr[j]:
                count += 1
    
    return count

def check_inversion_count(a, b):
    """"""
    Checks whether the count of inversions in two arrays is the same.
    
    Args:
        a (list): The first input array.
        b (list): The second input array.
        
    Returns:
        bool: True if the inversion counts are the same, False otherwise.
    """"""
    return count_inversions(a) == count_inversions(b)",failed: name 'solve' is not defined,True,False,,34,12,10,0,16,8,0,4,3,7,4,8,10,12,24.406371956566698,39.863137138648355,1.7142857142857142,68.33680652339717,3.796489251299843,0.013287712379549451,79.25736112681456
293,mbpp,test,293,claude_3_haiku_0_shot,"def find_element(arr, ranges, rotations, index):
    for _ in range(rotations):
        for left, right in ranges:
            if left <= index <= right:
                if index == left:
                    index = right
                else:
                    index -= 1
    return arr[index]",failed: name 'find_Element' is not defined,True,False,,9,9,9,0,0,0,0,5,3,4,4,7,7,11,12.75488750216347,30.880904142633646,2.625,81.06237337441333,4.503465187467407,0.010293634714211216,68.08084457694153
294,mbpp,test,294,claude_3_haiku_0_shot,"def find_words_starting_with_p(words):
    """"""
    Find two words from a list of words starting with the letter 'p'.
    
    Args:
        words (list): A list of words.
    
    Returns:
        tuple: A tuple of two words starting with 'p', if found. Otherwise, returns None.
    """"""
    for word in words:
        if word.lower().startswith('p'):
            for other_word in words:
                if other_word.lower().startswith('p') and other_word != word:
                    return (word, other_word)
    return None",failed: name 'start_withp' is not defined,True,False,,16,8,7,0,7,2,0,6,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,96.79868626699877
295,mbpp,test,295,claude_3_haiku_0_shot,"def max_sum_increasing_subseq(arr, n, i, k):
    dp = [[0] * n for _ in range(n)]

    # Initialize the first row of the dp table
    for j in range(n):
        if arr[j] > arr[0]:
            dp[0][j] = arr[j] + arr[0]
        else:
            dp[0][j] = arr[j]

    # Fill the rest of the dp table
    for row in range(1, n):
        for col in range(n):
            if arr[col] > arr[row] and col > row:
                dp[row][col] = max(dp[row - 1][row] + arr[col], dp[row - 1][col])
            else:
                dp[row][col] = dp[row - 1][col]

    return dp[i][k]",passed,True,True,9.598476666686414e-05,19,14,14,2,0,3,2,8,5,15,10,20,20,30,70.2129994085646,129.65784284662087,3.3333333333333335,432.19280948873626,24.010711638263125,0.043219280948873624,79.75809670606516
296,mbpp,test,296,claude_3_haiku_0_shot,"def get_colon(tup, index):
    """"""
    Retrieves the colon (list) at the specified index of the given tuple.
    
    Args:
        tup (tuple): The input tuple.
        index (int): The index of the colon (list) to retrieve.
    
    Returns:
        list: The colon (list) at the specified index of the tuple.
    """"""
    return tup[index].copy()",failed: name 'colon_tuplex' is not defined,True,False,,12,3,2,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
297,mbpp,test,297,claude_3_haiku_0_shot,"def find_largest_products(list1, list2, n):
    """"""
    Find the specified number of largest products from two given lists.

    Args:
        list1 (list): The first list of numbers.
        list2 (list): The second list of numbers.
        n (int): The number of largest products to return.

    Returns:
        list: The n largest products from the two lists.
    """"""
    products = [x * y for x in list1 for y in list2]
    products.sort(reverse=True)
    return products[:n]",failed: name 'large_product' is not defined,True,False,,15,6,4,0,9,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,78.85919161419268
298,mbpp,test,298,claude_3_haiku_0_shot,"def find_maximum(num1, num2):
    """"""
    Returns the maximum of two numbers.

    Args:
        num1 (int or float): The first number.
        num2 (int or float): The second number.

    Returns:
        int or float: The maximum of the two numbers.
    """"""
    return max(num1, num2)",failed: name 'maximum' is not defined,True,False,,12,3,2,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
299,mbpp,test,299,claude_3_haiku_0_shot,"def convert_to_tuple(input_string):
    """"""
    Converts a given string to a tuple, excluding whitespace characters.
    
    Args:
        input_string (str): The input string to be converted.
    
    Returns:
        tuple: A tuple containing the non-whitespace characters from the input string.
    """"""
    return tuple(char for char in input_string if not char.isspace())",failed: name 'string_to_tuple' is not defined,True,False,,11,3,2,0,7,2,0,3,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,67.47487636752147
300,mbpp,test,300,claude_3_haiku_0_shot,"def set_left_most_unset_bit(n):
    if n == 0:
        return 1
    
    return n | (n & -n)",failed: ,True,False,,5,4,4,0,0,1,0,2,4,4,4,7,8,11,16.0,33.0,3.5,115.5,6.416666666666667,0.011,75.96502457908308
301,mbpp,test,301,claude_3_haiku_0_shot,"def calculate_cone_volume(radius, height):
    """"""
    Calculates the volume of a cone.

    Args:
        radius (float): The radius of the cone.
        height (float): The height of the cone.

    Returns:
        float: The volume of the cone.
    """"""
    return (1/3) * math.pi * radius ** 2 * height",failed: name 'volume_cone' is not defined,True,False,,12,3,2,0,8,2,0,1,3,10,5,10,13,15,37.974168451037094,55.506595772116384,1.5,83.25989365817458,4.625549647676365,0.01850219859070546,52.59881630965664
302,mbpp,test,302,claude_3_haiku_0_shot,"def print_positive_numbers(numbers):
    """"""
    Prints all positive numbers in the given list.
    
    Args:
        numbers (list): A list of numbers.
    """"""
    for num in numbers:
        if num >= 0:
            print(num)",failed: name 'pos_nos' is not defined,True,False,,10,5,4,0,5,1,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
303,mbpp,test,303,claude_3_haiku_0_shot,"def max_sum_rectangular_grid(grid, n):
    """"""
    Find the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.
    """"""
    include = max(grid[0][0], grid[1][0])
    exclude = 0

    for i in range(1, n):
        exclude_new = max(exclude, include)
        include = exclude + max(grid[0][i], grid[1][i])
        exclude = exclude_new

    return max(exclude, include)",passed,True,True,8.166876666943305e-05,13,9,8,0,3,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
304,mbpp,test,304,claude_3_haiku_0_shot,"def find_max_even_word_length(text):
    max_length = 0
    max_word = """"
    current_length = 0
    
    for char in text + "" "":
        if char == "" "":
            if current_length % 2 == 0 and current_length > max_length:
                max_length = current_length
                max_word = text[len(text) - current_length:]
            current_length = 0
        else:
            current_length += 1
    
    return max_word if max_length > 0 else ""-1""",failed: name 'find_Max_Len_Even' is not defined,True,False,,15,14,13,0,0,2,0,6,6,12,9,18,18,27,58.52932501298082,112.58797503894243,4.5,506.64588767524094,28.146993759735608,0.03752932501298081,59.82681268714441
305,mbpp,test,305,claude_3_haiku_0_shot,"def find_last_occurrence(arr, target):
    left, right = 0, len(arr) - 1
    last_index = -1

    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            last_index = mid
            left = mid + 1
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return last_index",passed,True,True,6.962066666649965e-05,15,13,13,0,0,2,0,4,7,10,10,19,17,29,52.87076540327685,118.53642239625987,6.65,788.2672089351281,43.792622718618226,0.03951214079875329,60.641330396105225
306,mbpp,test,306,claude_3_haiku_0_shot,"from itertools import groupby

def modified_encode(data):
    """"""
    Applies modified run-length encoding to the given list.
    
    Args:
        data (list): The input list to be encoded.
    
    Returns:
        list: The modified run-length encoded list.
    """"""
    encoded = []
    for _, group in groupby(data):
        group_list = list(group)
        if len(group_list) > 1:
            encoded.append([len(group_list), group_list[0]])
        else:
            encoded.append(group_list[0])
    return encoded",passed,True,True,8.757386664607718e-05,20,11,10,0,7,3,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
307,mbpp,test,307,claude_3_haiku_0_shot,"def max_volume(s):
    max_value = 0
    for a in range(1, s // 3 + 1):
        for b in range(a, (s - a) // 2 + 1):
            c = s - a - b
            volume = a * b * c
            max_value = max(max_value, volume)
    return max_value",passed,True,True,2.81405333339535e-05,8,8,8,0,0,0,0,3,4,12,9,18,16,27,51.01955000865388,108.0,3.0,324.0,18.0,0.036,65.65845885598874
308,mbpp,test,308,claude_3_haiku_0_shot,"import re

def find_all_five_char_words(text):
    """"""
    Find all 5-character words in the given text using regular expressions.
    
    Args:
        text (str): The input text to search.
    
    Returns:
        list: A list of all 5-character words found in the text.
    """"""
    return re.findall(r'\b\w{5}\b', text)",failed: name 'find_long_word' is not defined,True,False,,13,4,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
309,mbpp,test,309,claude_3_haiku_0_shot,"def sum_difference(n):
    squared_sum = sum(range(1, n+1)) ** 2
    sum_of_squares = sum(num**2 for num in range(1, n+1))
    return squared_sum - sum_of_squares",passed,True,True,3.4591366678190146e-05,4,4,4,0,0,0,0,2,3,7,5,10,10,15,24.406371956566698,49.82892142331044,2.142857142857143,106.77626019280808,5.932014455156004,0.016609640474436815,74.71189146304809
310,mbpp,test,310,claude_3_haiku_0_shot,"def find_demlo(number: str) -> str:
    length = len(number)
    demlo_number = """"
    
    for i in range(1, length + 1):
        demlo_number += str(i)
    
    for i in range(length - 1, 0, -1):
        demlo_number += str(i)
    
    return demlo_number",passed,True,True,3.315613333256806e-05,11,8,8,0,0,3,0,3,3,5,5,9,8,14,16.36452797660028,42.0,2.7,113.4,6.300000000000001,0.014,68.53050585363343
311,mbpp,test,311,claude_3_haiku_0_shot,"def find_min_indices(lst):
    """"""
    Find all index positions of the minimum values in a given list.
    
    Args:
        lst (list): The input list.
    
    Returns:
        list: A list of indices where the minimum value(s) occur.
    """"""
    min_value = min(lst)
    return [i for i, x in enumerate(lst) if x == min_value]",failed: name 'position_min' is not defined,True,False,,12,4,3,0,7,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,81.03301269040966
312,mbpp,test,312,claude_3_haiku_0_shot,"def rearrange_array(arr):
    """"""
    Rearrange the given array in alternating positive and negative items.
    """"""
    n = len(arr)
    out_of_place = -1

    for i in range(n):
        if out_of_place >= 0:
            # If element at out_of_place is positive and element at i is negative
            # OR if element at out_of_place is negative and element at i is positive
            if (arr[out_of_place] >= 0 and arr[i] < 0) or (arr[out_of_place] < 0 and arr[i] >= 0):
                arr = right_rotate(arr, out_of_place, i)
                # Ensure we skip two elements as we have moved one
                if i - out_of_place > 2:
                    out_of_place += 2
                else:
                    out_of_place = -1

        # Find first out_of_place element
        if out_of_place == -1:
            if (arr[i] >= 0 and i % 2 == 0) or (arr[i] < 0 and i % 2 == 1):
                out_of_place = i

    return arr

def right_rotate(arr, out_of_place, cur):
    """"""
    Rotate the elements to the right by one position in the range
    [out_of_place, cur]
    """"""
    temp = arr[cur]
    for i in range(cur, out_of_place, -1):
        arr[i] = arr[i - 1]
    arr[out_of_place] = temp
    return arr",failed: name 're_arrange' is not defined,True,False,,36,23,21,4,7,4,4,13,10,29,26,48,39,74,174.10072980757323,391.1197641958064,8.275862068965518,3236.853220930812,179.82517894060067,0.13037325473193548,79.42670602798216
313,mbpp,test,313,claude_3_haiku_0_shot,"def sum_of_alternates(tuples):
    odd_sum = sum(tuples[::2])
    even_sum = sum(tuples[1::2])
    return (odd_sum, even_sum)",failed: ,True,False,,4,6,4,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
314,mbpp,test,314,claude_3_haiku_0_shot,"def get_min_squares(n):
    if n <= 3:
        return n

    dp = [n] * (n + 1)
    dp[0] = 0
    dp[1] = 1
    dp[2] = 2
    dp[3] = 3

    for i in range(4, n + 1):
        for j in range(1, int(i ** 0.5) + 1):
            dp[i] = min(dp[i], 1 + dp[i - j * j])

    return dp[n]",failed: name 'get_Min_Squares' is not defined,True,False,,15,12,12,0,0,3,0,4,5,11,9,18,16,27,49.663388279447084,108.0,4.090909090909091,441.8181818181818,24.545454545454547,0.036,61.68270753940846
315,mbpp,test,315,claude_3_haiku_0_shot,"from collections import Counter

def most_occurrences(test_list):
    word_counts = Counter()
    for sentence in test_list:
        word_counts.update(sentence.split())
    return str(max(word_counts, key=word_counts.get))",passed,True,True,5.9259500000052866e-05,7,6,6,0,0,1,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
316,mbpp,test,316,claude_3_haiku_0_shot,"def is_isosceles_triangle(a, b, c):
    """"""
    Checks if a triangle with side lengths a, b, and c is isosceles.
    
    Args:
        a (float): Length of the first side.
        b (float): Length of the second side.
        c (float): Length of the third side.
    
    Returns:
        bool: True if the triangle is isosceles, False otherwise.
    """"""
    return a == b or b == c or a == c",failed: name 'check_isosceles' is not defined,True,False,,13,3,2,0,9,2,0,3,2,6,4,9,8,13,17.509775004326936,39.0,1.5,58.5,3.25,0.013,50.26363991980823
317,mbpp,test,317,claude_3_haiku_0_shot,"def rotate_left(lst, n, k):
    """"""
    Rotates a list to the left by k positions.

    Args:
        lst (list): The input list to be rotated.
        n (int): The length of the list.
        k (int): The number of positions to rotate the list to the left.

    Returns:
        list: The rotated list.
    """"""
    return lst[k:] + lst[:k]",failed: ,True,False,,13,4,2,0,9,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,54.20654705106535
318,mbpp,test,318,claude_3_haiku_0_shot,"def count_negative_numbers(numbers):
    """"""
    Counts the number of negative numbers in a given list.
    
    Args:
        numbers (list): A list of numbers.
    
    Returns:
        int: The count of negative numbers in the list.
    """"""
    negative_count = 0
    for number in numbers:
        if number < 0:
            negative_count += 1
    return negative_count",failed: name 'neg_count' is not defined,True,False,,15,7,6,0,7,2,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,95.79254141185018
319,mbpp,test,319,claude_3_haiku_0_shot,"import re

def find_words(text):
    """"""
    Find all words of length 3, 4, and 5 in the given text using regex.
    
    Args:
        text (str): The input text to search for words.
    
    Returns:
        list: A list of words of length 3, 4, and 5 found in the text.
    """"""
    return re.findall(r'\b\w{3,5}\b', text)",failed: name 'find_char' is not defined,True,False,,13,4,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
320,mbpp,test,320,claude_3_haiku_0_shot,"def count_unset_bits(n):
    return bin(n).count('0') - 1",passed,True,True,2.7438500001153444e-05,2,2,2,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.5574946685516
321,mbpp,test,321,claude_3_haiku_0_shot,"def char_frequency(string):
    char_count = {}
    for char in string:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    return char_count",passed,True,True,7.643076666757528e-05,8,8,8,0,0,0,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,71.55988337877561
322,mbpp,test,322,claude_3_haiku_0_shot,"def sort_by_second_element(lst):
    """"""
    Sorts a list of lists based on the second element in each sublist.
    
    Args:
        lst (list): A list of lists.
    
    Returns:
        list: The sorted list.
    """"""
    return sorted(lst, key=lambda x: x[1])",failed: name 'Sort' is not defined,True,False,,11,4,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
323,mbpp,test,323,claude_3_haiku_0_shot,"def is_valid_triangle(a, b, c):
    """"""
    Checks if the given side lengths form a valid triangle.

    Args:
        a (float): Length of the first side.
        b (float): Length of the second side.
        c (float): Length of the third side.

    Returns:
        bool: True if the triangle is valid, False otherwise.
    """"""
    return a + b > c and a + c > b and b + c > a",failed: name 'check_Validity' is not defined,True,False,,13,3,2,0,9,2,0,3,3,9,7,15,12,22,33.28421251514428,78.86917501586544,2.5,197.1729375396636,10.954052085536865,0.026289725005288478,48.122125375882256
324,mbpp,test,324,claude_3_haiku_0_shot,"def arithmetic_progression_sum(first_term, num_terms, common_difference):
    """"""
    Calculates the sum of an arithmetic progression.

    Args:
        first_term (int): The first term of the arithmetic progression.
        num_terms (int): The number of terms in the arithmetic progression.
        common_difference (int): The common difference between consecutive terms.

    Returns:
        float: The sum of the arithmetic progression.
    """"""
    return (num_terms * (2 * first_term + (num_terms - 1) * common_difference)) / 2",failed: name 'ap_sum' is not defined,True,False,,13,3,2,0,9,2,0,1,4,10,6,12,14,18,41.219280948873624,68.53238859703687,2.4,164.4777326328885,9.13765181293825,0.022844129532345624,48.81833405381242
325,mbpp,test,325,claude_3_haiku_0_shot,"def is_month_with_28_days(month_name):
    return month_name.lower() == ""february""",failed: name 'check_monthnum' is not defined,True,False,,2,2,2,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.5574946685516
326,mbpp,test,326,claude_3_haiku_0_shot,"import re

def text_match_word(text):
    pattern = r'\b\w+\S*\b$'
    if re.search(pattern, text):
        return 'Found a match!'
    else:
        return 'Not matched!'",failed: ,True,False,,8,7,7,0,0,1,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
327,mbpp,test,327,claude_3_haiku_0_shot,"def count_substrings_with_equal_ends(s):
    count = 0
    for i in range(len(s)):
        for j in range(i+1, len(s)+1):
            substring = s[i:j]
            if substring[0] == substring[-1]:
                count += 1
    return count",failed: name 'count_Substring_With_Equal_Ends' is not defined,True,False,,8,9,8,0,0,0,0,4,3,6,5,9,9,14,20.264662506490406,44.37895002019238,2.25,99.85263754543286,5.547368752524047,0.014792983340064125,67.11262134714077
328,mbpp,test,328,claude_3_haiku_0_shot,"def find_max_divisor(start, end):
    """"""
    Find the maximum occurring divisor in the given interval [start, end].
    
    Args:
        start (int): The starting value of the interval.
        end (int): The ending value of the interval.
    
    Returns:
        int: The maximum occurring divisor in the given interval.
    """"""
    if start == end:
        return start
    
    divisor_count = [0] * (end - start + 1)
    max_divisor = 2
    max_count = 0
    
    for num in range(start, end + 1):
        for div in range(2, num + 1):
            if num % div == 0:
                divisor_count[num - start] += 1
                if divisor_count[num - start] > max_count:
                    max_divisor = div
                    max_count = divisor_count[num - start]
    
    return max_divisor",failed: name 'find_Divisor' is not defined,True,False,,27,15,14,0,8,5,0,6,6,13,13,26,19,39,63.61549134016113,165.66917302429982,6.0,994.0150381457989,55.22305767476661,0.05522305767476661,87.23808673130735
329,mbpp,test,329,claude_3_haiku_0_shot,"def find_sum_of_three_smallest_positive_numbers(numbers):
    """"""
    Find the sum of the three lowest positive numbers from a given list of numbers.
    
    Args:
        numbers (list): A list of numbers.
    
    Returns:
        int: The sum of the three lowest positive numbers.
    """"""
    positive_numbers = [num for num in numbers if num > 0]
    positive_numbers.sort()
    return sum(positive_numbers[:3])",failed: name 'sum_three_smallest_nums' is not defined,True,False,,13,6,4,0,7,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,89.28028580644579
330,mbpp,test,330,claude_3_haiku_0_shot,"def convert_set_to_tuples(input_set):
    """"""
    Converts a given set into a list of ordered tuples.
    
    Args:
        input_set (set): The input set to be converted.
    
    Returns:
        list: A list of ordered tuples.
    """"""
    return sorted(tuple(item) for item in input_set)",failed: name 'set_to_tuple' is not defined,True,False,,11,3,2,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
331,mbpp,test,331,claude_3_haiku_0_shot,"from heapq import heappop, heappush

class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index

    def __lt__(self, other):
        return self.value < other.value

def find_minimum_range(lists):
    max_value = float('-inf')
    result = (0, float('inf'))
    pq = []

    for i, lst in enumerate(lists):
        heappush(pq, Node(lst[0], i, 0))
        max_value = max(max_value, lst[0])

    while True:
        node = heappop(pq)
        min_value = node.value
        list_num = node.list_num
        index = node.index

        if max_value - min_value < result[1] - result[0]:
            result = (min_value, max_value)

        if index == len(lists[list_num]) - 1:
            return result

        index += 1
        if index < len(lists[list_num]):
            heappush(pq, Node(lists[list_num][index], list_num, index))
            max_value = max(max_value, lists[list_num][index])",passed,True,True,0.00015611493333835824,36,28,28,0,0,8,0,6,4,12,8,16,16,24,51.01955000865388,96.0,2.6666666666666665,256.0,14.222222222222221,0.032,53.4758341166836
332,mbpp,test,332,claude_3_haiku_0_shot,"def count_digits_letters(string):
    digits = 0
    letters = 0
    for char in string:
        if char.isdigit():
            digits += 1
        elif char.isalpha():
            letters += 1
    return letters, digits",failed: name 'dig_let' is not defined,True,False,,9,9,9,0,0,0,0,4,1,3,2,4,4,6,4.754887502163469,12.0,0.6666666666666666,8.0,0.4444444444444444,0.004,71.08973524459394
333,mbpp,test,333,claude_3_haiku_0_shot,"def count_odd_factors(start, end):
    """"""
    Counts the number of elements with odd factors in the given range.
    
    Args:
        start (int): The starting number of the range.
        end (int): The ending number of the range.
    
    Returns:
        int: The number of elements with odd factors in the given range.
    """"""
    count = 0
    for num in range(start, end + 1):
        factors = set()
        for i in range(1, int(num ** 0.5) + 1):
            if num % i == 0:
                factors.add(i)
                factors.add(num // i)
        if len([f for f in factors if f % 2 != 0]) > 0:
            count += 1
    return count",failed: name 'count_Odd_Squares' is not defined,True,False,,21,12,11,0,8,2,0,7,7,13,10,20,20,30,67.75720079023742,129.65784284662087,5.384615384615385,698.1576153279585,38.786534184886584,0.043219280948873624,89.40175227015084
334,mbpp,test,334,claude_3_haiku_0_shot,"def find_consecutive_differences(numbers):
    """"""
    Find the difference between consecutive numbers in a given list.

    Args:
        numbers (list): A list of numbers.

    Returns:
        list: A list of differences between consecutive numbers.
    """"""
    differences = []
    for i in range(len(numbers) - 1):
        differences.append(numbers[i + 1] - numbers[i])
    return differences",failed: name 'diff_consecutivenums' is not defined,True,False,,14,6,5,0,7,2,0,2,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,91.54523304021033
335,mbpp,test,335,claude_3_haiku_0_shot,"def entringer_number(n, k):
    if n == 0 and k == 0:
        return 1
    if k == 0:
        return 0
    return entringer_number(n, k - 1) + entringer_number(n - 1, n - k)",failed: name 'zigzag' is not defined,True,False,,6,6,6,0,0,0,0,4,4,8,8,16,12,24,32.0,86.03910001730776,4.0,344.15640006923104,19.11980000384617,0.028679700005769252,68.94065906910635
336,mbpp,test,336,claude_3_haiku_0_shot,"def count_squares(length, width):
    """"""
    Counts the number of squares in a rectangle.

    Args:
        length (int): The length of the rectangle.
        width (int): The width of the rectangle.

    Returns:
        int: The number of squares in the rectangle.
    """"""
    if width < length:
        length, width = width, length

    return width * (width + 1) * (3 * length - width + 1) // 6",failed: name 'count_Squares' is not defined,True,False,,15,5,4,0,8,3,0,2,5,11,8,16,16,24,49.663388279447084,96.0,3.6363636363636362,349.09090909090907,19.39393939393939,0.032,76.73431341704756
337,mbpp,test,337,claude_3_haiku_0_shot,"def binomial_coefficient(n, r):
    """"""
    Calculates the binomial coefficient (n choose r).
    """"""
    if r > (n - r):
        r = n - r
    result = 1
    for i in range(r):
        result *= (n - i)
        result //= (i + 1)
    return result

def find_ways(m):
    """"""
    Counts the number of sequences of length m/2 having non-negative prefix sums that can be generated by the values +1 and -1.
    """"""
    n = m // 2
    a = binomial_coefficient(2 * n, n)
    b = a // (n + 1)
    return b",passed,True,True,2.7853566666635744e-05,20,15,13,0,6,1,0,3,5,14,11,22,19,33,64.91260938324326,140.1816079436383,3.9285714285714284,550.713459778579,30.595192209921056,0.04672720264787944,87.7618535667799
338,mbpp,test,338,claude_3_haiku_0_shot,"def is_binary_string(string):
    """"""
    Checks if the given string is a binary string.

    Args:
        string (str): The input string to be checked.

    Returns:
        bool: True if the string is a binary string, False otherwise.
    """"""
    return set(string).issubset({'0', '1'})",failed: name 'check' is not defined,True,False,,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
339,mbpp,test,339,claude_3_haiku_0_shot,"def minimize_string_length(s):
    char_counts = [0] * 26
    max_count = 0

    for char in s:
        char_counts[ord(char) - ord('a')] += 1
        max_count = max(max_count, char_counts[ord(char) - ord('a')])

    return len(s) - max_count",failed: name 'minimum_Length' is not defined,True,False,,9,7,7,0,0,2,0,2,3,10,5,10,13,15,37.974168451037094,55.506595772116384,1.5,83.25989365817458,4.625549647676365,0.01850219859070546,69.08213212389333
340,mbpp,test,340,claude_3_haiku_0_shot,"def first_element_k_times(arr, n, k):
    count_map = {}
    for num in arr:
        count_map[num] = count_map.get(num, 0) + 1
        if count_map[num] == k:
            return num
    return -1",failed: name 'first_Element' is not defined,True,False,,7,7,7,0,0,0,0,3,3,4,3,5,7,8,12.75488750216347,22.458839376460833,1.875,42.11032383086406,2.3394624350480036,0.007486279792153611,71.69912126698075
341,mbpp,test,341,claude_3_haiku_0_shot,"def has_unique_characters(string):
    """"""
    Checks if all characters in a given string are unique.
    
    Args:
        string (str): The input string to check.
    
    Returns:
        bool: True if all characters are unique, False otherwise.
    """"""
    return len(set(string)) == len(string)",failed: name 'unique_Characters' is not defined,True,False,,11,3,2,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,65.11035329571214
342,mbpp,test,342,claude_3_haiku_0_shot,"def remove_column(data, column_index):
    """"""
    Removes the specified column from a given nested list.
    
    Args:
        data (list): The nested list to remove the column from.
        column_index (int): The index of the column to remove.
    
    Returns:
        list: The modified nested list with the specified column removed.
    """"""
    return [row[:column_index] + row[column_index+1:] for row in data]",passed,True,True,0.00013670673333336935,12,4,2,0,8,2,0,2,1,4,2,4,5,6,8.0,13.931568569324174,0.5,6.965784284662087,0.3869880158145604,0.004643856189774725,53.942524892706906
343,mbpp,test,343,claude_3_haiku_0_shot,"def find_nth_term_ap(first_term, n, common_difference):
    """"""
    Calculates the n-th term of an arithmetic progression.

    Args:
        first_term (int): The first term of the arithmetic progression.
        n (int): The position of the term to be calculated.
        common_difference (int): The common difference between consecutive terms.

    Returns:
        int: The n-th term of the arithmetic progression.
    """"""
    return first_term + (n - 1) * common_difference",failed: name 'tn_ap' is not defined,True,False,,13,3,2,0,9,2,0,1,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,51.48333087196182
344,mbpp,test,344,claude_3_haiku_0_shot,"def count_rectangles(radius):
    diameter = 2 * radius
    diameter_squared = diameter ** 2
    rectangles = 0

    for a in range(1, 2 * radius):
        for b in range(1, 2 * radius):
            diagonal_length_squared = a ** 2 + b ** 2
            if diagonal_length_squared <= diameter_squared:
                rectangles += 1

    return rectangles",failed: name 'count_Rectangles' is not defined,True,False,,12,10,10,0,0,2,0,4,4,11,9,18,15,27,46.053747805010275,105.48604608143,3.272727272727273,345.22705990286187,19.179281105714548,0.03516201536047667,63.48158617538132
345,mbpp,test,345,claude_3_haiku_0_shot,"def calculate_third_angle(angle_a, angle_b):
    """"""
    Calculates the third angle of a triangle given two angles.
    
    Args:
        angle_a (float): The first angle of the triangle.
        angle_b (float): The second angle of the triangle.
    
    Returns:
        float: The third angle of the triangle.
    """"""
    return 180 - (angle_a + angle_b)",failed: name 'find_angle' is not defined,True,False,,12,3,2,0,8,2,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,56.47610473443205
346,mbpp,test,346,claude_3_haiku_0_shot,"def find_max(records):
    """"""
    Find the maximum element among all the elements in the given tuple records.
    
    Args:
        records (list): A list of tuples, where each tuple contains integers.
    
    Returns:
        int: The maximum element among all the elements in the given records.
    """"""
    max_element = max(element for record in records for element in record)
    return max_element",passed,True,True,9.003313333361499e-05,12,4,3,0,7,2,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
347,mbpp,test,347,claude_3_haiku_0_shot,"def moddiv_list(nums1, nums2):
    """"""
    Perform modulo division of two lists.

    Args:
        nums1 (list): The first list of numbers.
        nums2 (list): The second list of numbers.

    Returns:
        list: The list of modulo division results.
    """"""
    return [x % y for x, y in zip(nums1, nums2)]",passed,True,True,6.309013333520852e-05,12,3,2,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.93689225219502
348,mbpp,test,348,claude_3_haiku_0_shot,"def check_quadratic_roots(a, b, c):
    """"""
    Checks if one root of the quadratic equation is twice the other.

    Args:
        a (float): The coefficient of the quadratic term.
        b (float): The coefficient of the linear term.
        c (float): The constant term.

    Returns:
        str: ""Yes"" if one root is twice the other, ""No"" otherwise.
    """"""
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return ""No""
    elif discriminant == 0:
        return ""Yes"" if b == 0 else ""No""
    else:
        root1 = (-b + discriminant**0.5) / (2*a)
        root2 = (-b - discriminant**0.5) / (2*a)
        return ""Yes"" if abs(root1) == 2*abs(root2) or abs(root2) == 2*abs(root1) else ""No""",failed: name 'Check_Solution' is not defined,True,False,,21,11,10,0,9,2,0,6,9,27,22,42,36,64,156.9112875713945,330.875200092308,7.0,2316.126400646156,128.67368892478646,0.11029173336410265,85.82212310271103
349,mbpp,test,349,claude_3_haiku_0_shot,"def get_carol(n):
    """"""
    Calculates the n-th Carol number.

    Args:
        n (int): The index of the Carol number to calculate.

    Returns:
        int: The n-th Carol number.
    """"""
    carol_number = (2 ** n) - 1
    return carol_number * carol_number - 2",passed,True,True,2.558126666656335e-05,12,4,3,0,7,2,0,1,3,6,4,8,9,12,20.264662506490406,38.03910001730775,2.0,76.0782000346155,4.226566668589751,0.012679700005769252,74.97857057535988
350,mbpp,test,350,claude_3_haiku_0_shot,"def remove_empty_lists(lst):
    """"""
    Removes empty lists from a given list of lists.
    
    Args:
        lst (list): A list of lists.
        
    Returns:
        list: A new list with empty lists removed.
    """"""
    return [sub_list for sub_list in lst if sub_list]",failed: name 'remove_empty' is not defined,True,False,,11,3,2,0,7,2,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
351,mbpp,test,351,claude_3_haiku_0_shot,"def find_most_frequent_item(items):
    """"""
    Find the item with the maximum occurrences in the given list.
    
    Args:
        items (list): The input list of items.
    
    Returns:
        The item with the maximum occurrences in the list.
    """"""
    item_counts = {}
    for item in items:
        if item in item_counts:
            item_counts[item] += 1
        else:
            item_counts[item] = 1
    
    most_frequent_item = max(item_counts, key=item_counts.get)
    return most_frequent_item",failed: name 'max_occurrences' is not defined,True,False,,19,10,9,0,7,3,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,97.72826389702385
352,mbpp,test,352,claude_3_haiku_0_shot,"def add_k_to_tuple(tuples, k):
    """"""
    Adds the value `k` to each element in the given tuple.

    Args:
        tuples (tuple): A tuple of tuples.
        k (int): The value to add to each element.

    Returns:
        list: A list of tuples with the modified values.
    """"""
    return [(x + k, y + k) for x, y in tuples]",failed: name 'add_K_element' is not defined,True,False,,12,3,2,0,8,2,0,2,1,3,2,4,4,6,4.754887502163469,12.0,0.6666666666666666,8.0,0.4444444444444444,0.004,57.12179588541611
353,mbpp,test,353,claude_3_haiku_0_shot,"def make_flip(char):
    return '1' if char == '0' else '0'

def get_flip_count(string, start_char):
    flip_count = 0
    for char in string:
        if char != start_char:
            flip_count += 1
        start_char = make_flip(start_char)
    return flip_count

def min_flip_to_make_string_alternate(string):
    return min(get_flip_count(string, '0'), get_flip_count(string, '1'))",passed,True,True,3.255693333367541e-05,13,11,11,0,0,2,0,2,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,66.5551155257163
354,mbpp,test,354,claude_3_haiku_0_shot,"def count_digits(number):
    """"""
    Counts the number of digits in a given number.

    Args:
        number (int): The number to count the digits of.

    Returns:
        int: The number of digits in the given number.
    """"""
    if number == 0:
        return 1
    return int(abs(number)) // 10 + 1",failed: name 'count_Digit' is not defined,True,False,,13,5,4,0,7,2,0,2,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,85.69342029771842
355,mbpp,test,355,claude_3_haiku_0_shot,"def find_largest_adjacent_product(numbers):
    """"""
    Find the largest product of adjacent elements in a list of integers.
    
    Args:
        numbers (list): A list of integers.
    
    Returns:
        int: The largest product of adjacent elements.
    """"""
    max_product = float('-inf')
    for i in range(len(numbers) - 1):
        product = numbers[i] * numbers[i + 1]
        if product > max_product:
            max_product = product
    return max_product",failed: name 'adjacent_num_product' is not defined,True,False,,16,8,7,0,7,2,0,3,4,7,4,8,11,12,27.651484454403228,41.51317942364757,2.2857142857142856,94.88726725405158,5.27151484744731,0.01383772647454919,94.20827076404845
356,mbpp,test,356,claude_3_haiku_0_shot,"class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def get_height(node):
    if not node:
        return 0
    return max(get_height(node.left), get_height(node.right)) + 1

def is_balanced(root):
    if not root:
        return True

    left_height = get_height(root.left)
    right_height = get_height(root.right)

    if abs(left_height - right_height) <= 1 and is_balanced(root.left) and is_balanced(root.right):
        return True

    return False",failed: name 'is_tree_balanced' is not defined,True,False,,22,17,17,0,0,5,0,2,5,11,6,11,16,17,49.663388279447084,68.0,2.5,170.0,9.444444444444445,0.02266666666666667,59.38625950840557
357,mbpp,test,357,claude_3_haiku_0_shot,"def repeat_tuple(tuple_to_repeat, n_times):
    """"""
    Repeats the given tuple n_times and returns the resulting tuple.
    
    Args:
        tuple_to_repeat (tuple): The tuple to be repeated.
        n_times (int): The number of times to repeat the tuple.
    
    Returns:
        tuple: The resulting tuple after repeating the input tuple n_times.
    """"""
    return tuple(tuple_to_repeat for _ in range(n_times))",failed: name 'repeat_tuples' is not defined,True,False,,12,3,2,0,8,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
358,mbpp,test,358,claude_3_haiku_0_shot,"def calculate_lateral_surface_area(length, width, height):
    """"""
    Calculates the lateral surface area of a cuboid.

    Args:
        length (float): The length of the cuboid.
        width (float): The width of the cuboid.
        height (float): The height of the cuboid.

    Returns:
        float: The lateral surface area of the cuboid.
    """"""
    return 2 * height * (length + width)",failed: name 'lateralsurface_cuboid' is not defined,True,False,,13,3,2,0,9,2,0,1,2,6,3,6,8,9,17.509775004326936,27.0,1.0,27.0,1.5,0.009,51.65087316931213
359,mbpp,test,359,claude_3_haiku_0_shot,"def sort_by_float(tuples):
    return sorted(tuples, key=lambda x: float(x[1]), reverse=True)",failed: name 'float_sort' is not defined,True,False,,2,3,2,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
360,mbpp,test,360,claude_3_haiku_0_shot,"def find_smallest_missing(arr):
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = left + (right - left) // 2

        if arr[mid] == mid:
            left = mid + 1
        else:
            right = mid - 1

    return left",failed: name 'smallest_missing' is not defined,True,False,,12,9,9,0,0,3,0,3,5,9,8,16,14,24,40.13896548741762,91.37651812938249,4.444444444444445,406.1178583528111,22.56210324182284,0.03045883937646083,65.05088975419707
361,mbpp,test,361,claude_3_haiku_0_shot,"def sort_ascending_heap(nums):
    """"""
    Sort a given list of elements in ascending order using heap queue algorithm.
    
    Args:
        nums (list): The list of elements to be sorted.
        
    Returns:
        list: The sorted list in ascending order.
    """"""
    # Convert the list to a heap
    heap = nums.copy()
    hq.heapify(heap)
    
    # Pop elements from the heap and build the sorted list
    sorted_list = [hq.heappop(heap) for _ in range(len(heap))]
    
    return sorted_list",failed: name 'heap_assending' is not defined,True,False,,18,6,5,2,7,4,2,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
362,mbpp,test,362,claude_3_haiku_0_shot,"def calculate_cuboid_volume(length, width, height):
    """"""
    Calculates the volume of a cuboid.

    Args:
        length (float): The length of the cuboid.
        width (float): The width of the cuboid.
        height (float): The height of the cuboid.

    Returns:
        float: The volume of the cuboid.
    """"""
    return length * width * height",failed: name 'volume_cuboid' is not defined,True,False,,13,3,2,0,9,2,0,1,1,4,2,4,5,6,8.0,13.931568569324174,0.5,6.965784284662087,0.3869880158145604,0.004643856189774725,53.66299790645304
363,mbpp,test,363,claude_3_haiku_0_shot,"from typing import List

def permute_string(s: str) -> List[str]:
    if not s:
        return [""""]

    prev_list = permute_string(s[1:])
    result = []

    for i in range(len(prev_list)):
        for j in range(len(s)):
            new_str = prev_list[i][:j] + s[0] + prev_list[i][j:]
            result.append(new_str)

    return result",passed,True,True,9.418719999606158e-05,15,13,11,0,0,4,0,4,2,5,3,5,7,8,13.60964047443681,22.458839376460833,1.0,22.458839376460833,1.2477132986922685,0.007486279792153611,65.7000363686294
364,mbpp,test,364,claude_3_haiku_0_shot,"def round_to_nearest_multiple(number, multiple):
    """"""
    Rounds the given number to the nearest multiple of the specified number.
    
    Args:
        number (float): The number to be rounded.
        multiple (float): The number to round to the nearest multiple of.
    
    Returns:
        float: The rounded number.
    """"""
    rounded_down = multiple * round(number / multiple)
    rounded_up = rounded_down + multiple
    return rounded_down if abs(number - rounded_down) < abs(number - rounded_up) else rounded_up",failed: name 'round_num' is not defined,True,False,,14,5,4,0,8,2,0,2,5,7,6,12,12,18,31.26112492884004,64.52932501298082,4.285714285714286,276.55425005563205,15.36412500309067,0.02150977500432694,77.94225948842086
365,mbpp,test,365,claude_3_haiku_0_shot,"def remove_duplicates(tup, replacement_value='MSP'):
    seen = set()
    result = []
    for item in tup:
        if item not in seen:
            seen.add(item)
            result.append(item)
        else:
            result.append(replacement_value)
    return tuple(result)",failed: name 'remove_replica' is not defined,True,False,,10,10,10,0,0,0,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,73.041182281749
366,mbpp,test,366,claude_3_haiku_0_shot,"def remove_char(string, char):
    return string.replace(char, '')",failed: name 'remove_Char' is not defined,True,False,,2,2,2,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
367,mbpp,test,367,claude_3_haiku_0_shot,"def shift_last_to_first(lst):
    return lst[-1:] + lst[:-1]",failed: name 'move_first' is not defined,True,False,,2,3,2,0,0,0,0,1,2,3,3,4,5,7,6.754887502163469,16.253496664211536,1.3333333333333333,21.67132888561538,1.2039627158675212,0.005417832221403845,80.97852572266862
368,mbpp,test,368,claude_3_haiku_0_shot,"def calculate_cuboid_surface_area(length, width, height):
    """"""
    Calculates the surface area of a cuboid.

    Args:
        length (float): The length of the cuboid.
        width (float): The width of the cuboid.
        height (float): The height of the cuboid.

    Returns:
        float: The surface area of the cuboid.
    """"""
    surface_area = 2 * (length * width + length * height + width * height)
    return surface_area",failed: name 'surfacearea_cuboid' is not defined,True,False,,14,4,3,0,9,2,0,1,2,9,6,12,11,18,30.529325012980813,62.26976913547136,1.3333333333333333,83.02635884729514,4.612575491516397,0.020756589711823786,61.520079407096546
369,mbpp,test,369,claude_3_haiku_0_shot,"def generate_2d_array(rows, cols):
    """"""
    Generates a 2D array with the specified number of rows and columns.
    
    Args:
        rows (int): The number of rows in the array.
        cols (int): The number of columns in the array.
    
    Returns:
        list: A 2D list representing the array.
    """"""
    return [[row * col for col in range(cols)] for row in range(rows)]",failed: name 'multi_list' is not defined,True,False,,12,3,2,0,8,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.802389328218425
370,mbpp,test,370,claude_3_haiku_0_shot,"from operator import itemgetter

def sort_list_of_lists(data, index):
    """"""
    Sort a list of lists by a given index of the inner lists.

    Args:
        data (list): A list of lists to be sorted.
        index (int): The index of the inner lists to sort by.

    Returns:
        list: The sorted list of lists.
    """"""
    return sorted(data, key=itemgetter(index))",failed: name 'index_on_inner_list' is not defined,True,False,,14,4,3,0,8,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
371,mbpp,test,371,claude_3_haiku_0_shot,"def find_rotation_count(arr):
    left, right = 0, len(arr) - 1

    while left <= right:
        if arr[left] <= arr[right]:
            return left

        mid = left + (right - left) // 2
        next_idx = (mid + 1) % len(arr)
        prev_idx = (mid - 1 + len(arr)) % len(arr)

        if arr[mid] <= arr[next_idx] and arr[mid] <= arr[prev_idx]:
            return mid
        elif arr[mid] <= arr[right]:
            right = mid - 1
        else:
            left = mid + 1

    return -1",passed,True,True,5.5264766668490965e-05,19,15,15,0,0,4,0,6,7,24,18,35,31,53,129.690584471711,262.5724044505044,5.104166666666667,1340.213314382783,74.45629524348794,0.0875241348168348,56.59815614951203
372,mbpp,test,372,claude_3_haiku_0_shot,"def toggle_odd_bits(num):
    odd_mask = 0b10101010101010101010101010101010
    return num ^ odd_mask",failed: name 'even_bit_toggle_number' is not defined,True,False,,3,3,3,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,84.71624627594792
373,mbpp,test,373,claude_3_haiku_0_shot,"def find_frequency_of_smallest(arr):
    """"""
    Find the frequency of the smallest value in a given array.
    
    Args:
        arr (list): The input array.
    
    Returns:
        int: The frequency of the smallest value in the array.
    """"""
    smallest_value = min(arr)
    return arr.count(smallest_value)",failed: name 'frequency_Of_Smallest' is not defined,True,False,,12,4,3,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
374,mbpp,test,374,claude_3_haiku_0_shot,"def perrin(n):
    if n <= 0:
        return 3
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    else:
        return perrin(n - 2) + perrin(n - 3)",failed: name 'get_perrin' is not defined,True,False,,9,9,9,0,0,0,0,4,4,7,6,12,11,18,27.651484454403228,62.26976913547136,3.4285714285714284,213.49635132161606,11.860908406756447,0.020756589711823786,66.08262358354699
375,mbpp,test,375,claude_3_haiku_0_shot,"def swap_count(s):
    left_count = 0
    right_count = 0
    swaps = 0
    imbalance = 0

    for char in s:
        if char == '[':
            left_count += 1
            if imbalance > 0:
                swaps += imbalance
                imbalance -= 1
        elif char == ']':
            right_count += 1
            imbalance = right_count - left_count

    return swaps",passed,True,True,2.8194600001067254e-05,17,15,15,0,0,2,0,5,4,9,8,16,13,24,36.52932501298081,88.81055323538621,3.5555555555555554,315.7708559480398,17.542825330446657,0.029603517745128736,60.02909837229242
376,mbpp,test,376,claude_3_haiku_0_shot,"def is_hex_even(hex_num: str) -> str:
    """"""
    Checks whether the given hexadecimal number is even or odd.

    Args:
        hex_num (str): The hexadecimal number to be checked.

    Returns:
        str: ""Even"" if the number is even, ""Odd"" if the number is odd.
    """"""
    if hex_num[-1].lower() in ('0', '2', '4', '6', '8', 'a', 'c', 'e'):
        return ""Even""
    else:
        return ""Odd""",failed: name 'even_or_odd' is not defined,True,False,,14,6,5,0,7,2,0,2,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,93.90996034827882
377,mbpp,test,377,claude_3_haiku_0_shot,"def highest_power_of_2(n):
    """"""
    Find the highest power of 2 that is less than or equal to n.
    """"""
    if n == 0:
        return 0
    
    power = 0
    while (1 << power) <= n:
        power += 1
    
    return 1 << (power - 1)",failed: name 'highest_Power_of_2' is not defined,True,False,,12,8,7,0,3,2,0,3,5,6,6,12,11,18,27.11941547876375,62.26976913547136,5.0,311.3488456773568,17.29715809318649,0.020756589711823786,95.90387168908711
378,mbpp,test,378,claude_3_haiku_0_shot,"def lucas_number(n):
    """"""
    Calculates the n-th Lucas number.
    
    Args:
        n (int): The index of the Lucas number to calculate.
    
    Returns:
        int: The n-th Lucas number.
    """"""
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return lucas_number(n - 1) + lucas_number(n - 2)",failed: name 'find_lucas' is not defined,True,False,,16,8,7,0,7,2,0,3,3,6,5,10,9,15,20.264662506490406,47.548875021634686,2.5,118.87218755408671,6.604010419671484,0.01584962500721156,93.79547233238222
379,mbpp,test,379,claude_3_haiku_0_shot,"def prepend_string(lst, string):
    return [f""{string}{item}"" for item in lst]",failed: name 'add_string' is not defined,True,False,,2,2,2,0,0,0,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
380,mbpp,test,380,claude_3_haiku_0_shot,"def convert_to_nested_dict(*lists):
    """"""
    Converts multiple lists to a nested dictionary.

    Args:
        *lists (list): Variable number of lists to be converted.

    Returns:
        list: A list of nested dictionaries.
    """"""
    if len(set(map(len, lists))) != 1:
        raise ValueError(""All input lists must have the same length."")

    result = []
    for values in zip(*lists):
        nested_dict = {}
        for key, sub_key, value in zip(lists[0], lists[1], values):
            nested_dict.setdefault(key, {})[sub_key] = value
        result.append(nested_dict)

    return result",failed: name 'convert_list_dictionary' is not defined,True,False,,21,11,10,0,7,4,0,4,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
381,mbpp,test,381,claude_3_haiku_0_shot,"def get_max_sum(n):
    dp = [0, 1] + [0] * (n - 1)
    for i in range(2, n + 1):
        dp[i] = max(i, sum(dp[i // div] for div in (2, 3, 4, 5) if i % div == 0))
    return dp[n]",failed: ,True,False,,5,5,5,0,0,0,0,4,6,10,7,14,16,21,48.72905595320056,84.0,4.2,352.8,19.6,0.028,70.74085290326454
382,mbpp,test,382,claude_3_haiku_0_shot,"def find_max_length_list(input_list):
    """"""
    Find the list with maximum length in the given list of lists.

    Args:
        input_list (list): A list of lists.

    Returns:
        tuple: A tuple containing the maximum length and the list with maximum length.
    """"""
    max_length = max(len(lst) for lst in input_list)
    max_list = max(input_list, key=len)
    return max_length, max_list",failed: name 'max_length_list' is not defined,True,False,,13,5,4,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
383,mbpp,test,383,claude_3_haiku_0_shot,"def is_distinct(tup):
    """"""
    Check if the given tuple is distinct.
    
    Args:
        tup (tuple): The input tuple to check.
    
    Returns:
        bool: True if the tuple is distinct, False otherwise.
    """"""
    return len(set(tup)) == len(tup)",failed: name 'check_distinct' is not defined,True,False,,11,3,2,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,65.11035329571214
384,mbpp,test,384,claude_3_haiku_0_shot,"def first_non_repeating_character(string):
    char_count = {}
    for char in string:
        char_count[char] = char_count.get(char, 0) + 1

    for char in string:
        if char_count[char] == 1:
            return char

    return None",passed,True,True,2.8048566665953937e-05,10,8,8,0,0,2,0,4,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,71.75171264448839
385,mbpp,test,385,claude_3_haiku_0_shot,"import re

def check_char(string):
    if re.match(r'^([a-z]).*\1$', string):
        return ""Valid""
    else:
        return ""Invalid""",failed: ,True,False,,7,6,6,0,0,1,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
386,mbpp,test,386,claude_3_haiku_0_shot,"def median_numbers(a, b, c):
    return sorted([a, b, c])[1]",passed,True,True,3.650763333098439e-05,2,2,2,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
387,mbpp,test,387,claude_3_haiku_0_shot,"def sum_of_digits(numbers):
    total = 0
    for num in numbers:
        for digit in str(num):
            if digit.isdigit():
                total += int(digit)
    return total",passed,True,True,3.867776666766076e-05,7,7,7,0,0,0,0,4,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,76.28570514245513
388,mbpp,test,388,claude_3_haiku_0_shot,"def bitwise_xor(tuple1, tuple2):
    """"""Perform bitwise XOR operation on the elements of the given tuples.""""""
    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",passed,True,True,7.973000000068471e-05,3,3,2,0,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,84.58174335197131
389,mbpp,test,389,claude_3_haiku_0_shot,"def extract_freq(test_list):
    """"""
    Extracts the frequency of unique tuples in the given list, irrespective of the order.
    
    Args:
        test_list (list): A list of tuples or lists.
    
    Returns:
        int: The frequency of unique tuples in the given list.
    """"""
    unique_tuples = set(tuple(sorted(sub)) for sub in test_list)
    return len(unique_tuples)",passed,True,True,8.032573333215017e-05,12,4,3,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
390,mbpp,test,390,claude_3_haiku_0_shot,"def add_nested_tuples(tuple1, tuple2):
    """"""
    Performs index-wise addition of elements in the given two nested tuples.

    Args:
        tuple1 (tuple): The first nested tuple.
        tuple2 (tuple): The second nested tuple.

    Returns:
        tuple: A new nested tuple with the index-wise sum of elements.
    """"""
    return tuple(tuple(a + b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",passed,True,True,0.00021687699999877925,12,3,2,0,8,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.802389328218425
391,mbpp,test,391,claude_3_haiku_0_shot,"def ncr_modp(n, r, p):
    """"""
    Compute the value of n choose r modulo p.
    
    Args:
        n (int): The total number of items.
        r (int): The number of items to choose.
        p (int): The modulus.
    
    Returns:
        int: The value of n choose r modulo p.
    """"""
    if r > n:
        return 0
    
    C = [0] * (r + 1)
    C[0] = 1
    
    for i in range(1, n + 1):
        for j in range(min(i, r), 0, -1):
            C[j] = (C[j] + C[j - 1]) % p
    
    return C[r]",passed,True,True,0.00010855753333392689,23,10,9,0,9,5,0,4,6,10,8,15,16,23,48.72905595320056,92.0,4.5,414.0,23.0,0.030666666666666665,89.53986773783805
392,mbpp,test,392,claude_3_haiku_0_shot,"import re

def is_valid_url(url: str) -> bool:
    """"""
    Check if a given URL is valid using a regular expression.

    Args:
        url (str): The URL to be validated.

    Returns:
        bool: True if the URL is valid, False otherwise.
    """"""
    pattern = r""^(https?://)?(www\.)?[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$""
    return bool(re.match(pattern, url))",failed: name 'is_valid_URL' is not defined,True,False,,14,5,4,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
393,mbpp,test,393,claude_3_haiku_0_shot,"def find_minimum(num1, num2):
    """"""
    Returns the minimum of two numbers.

    Args:
        num1 (int or float): The first number.
        num2 (int or float): The second number.

    Returns:
        int or float: The minimum of the two numbers.
    """"""
    return min(num1, num2)",failed: name 'minimum' is not defined,True,False,,12,3,2,0,8,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
394,mbpp,test,394,claude_3_haiku_0_shot,"def contains_in_tuple(tuple_to_search, element_to_find):
    return element_to_find in tuple_to_search",failed: name 'check_tuplex' is not defined,True,False,,2,2,2,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.5574946685516
395,mbpp,test,395,claude_3_haiku_0_shot,"def find_parity(number: int) -> str:
    """"""
    Determines the parity of a given integer.

    Args:
        number (int): The integer to check.

    Returns:
        str: ""Odd Parity"" if the number has odd parity, ""Even Parity"" if the number has even parity.
    """"""
    parity = number ^ (number >> 1)
    parity ^= parity >> 2
    parity ^= parity >> 4
    parity ^= parity >> 8
    parity ^= parity >> 16
    return ""Odd Parity"" if parity & 1 else ""Even Parity""",failed: name 'find_Parity' is not defined,True,False,,16,8,7,0,7,2,0,2,3,12,11,22,15,33,47.77443751081735,128.92738965508113,2.75,354.5503215514731,19.69724008619295,0.04297579655169371,90.89666854599454
396,mbpp,test,396,claude_3_haiku_0_shot,"def rearrange_bigger(n):
    digits = list(str(n))
    for i in range(len(digits) - 2, -1, -1):
        if digits[i] < digits[i + 1]:
            remaining_digits = digits[i:]
            next_bigger_digit = min(filter(lambda x: x > remaining_digits[0], remaining_digits))
            remaining_digits.remove(next_bigger_digit)
            remaining_digits.sort()
            digits[i:] = [next_bigger_digit] + remaining_digits
            return int("""".join(digits))
    return False",passed,True,True,3.1497166666364744e-05,11,14,11,0,0,0,0,3,5,10,7,12,15,19,44.82892142331043,74.23092131656186,3.0,222.69276394968557,12.371820219426976,0.024743640438853954,61.49703575333066
397,mbpp,test,397,claude_3_haiku_0_shot,"from typing import List

def k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:
    if not nums1 or not nums2:
        return []

    heap = [(nums1[0] + nums2[0], 0, 0)]
    result = []

    while k > 0 and heap:
        _, i, j = heapq.heappop(heap)
        result.append([nums1[i], nums2[j]])
        k -= 1

        if j + 1 < len(nums2):
            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))
        if j == 0 and i + 1 < len(nums1):
            heapq.heappush(heap, (nums1[i + 1] + nums2[0], i + 1, 0))

    return result",failed: name 'heapq' is not defined,True,False,,20,15,15,0,0,5,0,8,8,23,19,36,31,55,128.0419249893113,272.4807970712782,6.260869565217392,1705.9667294897417,94.77592941609676,0.09082693235709273,56.21651017715072
398,mbpp,test,398,claude_3_haiku_0_shot,"def find_min_product(tuples):
    """"""
    Find the minimum product from the pairs of tuples within a given list.
    
    Args:
        tuples (list): A list of tuples.
    
    Returns:
        int: The minimum product from the pairs of tuples.
    """"""
    products = [abs(x * y) for x, y in tuples]
    return min(products)",failed: name 'min_product_tuple' is not defined,True,False,,12,4,3,0,7,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,81.16751561438626
399,mbpp,test,399,claude_3_haiku_0_shot,"def find_minimum(lst):
    """"""
    Find the minimum value in a given heterogeneous list.
    
    Args:
        lst (list): A heterogeneous list containing different data types.
    
    Returns:
        int: The minimum value in the list, if any integers are present.
        None: If the list does not contain any integers.
    """"""
    try:
        return min(filter(lambda x: isinstance(x, int), lst))
    except ValueError:
        return None",failed: name 'min_val' is not defined,True,False,,15,7,5,0,8,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
400,mbpp,test,400,claude_3_haiku_0_shot,"import re

def convert_snake_to_camel(snake_case_string):
    """"""
    Converts a snake case string to a camel case string.
    
    Args:
        snake_case_string (str): The snake case string to be converted.
        
    Returns:
        str: The camel case string.
    """"""
    return re.sub(r'_(\w)', lambda match: match.group(1).upper(), snake_case_string)",failed: name 'snake_to_camel' is not defined,True,False,,13,5,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
401,mbpp,test,401,claude_3_haiku_0_shot,"def remove_odd(numbers):
    """"""
    Removes odd numbers from the given list.

    Args:
        numbers (list): A list of integers.

    Returns:
        list: A new list containing only the even numbers from the input list.
    """"""
    return [num for num in numbers if num % 2 == 0]",passed,True,True,5.1026133333683296e-05,11,3,2,0,7,2,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,61.24605700601933
402,mbpp,test,402,claude_3_haiku_0_shot,"def extract_nth_element(data, index):
    """"""
    Extracts the element at the specified index from each tuple in the given list.

    Args:
        data (list): A list of tuples.
        index (int): The index of the element to extract.

    Returns:
        list: A list containing the extracted elements.
    """"""
    return [tup[index] for tup in data]",passed,True,True,0.00011384936666824312,12,3,2,0,8,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
403,mbpp,test,403,claude_3_haiku_0_shot,"def check_value_in_sequence(value, sequence):
    return value in sequence",failed: name 'overlapping' is not defined,True,False,,2,2,2,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.5574946685516
404,mbpp,test,404,claude_3_haiku_0_shot,"def find_max_product_pair(arr):
    if len(arr) < 2:
        return ""No pairs exist""

    max_product = arr[0] * arr[1]
    max_pair = (arr[0], arr[1])

    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            product = arr[i] * arr[j]
            if product > max_product:
                max_product = product
                max_pair = (arr[i], arr[j])

    return max_pair",failed: name 'max_Product' is not defined,True,False,,15,12,12,0,0,3,0,5,4,10,5,10,14,15,41.219280948873624,57.110323830864054,2.0,114.22064766172811,6.345591536762672,0.019036774610288017,63.48572560119062
405,mbpp,test,405,claude_3_haiku_0_shot,"MAX = 1000000

def max_sum_three_parts(n):
    """"""
    Find the maximum sum that can be obtained by dividing a number into three parts
    and summing them up recursively.
    """"""
    dp = [0] * (n + 1)
    dp[0] = 0
    dp[1] = 1

    for i in range(2, n + 1):
        dp[i] = max(dp[i // 2] + dp[i // 3] + dp[i // 4], i)

    return dp[n]",failed: name 'breakSum' is not defined,True,False,,15,9,8,0,4,3,0,2,3,12,8,16,15,24,47.77443751081735,93.76537429460444,2.0,187.53074858920888,10.418374921622716,0.03125512476486815,94.18375321726315
406,mbpp,test,406,claude_3_haiku_0_shot,"def find_common_first_element(input_data):
    result = {}
    for item in input_data:
        first_element = item[0]
        if first_element in result:
            result[first_element].extend(item[1:])
        else:
            result[first_element] = list(item)
    return [tuple(values) for values in result.values()]",failed: name 'group_tuples' is not defined,True,False,,9,10,9,0,0,0,0,4,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,72.9066793577724
407,mbpp,test,407,claude_3_haiku_0_shot,"def find_max_sublist(lst):
    """"""
    Finds the sublist with the maximum length in the given list.
    
    Args:
        lst (list): The input list.
    
    Returns:
        list: The sublist with the maximum length.
    """"""
    max_length = 0
    max_sublist = []
    
    for sublst in lst:
        if len(sublst) > max_length:
            max_length = len(sublst)
            max_sublist = sublst
    
    return max_sublist",failed: name 'Find_Max' is not defined,True,False,,19,9,8,0,7,4,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
408,mbpp,test,408,claude_3_haiku_0_shot,"def round_and_sum(numbers):
    rounded_numbers = [round(num) for num in numbers]
    total_sum = sum(rounded_numbers)
    list_length = len(numbers)
    result = total_sum * list_length
    return result",passed,True,True,5.899260000129895e-05,6,6,6,0,0,0,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,78.01508585192973
409,mbpp,test,409,claude_3_haiku_0_shot,"def cube_sum_of_even_numbers(n):
    """"""
    Calculates the sum of cubes of the first n even natural numbers.
    
    Args:
        n (int): The number of even natural numbers to consider.
    
    Returns:
        int: The sum of cubes of the first n even natural numbers.
    """"""
    return sum([(2 * i) ** 3 for i in range(1, n + 1)])",failed: name 'cube_Sum' is not defined,True,False,,11,3,2,0,7,2,0,2,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,59.527225085194075
410,mbpp,test,410,claude_3_haiku_0_shot,"def concatenate_tuple(test_tup, delimiter=""-""):
    return delimiter.join(map(str, test_tup))",passed,True,True,5.142333334333671e-05,2,2,2,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
411,mbpp,test,411,claude_3_haiku_0_shot,"def calculate_average_cubes(n):
    """"""
    Calculates the average of the cubes of the first n natural numbers.

    Args:
        n (int): The number of natural numbers to consider.

    Returns:
        float: The average of the cubes of the first n natural numbers.
    """"""
    total_cubes = sum(i ** 3 for i in range(1, n + 1))
    return round(total_cubes / n, 6)",failed: name 'find_Average_Of_Cube' is not defined,True,False,,12,4,3,0,7,2,0,2,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,75.88643262519513
412,mbpp,test,412,claude_3_haiku_0_shot,"def get_max_gold(gold, m, n):
    gold_table = [[0] * n for _ in range(m)]

    for col in range(n - 1, -1, -1):
        for row in range(m):
            right = gold_table[row][col + 1] if col < n - 1 else 0
            right_up = gold_table[row - 1][col + 1] if row > 0 and col < n - 1 else 0
            right_down = gold_table[row + 1][col + 1] if row < m - 1 and col < n - 1 else 0
            gold_table[row][col] = gold[row][col] + max(right, right_up, right_down)

    return max(gold_table[i][0] for i in range(m))",failed: name 'get_maxgold' is not defined,True,False,,11,9,9,0,0,2,0,10,7,17,21,40,24,61,89.13835275565901,279.6827125439906,8.235294117647058,2303.269397421099,127.95941096783882,0.09322757084799686,60.707574112931766
413,mbpp,test,413,claude_3_haiku_0_shot,"def extract_rear(test_tuple):
    return [s[-1] for s in test_tuple]",passed,True,True,5.6614566667197626e-05,2,2,2,0,0,0,0,2,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,91.05652066433751
414,mbpp,test,414,claude_3_haiku_0_shot,"def count_element_in_sublists(lst, element):
    return sum(1 for sublist in lst if element in sublist)",failed: name 'count_element_in_list' is not defined,True,False,,2,2,2,0,0,0,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.28848882059837
415,mbpp,test,415,claude_3_haiku_0_shot,"def filter_odd_numbers(numbers):
    return [num for num in numbers if num % 2 != 0]",failed: name 'filter_oddnumbers' is not defined,True,False,,2,2,2,0,0,0,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,84.69319837885878
416,mbpp,test,416,claude_3_haiku_0_shot,"import re

def convert_date_format(date_str: str) -> str:
    """"""
    Convert a date string in the format 'yyyy-mm-dd' to 'dd-mm-yyyy'.
    
    Args:
        date_str (str): The date string to be converted.
    
    Returns:
        str: The converted date string.
    """"""
    return re.sub(r'(\d{4})-(\d{2})-(\d{2})', r'\3-\2-\1', date_str)",failed: name 'change_date_format' is not defined,True,False,,13,4,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
417,mbpp,test,417,claude_3_haiku_0_shot,"def shell_sort(arr):
    n = len(arr)
    gap = n // 2

    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2

    return arr",passed,True,True,9.854643333255808e-05,15,13,13,0,0,2,0,5,5,9,9,18,14,27,40.13896548741762,102.7985828955553,5.0,513.9929144777765,28.555161915432027,0.03426619429851843,60.9400048282068
418,mbpp,test,418,claude_3_haiku_0_shot,"def extract_common_elements(tuple1, tuple2):
    """"""
    Extracts the common elements between two tuples.

    Args:
        tuple1 (tuple): The first tuple.
        tuple2 (tuple): The second tuple.

    Returns:
        tuple: A tuple containing the common elements between the two input tuples.
    """"""
    return tuple(a & b for a, b in zip(tuple1, tuple2))",failed: name 'and_tuples' is not defined,True,False,,12,3,2,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.93689225219502
419,mbpp,test,419,claude_3_haiku_0_shot,"def find_parabola_directrix(a, b, c):
    """"""
    Calculates the directrix of a parabola given the coefficients a, b, and c.

    Args:
        a (float): The coefficient of the x^2 term.
        b (float): The coefficient of the x term.
        c (float): The constant term.

    Returns:
        float: The y-coordinate of the directrix.
    """"""
    directrix = c - (b ** 2) / (4 * a)
    return directrix",failed: name 'parabola_directrix' is not defined,True,False,,14,4,3,0,9,2,0,1,4,8,4,8,12,12,32.0,43.01955000865388,2.0,86.03910001730776,4.779950000961542,0.014339850002884626,62.644682487719905
420,mbpp,test,420,claude_3_haiku_0_shot,"def has_common_element(list1, list2):
    return any(element in list2 for element in list1)",failed: name 'common_element' is not defined,True,False,,2,2,2,0,0,0,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.42299174457497
421,mbpp,test,421,claude_3_haiku_0_shot,"def calculate_median_trapezium(base1, base2, height):
    """"""
    Calculates the median of a trapezium.

    Args:
        base1 (float): The length of the first base of the trapezium.
        base2 (float): The length of the second base of the trapezium.
        height (float): The height of the trapezium.

    Returns:
        float: The median of the trapezium.
    """"""
    return 0.5 * (base1 + base2)",failed: name 'median_trapezium' is not defined,True,False,,13,3,2,0,9,2,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,53.336665716763655
422,mbpp,test,422,claude_3_haiku_0_shot,"def is_greater_than_array(arr, number):
    """"""
    Check if the given number is greater than all elements in the array.
    
    Args:
        arr (list): The array of numbers to compare against.
        number (int): The number to check.
    
    Returns:
        str: A message indicating whether the number is greater than the array elements.
    """"""
    if number > max(arr):
        return ""Yes, the entered number is greater than those in the array""
    else:
        return ""No, entered number is less than those in the array""",failed: name 'check_greater' is not defined,True,False,,15,6,5,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,92.55890207101166
423,mbpp,test,423,claude_3_haiku_0_shot,"import re

def text_match_one(text):
    pattern = r'ab+'
    if re.search(pattern, text):
        return 'Found a match!'
    else:
        return 'Not matched!'",passed,True,True,3.22359666666235e-05,8,7,7,0,0,1,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
424,mbpp,test,424,claude_3_haiku_0_shot,"def get_last_digit(number):
    """"""
    Returns the last digit of the given number.
    
    Args:
        number (int): The number to get the last digit from.
    
    Returns:
        int: The last digit of the given number.
    """"""
    return number % 10",failed: name 'last_Digit' is not defined,True,False,,11,3,2,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,65.11035329571214
425,mbpp,test,425,claude_3_haiku_0_shot,"def print_negative_numbers(numbers):
    """"""
    Prints all the negative numbers in the given list.
    
    Args:
        numbers (list): A list of numbers.
    """"""
    for num in numbers:
        if num < 0:
            print(num)",failed: name 'neg_nos' is not defined,True,False,,10,5,4,0,5,1,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
426,mbpp,test,426,claude_3_haiku_0_shot,"def remove_odd_chars(input_string):
    """"""
    Removes the characters at odd indices from the input string.
    
    Args:
        input_string (str): The input string.
    
    Returns:
        str: The string with odd characters removed.
    """"""
    return """".join(char for i, char in enumerate(input_string, start=1) if i % 2 == 0)",failed: name 'remove_odd' is not defined,True,False,,11,3,2,0,7,2,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,61.24605700601933
427,mbpp,test,427,claude_3_haiku_0_shot,"def count_bidirectional(test_list):
    count = 0
    for i in range(len(test_list)):
        for j in range(i + 1, len(test_list)):
            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:
                count += 1
    return str(count)",failed: ,True,False,,7,7,7,0,0,0,0,5,3,9,5,10,12,15,33.28421251514428,53.77443751081735,1.6666666666666667,89.62406251802892,4.9791145843349405,0.017924812503605784,68.77503208599303
428,mbpp,test,428,claude_3_haiku_0_shot,"def convert_to_integer(numbers):
    """"""
    Converts a list of integers into a single integer.
    
    Args:
        numbers (list): A list of integers.
    
    Returns:
        int: The single integer formed by concatenating the input integers.
    """"""
    return int(''.join(map(str, numbers)))",failed: name 'multiple_to_single' is not defined,True,False,,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
429,mbpp,test,429,claude_3_haiku_0_shot,"import re

def find_adverb_positions(text):
    adverbs = []
    for match in re.finditer(r'\w+ly', text):
        start, end = match.span()
        adverb = match.group()
        adverbs.append((start, end, adverb))
    return adverbs",failed: name 'find_adverb_position' is not defined,True,False,,9,8,8,0,0,1,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
430,mbpp,test,430,claude_3_haiku_0_shot,"def calculate_cube_surface_area(side_length):
    """"""
    Calculates the surface area of a cube.

    Args:
        side_length (float): The length of one side of the cube.

    Returns:
        float: The surface area of the cube.
    """"""
    return 6 * side_length ** 2",failed: name 'surfacearea_cube' is not defined,True,False,,11,3,2,0,7,2,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,61.515062853972545
431,mbpp,test,431,claude_3_haiku_0_shot,"from array import array

def calculate_positive_ratio(numbers):
    """"""
    Calculates the ratio of positive numbers in a given array of integers.
    
    Args:
        numbers (array): An array of integers.
    
    Returns:
        float: The ratio of positive numbers in the array, rounded to two decimal places.
    """"""
    total_count = len(numbers)
    positive_count = sum(1 for num in numbers if num > 0)
    return round(positive_count / total_count, 2)",failed: name 'positive_count' is not defined,True,False,,15,6,5,0,7,3,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,92.89469710868967
432,mbpp,test,432,claude_3_haiku_0_shot,"def find_largest_negative(numbers):
    """"""
    Find the largest negative number from the given list of numbers.
    
    Args:
        numbers (list): A list of numbers.
    
    Returns:
        int: The largest negative number in the list, or None if no negative numbers are found.
    """"""
    largest_negative = None
    for num in numbers:
        if num < 0 and (largest_negative is None or num > largest_negative):
            largest_negative = num
    return largest_negative",failed: name 'largest_neg' is not defined,True,False,,15,7,6,0,7,2,0,5,5,8,5,10,13,15,35.60964047443681,55.506595772116384,3.125,173.4581117878637,9.636561765992427,0.01850219859070546,91.64624713912154
433,mbpp,test,433,claude_3_haiku_0_shot,"def trim_tuple(tuples, k):
    return [tuple(t[k:-k]) for t in tuples]",failed: ,True,False,,2,3,2,0,0,0,0,2,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,87.21527227173385
434,mbpp,test,434,claude_3_haiku_0_shot,"def index_multiplication(tuple1, tuple2):
    """"""
    Perform index-wise multiplication of elements in the given two tuples.

    Args:
        tuple1 (tuple): The first tuple.
        tuple2 (tuple): The second tuple.

    Returns:
        tuple: A tuple containing the index-wise multiplication of the elements.
    """"""
    return tuple(a * b for a, b in zip(tuple1, tuple2))",failed: can't multiply sequence by non-int of type 'tuple',True,False,,12,3,2,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.93689225219502
435,mbpp,test,435,claude_3_haiku_0_shot,"from collections import Counter

def count_occurrences(tup, lst):
    return sum(1 for item in tup if item in lst)",failed: name 'count_Occurrence' is not defined,True,False,,4,3,3,0,0,1,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,84.44724042799471
436,mbpp,test,436,claude_3_haiku_0_shot,"def cube_nums(nums):
    return [num ** 3 for num in nums]",passed,True,True,7.372116666696608e-05,2,2,2,0,0,0,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.42299174457497
437,mbpp,test,437,claude_3_haiku_0_shot,"def calculate_perrin_sum(n):
    if n < 0:
        return 0
    elif n == 0:
        return 3
    elif n == 1:
        return 3
    elif n == 2:
        return 5

    perrin_sequence = [3, 0, 2]
    perrin_sum = 5

    for i in range(3, n+1):
        next_perrin = sum(perrin_sequence[-2:])
        perrin_sequence.append(next_perrin)
        perrin_sum += next_perrin

    return perrin_sum",failed: name 'cal_sum' is not defined,True,False,,19,17,16,0,0,3,0,6,4,6,7,13,10,20,23.509775004326936,66.43856189774725,4.333333333333333,287.90043489023805,15.994468605013225,0.02214618729924908,59.591403568125465
438,mbpp,test,438,claude_3_haiku_0_shot,"def is_valid_triangle(x1, y1, x2, y2, x3, y3):
    """"""
    Checks if the three given points form a valid triangle.

    Args:
        x1 (float): X-coordinate of the first point.
        y1 (float): Y-coordinate of the first point.
        x2 (float): X-coordinate of the second point.
        y2 (float): Y-coordinate of the second point.
        x3 (float): X-coordinate of the third point.
        y3 (float): Y-coordinate of the third point.

    Returns:
        str: ""Yes"" if the points form a valid triangle, ""No"" otherwise.
    """"""
    area = abs((x1 * (y2 - y3)) + (x2 * (y3 - y1)) + (x3 * (y1 - y2))) / 2
    return ""Yes"" if area > 0 else ""No""",failed: name 'check_Triangle' is not defined,True,False,,17,4,3,0,12,2,0,2,5,17,10,20,22,30,81.0965087756926,133.78294855911892,2.9411764705882355,393.4792604679969,21.859958914888715,0.044594316186372975,47.063741947515425
439,mbpp,test,439,claude_3_haiku_0_shot,"def extract_strings(strings, length):
    """"""
    Extracts strings of a specified length from a list of strings.

    Args:
        strings (list): A list of strings.
        length (int): The desired length of the strings to extract.

    Returns:
        list: A list of strings of the specified length.
    """"""
    return [s for s in strings if len(s) == length]",failed: name 'extract_string' is not defined,True,False,,12,3,2,0,8,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.802389328218425
440,mbpp,test,440,claude_3_haiku_0_shot,"import re

def remove_whitespaces(text):
    return re.sub(r'\s+', '', text)",passed,True,True,3.293553333492127e-05,4,3,3,0,0,1,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
441,mbpp,test,441,claude_3_haiku_0_shot,"def calculate_loss(actual_cost, sale_amount):
    """"""
    Calculates the loss amount if the sale amount is less than the actual cost.
    
    Args:
        actual_cost (float): The actual cost of the item.
        sale_amount (float): The sale amount of the item.
    
    Returns:
        float: The loss amount if the sale amount is less than the actual cost, otherwise None.
    """"""
    if sale_amount < actual_cost:
        return actual_cost - sale_amount
    return None",failed: name 'loss_amount' is not defined,True,False,,14,5,4,0,8,2,0,2,2,2,2,4,4,6,4.0,12.0,2.0,24.0,1.3333333333333333,0.004,83.05776138005056
442,mbpp,test,442,claude_3_haiku_0_shot,"def sum_of_even_factors(n):
    if n % 2 != 0:
        return 0

    result = 1
    for i in range(2, int(n ** 0.5) + 1):
        count = 0
        current_sum = 1
        current_term = 1

        while n % i == 0:
            count += 1
            n //= i

            if i == 2 and count == 1:
                current_sum = 0
            current_term *= i
            current_sum += current_term

        result *= current_sum

    if n >= 2:
        result *= (1 + n)

    return result",failed: name 'sumofFactors' is not defined,True,False,,25,19,19,0,0,6,0,7,9,16,17,34,25,51,92.52932501298082,236.83666567851094,9.5625,2264.750615550761,125.81947864170894,0.07894555522617032,54.537871781110994
443,mbpp,test,443,claude_3_haiku_0_shot,"import re

def contains_z(text):
    """"""
    Checks if a word in the given text contains the letter 'z'.
    
    Args:
        text (str): The input text to be searched.
    
    Returns:
        str: ""Found a match!"" if a word containing 'z' is found, ""Not matched!"" otherwise.
    """"""
    pattern = r'\b\w*z\w*\b'
    if re.search(pattern, text):
        return ""Found a match!""
    else:
        return ""Not matched!""",failed: name 'text_match_wordz' is not defined,True,False,,17,8,7,0,7,3,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
444,mbpp,test,444,claude_3_haiku_0_shot,"def has_31_days(month_number):
    return month_number in [1, 3, 5, 7, 8, 10, 12]",failed: name 'check_monthnumb_number' is not defined,True,False,,2,2,2,0,0,0,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.5574946685516
445,mbpp,test,445,claude_3_haiku_0_shot,"def reverse_strings(string_list):
    """"""
    Reverses the strings in the given list of strings.

    Args:
        string_list (list): A list of strings to be reversed.

    Returns:
        list: A new list with the strings reversed.
    """"""
    return [string[::-1] for string in string_list]",failed: name 'reverse_string_list' is not defined,True,False,,11,4,2,0,7,2,0,2,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,64.88397018406015
446,mbpp,test,446,claude_3_haiku_0_shot,"def find_minimum_sublist(lst):
    if not lst:
        return []

    min_length = float('inf')
    min_sublist = None

    for i in range(len(lst)):
        for j in range(i, len(lst)):
            sublist = lst[i:j+1]
            if len(sublist) < min_length:
                min_length = len(sublist)
                min_sublist = sublist

    return min_sublist",failed: name 'Find_Min' is not defined,True,False,,15,13,12,0,0,3,0,5,3,5,3,5,8,8,16.36452797660028,24.0,1.5,36.0,2.0,0.008,65.36370788965718
447,mbpp,test,447,claude_3_haiku_0_shot,"def calculate_rectangle_area(length, breadth):
    """"""
    Calculates the area of a rectangle.

    Args:
        length (float): The length of the rectangle.
        breadth (float): The breadth of the rectangle.

    Returns:
        float: The area of the rectangle.
    """"""
    return length * breadth",failed: name 'rectangle_area' is not defined,True,False,,12,3,2,0,8,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,60.07139517617164
448,mbpp,test,448,claude_3_haiku_0_shot,"import re

def remove_uppercase(text: str) -> str:
    """"""
    Remove uppercase substrings from a given string using regex.
    
    Args:
        text (str): The input string.
    
    Returns:
        str: The input string with uppercase substrings removed.
    """"""
    return re.sub(r'[A-Z]+', '', text)",passed,True,True,3.640483333242628e-05,13,4,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
449,mbpp,test,449,claude_3_haiku_0_shot,"def get_first_elements(nested_list):
    """"""
    Extracts the first element from each sublist in the given nested list.

    Args:
        nested_list (list): A nested list containing sublists.

    Returns:
        list: A list containing the first element of each sublist.
    """"""
    return [sublist[0] for sublist in nested_list]",failed: name 'Extract' is not defined,True,False,,11,3,2,0,7,2,0,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
450,mbpp,test,450,claude_3_haiku_0_shot,"def count_uppercase(text: str) -> int:
    """"""
    Counts the number of uppercase characters in the given string.
    
    Args:
        text (str): The input string.
    
    Returns:
        int: The number of uppercase characters in the input string.
    """"""
    return sum(1 for char in text if char.isupper())",failed: name 'upper_ctr' is not defined,True,False,,11,3,2,0,7,2,0,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
451,mbpp,test,451,claude_3_haiku_0_shot,"from itertools import chain, combinations

def powerset(iterable):
    """"""
    Generate all possible combinations of the elements in the given iterable.
    """"""
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))

def combinations_list(lst):
    """"""
    Find all possible combinations of the elements of the given list.
    """"""
    return list(powerset(lst))",failed: ,True,False,,14,8,6,0,6,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
452,mbpp,test,452,claude_3_haiku_0_shot,"def max_subarray_product(arr):
    n = len(arr)
    max_so_far = arr[0]
    max_ending_here = 1
    min_ending_here = 1

    for i in range(n):
        if arr[i] > 0:
            max_ending_here = max_ending_here * arr[i]
            min_ending_here = min(min_ending_here * arr[i], 1)
        elif arr[i] == 0:
            max_ending_here = 1
            min_ending_here = 1
        else:
            temp = max_ending_here
            max_ending_here = max(min_ending_here * arr[i], 1)
            min_ending_here = temp * arr[i]

        max_so_far = max(max_so_far, max_ending_here)

    return max_so_far",passed,True,True,6.113240000142166e-05,21,18,18,0,0,3,0,4,3,10,6,12,13,18,37.974168451037094,66.60791492653966,1.8,119.8942468677714,6.660791492653967,0.022202638308846556,59.311167118893124
453,mbpp,test,453,claude_3_haiku_0_shot,"def are_all_values_same(dictionary):
    """"""
    Checks if all values in a dictionary are the same.
    
    Args:
        dictionary (dict): The dictionary to check.
    
    Returns:
        bool: True if all values are the same, False otherwise.
    """"""
    if not dictionary:
        return True
    
    first_value = next(iter(dictionary.values()))
    return all(value == first_value for value in dictionary.values())",failed: name 'check_value' is not defined,True,False,,15,6,5,0,7,3,0,3,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,93.7754574243022
454,mbpp,test,454,claude_3_haiku_0_shot,"def drop_empty_items(input_dict):
    """"""
    Removes key-value pairs from a dictionary where the value is None.
    
    Args:
        input_dict (dict): The input dictionary.
        
    Returns:
        dict: The dictionary with empty items removed.
    """"""
    return {key: value for key, value in input_dict.items() if value is not None}",failed: name 'drop_empty' is not defined,True,False,,11,4,2,0,7,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,62.11593834032101
455,mbpp,test,455,claude_3_haiku_0_shot,"def find_peak(arr):
    low, high = 0, len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == len(arr) - 1 or arr[mid + 1] <= arr[mid]):
            return mid
        elif mid > 0 and arr[mid - 1] > arr[mid]:
            high = mid - 1
        else:
            low = mid + 1

    return -1",failed: find_peak() takes 1 positional argument but 2 were given,True,False,,13,11,11,0,0,2,0,8,9,24,21,41,33,62,138.56842503028858,312.7524354002241,7.6875,2404.284347139223,133.5713526188457,0.1042508118000747,58.73564591318943
456,mbpp,test,456,claude_3_haiku_0_shot,"def decimal_to_octal(decimal_num):
    octal_num = 0
    place_value = 1

    while decimal_num != 0:
        remainder = decimal_num % 8
        octal_num += remainder * place_value
        place_value *= 10
        decimal_num //= 8

    return octal_num",failed: name 'decimal_to_Octal' is not defined,True,False,,11,9,9,0,0,2,0,2,5,8,6,12,13,18,35.60964047443681,66.60791492653966,3.75,249.77968097452373,13.876648943029096,0.022202638308846556,66.14683046688792
457,mbpp,test,457,claude_3_haiku_0_shot,"def max_product_increasing_subsequence(arr):
    n = len(arr)
    max_products = [arr[i] for i in range(n)]

    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and max_products[i] < max_products[j] * arr[i]:
                max_products[i] = max_products[j] * arr[i]

    return max(max_products)",failed: name 'max_product' is not defined,True,False,,10,8,8,0,0,2,0,6,4,10,5,10,14,15,41.219280948873624,57.110323830864054,2.0,114.22064766172811,6.345591536762672,0.019036774610288017,67.19247106981769
458,mbpp,test,458,claude_3_haiku_0_shot,"def max_profit(prices, k):
    n = len(prices)
    if n <= 1 or k == 0:
        return 0

    dp = [[0] * n for _ in range(k + 1)]

    for i in range(1, k + 1):
        max_diff = float('-inf')
        for j in range(1, n):
            max_diff = max(max_diff, dp[i - 1][j - 1] - prices[j - 1])
            dp[i][j] = max(dp[i][j - 1], max_diff + prices[j])

    return dp[k][n - 1]",passed,True,True,8.665626666394625e-05,14,11,11,0,0,3,0,6,6,13,13,26,19,39,63.61549134016113,165.66917302429982,6.0,994.0150381457989,55.22305767476661,0.05522305767476661,60.93692027851038
459,mbpp,test,459,claude_3_haiku_0_shot,"def add_pairwise(tuples):
    """"""
    Finds the pairwise addition of the elements in the given tuple.
    
    Args:
        tuples (tuple): The input tuple.
        
    Returns:
        tuple: A new tuple with the pairwise addition of the elements.
    """"""
    result = []
    for i in range(len(tuples) - 1):
        result.append(tuples[i] + tuples[i + 1])
    return tuple(result)",passed,True,True,6.243223333323537e-05,14,6,5,0,7,2,0,2,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,91.54523304021033
460,mbpp,test,460,claude_3_haiku_0_shot,"def find_remainder(arr, n):
    """"""
    Find the remainder of the product of all elements in the array divided by n.

    Args:
        arr (list): The input array.
        n (int): The divisor.

    Returns:
        int: The remainder of the product of all elements in the array divided by n.
    """"""
    product = 1
    for num in arr:
        product = (product * (num % n)) % n
    return product",failed: find_remainder() takes 2 positional arguments but 3 were given,True,False,,15,6,5,0,8,2,0,2,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,87.47964463681612
461,mbpp,test,461,claude_3_haiku_0_shot,"def is_consecutive(numbers):
    """"""
    Checks if the given list of numbers contains consecutive numbers.
    
    Args:
        numbers (list): A list of integers.
    
    Returns:
        bool: True if the list contains consecutive numbers, False otherwise.
    """"""
    if len(numbers) < 2:
        return True
    
    numbers = sorted(numbers)
    for i in range(1, len(numbers)):
        if numbers[i] != numbers[i-1] + 1:
            return False
    
    return True",failed: name 'check_Consecutive' is not defined,True,False,,19,9,8,0,7,4,0,4,4,7,4,8,11,12,27.651484454403228,41.51317942364757,2.2857142857142856,94.88726725405158,5.27151484744731,0.01383772647454919,94.60346361045508
462,mbpp,test,462,claude_3_haiku_0_shot,"def tuple_intersection(tuples1, tuples2):
    """"""
    Find the tuple intersection of elements in the given tuple lists irrespective of their order.
    
    Args:
        tuples1 (list): A list of tuples.
        tuples2 (list): Another list of tuples.
    
    Returns:
        set: A set of tuples representing the intersection of the input lists.
    """"""
    sorted_tuples1 = [tuple(sorted(t)) for t in tuples1]
    sorted_tuples2 = [tuple(sorted(t)) for t in tuples2]
    return set(sorted_tuples1) & set(sorted_tuples2)",passed,True,True,0.00019329110000019986,14,5,4,0,8,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,85.73835482285287
463,mbpp,test,463,claude_3_haiku_0_shot,"def replace_characters(input_string, character_to_replace, new_character):
    """"""
    Replaces all occurrences of a given character in a string with a new character.

    Args:
        input_string (str): The input string.
        character_to_replace (str): The character to be replaced.
        new_character (str): The new character to replace the old one.

    Returns:
        str: The modified string with the characters replaced.
    """"""
    return input_string.replace(character_to_replace, new_character)",failed: name 'replace_char' is not defined,True,False,,13,3,2,0,9,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
464,mbpp,test,464,claude_3_haiku_0_shot,"from collections import Counter

def sort_counter(counter_dict):
    return sorted(counter_dict.items(), key=lambda x: x[1], reverse=True)",passed,True,True,9.972890000729725e-05,4,4,3,0,0,1,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
465,mbpp,test,465,claude_3_haiku_0_shot,"def find_big_small_sum(numbers):
    """"""
    Finds the sum of the largest and smallest values in the given list of numbers.
    
    Args:
        numbers (list): A list of numbers.
        
    Returns:
        int: The sum of the largest and smallest values in the list.
    """"""
    if not numbers:
        return 0
    
    largest = max(numbers)
    smallest = min(numbers)
    
    return largest + smallest",failed: name 'big_sum' is not defined,True,False,,17,7,6,0,7,4,0,2,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,96.80780465143933
466,mbpp,test,466,claude_3_haiku_0_shot,"def convert_to_lowercase(text):
    """"""
    Converts the given string to lowercase.
    
    Args:
        text (str): The input string to be converted to lowercase.
    
    Returns:
        str: The lowercase version of the input string.
    """"""
    return text.lower()",failed: name 'is_lower' is not defined,True,False,,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
467,mbpp,test,467,claude_3_haiku_0_shot,"def remove_lowercase(text: str) -> str:
    """"""
    Remove all lowercase substrings from the given string.
    
    Args:
        text (str): The input string.
    
    Returns:
        str: The input string with all lowercase substrings removed.
    """"""
    return ''.join(char for char in text if not char.islower())",passed,True,True,3.236313333066694e-05,11,3,2,0,7,2,0,3,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,67.47487636752147
468,mbpp,test,468,claude_3_haiku_0_shot,"def get_first_digit(number):
    """"""
    Returns the first digit of the given number.
    """"""
    return int(abs(number)) // 10 ** int(log10(abs(number)))",failed: name 'first_Digit' is not defined,True,False,,5,3,2,0,3,0,0,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,97.72315463799069
469,mbpp,test,469,claude_3_haiku_0_shot,"def get_max_occurring_char(input_str):
    char_count = {}
    for char in input_str:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    max_count = 0
    max_char = ''
    for char, count in char_count.items():
        if count > max_count:
            max_count = count
            max_char = char
    
    return max_char",failed: name 'get_max_occuring_char' is not defined,True,False,,16,14,14,0,0,2,0,5,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,64.13591943189549
470,mbpp,test,470,claude_3_haiku_0_shot,"def is_subset_sum(numbers, target_sum):
    n = len(numbers)
    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]

    # Base cases
    for i in range(n + 1):
        dp[i][0] = True

    # Fill the dp table
    for i in range(1, n + 1):
        for j in range(1, target_sum + 1):
            if numbers[i - 1] > j:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]]

    return dp[n][target_sum]",failed: is_subset_sum() takes 2 positional arguments but 3 were given,True,False,,17,12,12,2,0,3,2,7,5,11,14,28,16,42,49.663388279447084,168.0,6.363636363636363,1069.090909090909,59.39393939393939,0.056,81.82400945958481
471,mbpp,test,471,claude_3_haiku_0_shot,"import re

def find_sequences(text):
    pattern = r'[A-Z][a-z]+'
    matches = re.findall(pattern, text)
    return matches",failed: name 'match' is not defined,True,False,,6,5,5,0,0,1,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
472,mbpp,test,472,claude_3_haiku_0_shot,"def find_first_factorial_divisible_by(x):
    factorial = 1
    for i in range(1, x + 1):
        factorial *= i
        if factorial % x == 0:
            return i
    return x",failed: name 'first_Factorial_Divisible_Number' is not defined,True,False,,7,7,7,0,0,0,0,3,4,6,4,8,10,12,23.509775004326936,39.863137138648355,2.6666666666666665,106.3016990363956,5.905649946466422,0.013287712379549451,69.95433047022944
473,mbpp,test,473,claude_3_haiku_0_shot,"def remove_matching_tuples(tuple1, tuple2):
    """"""
    Removes matching tuples from the given two tuples.
    
    Args:
        tuple1 (tuple): The first tuple.
        tuple2 (tuple): The second tuple.
    
    Returns:
        tuple: A new tuple containing the tuples from `tuple1` that are not present in `tuple2`.
    """"""
    return tuple(sub for sub in tuple1 if sub not in tuple2)",failed: name 'remove_matching_tuple' is not defined,True,False,,12,3,2,0,8,2,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,59.802389328218425
474,mbpp,test,474,claude_3_haiku_0_shot,"def is_palindrome(num: int) -> bool:
    """"""
    Checks if a given number is a palindrome.
    """"""
    original_num = num
    reversed_num = 0

    while num > 0:
        digit = num % 10
        reversed_num = reversed_num * 10 + digit
        num //= 10

    return original_num == reversed_num

def largest_palindrome(arr: list[int], n: int) -> int:
    """"""
    Finds the largest palindromic number in the given array.
    """"""
    arr.sort(reverse=True)

    for num in arr:
        if is_palindrome(num):
            return num

    return -1",passed,True,True,5.402176666654176e-05,25,16,14,0,6,5,0,2,7,8,7,13,15,20,43.65148445440323,78.13781191217038,5.6875,444.408805250469,24.6893780694705,0.026045937304056792,88.51242487117139
475,mbpp,test,475,claude_3_haiku_0_shot,"from math import factorial

def binomial_coefficient(n, k):
    return factorial(n) // (factorial(k) * factorial(n - k))

def binomial_probability(n, k, p):
    return binomial_coefficient(n, k) * (p ** k) * ((1 - p) ** (n - k))",passed,True,True,4.073213332655238e-05,7,5,5,0,0,2,0,1,4,16,9,18,20,27,72.0,116.69205856195879,2.25,262.55713176440725,14.586507320244847,0.03889735285398626,70.14474016749864
476,mbpp,test,476,claude_3_haiku_0_shot,"def sort_tuple(tuples):
    return sorted(tuples, key=lambda x: x[-1])",passed,True,True,0.00010510259999989558,2,3,2,0,0,0,0,1,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,87.34977519571046
477,mbpp,test,477,claude_3_haiku_0_shot,"def calculate_pentagon_area(side_length):
    """"""
    Calculates the area of a regular pentagon.

    Args:
        side_length (float): The length of one side of the pentagon.

    Returns:
        float: The area of the pentagon.
    """"""
    area = (5 * side_length ** 2) / (4 * math.tan(math.pi / 5))
    return area",failed: name 'area_pentagon' is not defined,True,False,,12,4,3,0,7,2,0,1,3,9,5,10,12,15,33.28421251514428,53.77443751081735,1.6666666666666667,89.62406251802892,4.9791145843349405,0.017924812503605784,73.9258484058774
478,mbpp,test,478,claude_3_haiku_0_shot,"def find_frequency_of_largest(arr):
    """"""
    Find the frequency of the largest value in a given array.
    
    Args:
        arr (list): The input array.
    
    Returns:
        int: The frequency of the largest value in the array.
    """"""
    max_value = max(arr)
    return arr.count(max_value)",failed: name 'frequency_Of_Largest' is not defined,True,False,,12,4,3,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
479,mbpp,test,479,claude_3_haiku_0_shot,"def extract_symmetric(test_list):
    """"""
    Extracts all the symmetric pairs from the given tuple list.
    
    Args:
        test_list (list): A list of tuples.
    
    Returns:
        set: A set of symmetric pairs.
    """"""
    symmetric_pairs = set()
    for a, b in test_list:
        if (b, a) in test_list and a < b:
            symmetric_pairs.add((a, b))
    return symmetric_pairs",passed,True,True,0.0001318857333330925,15,7,6,0,7,2,0,4,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,93.80470364307173
480,mbpp,test,480,claude_3_haiku_0_shot,"def sum_geometric_progression(first_term, num_terms, common_ratio):
    """"""
    Calculates the sum of a geometric progression series.
    
    Args:
        first_term (float): The first term of the geometric progression.
        num_terms (int): The number of terms in the geometric progression.
        common_ratio (float): The common ratio of the geometric progression.
    
    Returns:
        float: The sum of the geometric progression series.
    """"""
    if common_ratio == 1:
        return first_term * num_terms
    else:
        return first_term * (1 - common_ratio ** num_terms) / (1 - common_ratio)",failed: name 'sum_gp' is not defined,True,False,,16,6,5,0,9,2,0,2,5,8,7,14,13,21,35.60964047443681,77.70923408096293,4.375,339.97789910421284,18.887661061345156,0.025903078026987644,79.86370696594787
481,mbpp,test,481,claude_3_haiku_0_shot,"def binary_search(arr, target):
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return True
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return False",passed,True,True,4.9484366667229554e-05,13,11,11,0,0,2,0,4,6,10,8,16,16,24,48.72905595320056,96.0,4.8,460.79999999999995,25.599999999999998,0.032,62.865196482475824
482,mbpp,test,482,claude_3_haiku_0_shot,"import math

def calculate_polygons(start_x, start_y, end_x, end_y, radius):
    side_length = (2 * radius) * math.tan(math.pi / 6)
    half_side_length = side_length * 0.5
    base_length = side_length * math.cos(math.radians(30))
    width = base_length * 2
    height = 2 * side_length

    start_x -= width
    start_y -= height
    end_x += width
    end_y += height

    original_x = start_x
    original_y = start_y
    x_offset = base_length
    y_offset = 3 * half_side_length

    polygons = []
    row = 1

    while start_y < end_y:
        if row % 2 == 0:
            start_x = original_x + x_offset
        else:
            start_x = original_x

        while start_x < end_x:
            p1_x, p1_y = start_x, start_y + half_side_length
            p2_x, p2_y = start_x, start_y + (3 * half_side_length)
            p3_x, p3_y = start_x + base_length, start_y + height
            p4_x, p4_y = start_x + width, start_y + (3 * half_side_length)
            p5_x, p5_y = start_x + width, start_y + half_side_length
            p6_x, p6_y = start_x + base_length, start_y

            polygon = [
                (p1_x, p1_y),
                (p2_x, p2_y),
                (p3_x, p3_y),
                (p4_x, p4_y),
                (p5_x, p5_y),
                (p6_x, p6_y),
                (p1_x, p1_y)
            ]
            polygons.append(polygon)
            start_x += width

        start_y += y_offset
        row += 1

    return polygons",passed,True,True,0.0009946096333351307,52,35,43,0,0,9,0,4,7,27,31,62,34,93,148.0334470128169,473.1340442362816,8.037037037037036,3802.595837010115,211.2553242783397,0.15771134807876055,47.049468980150806
483,mbpp,test,483,claude_3_haiku_0_shot,"def binary_to_integer(binary_tuple):
    """"""
    Converts a binary tuple to an integer.
    
    Args:
        binary_tuple (tuple): A tuple of binary digits (0 or 1).
    
    Returns:
        str: The integer value of the binary tuple as a string.
    """"""
    return str(int("""".join(map(str, binary_tuple)), 2))",passed,True,True,5.91162666675397e-05,11,3,2,0,7,2,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
484,mbpp,test,484,claude_3_haiku_0_shot,"import re

def remove_lowercase(text: str) -> str:
    """"""
    Remove all lowercase substrings from the given string using regex.
    
    Args:
        text (str): The input string.
    
    Returns:
        str: The input string with all lowercase substrings removed.
    """"""
    return re.sub(r'[a-z]+', '', text)",passed,True,True,3.4778766666931916e-05,13,4,3,0,7,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
485,mbpp,test,485,claude_3_haiku_0_shot,"import heapq

def find_smallest_integers(numbers, k):
    """"""
    Find the k smallest integers from a given list of numbers using a heap queue.
    
    Args:
        numbers (list): A list of numbers.
        k (int): The number of smallest integers to find.
    
    Returns:
        list: The k smallest integers from the input list.
    """"""
    return heapq.nsmallest(k, numbers)",failed: name 'heap_queue_smallest' is not defined,True,False,,14,4,3,0,8,3,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
486,mbpp,test,486,claude_3_haiku_0_shot,"def calculate_cone_surface_area(radius, height):
    """"""
    Calculates the surface area of a cone.
    
    Args:
        radius (float): The radius of the cone's base.
        height (float): The height of the cone.
    
    Returns:
        float: The surface area of the cone.
    """"""
    slant_length = (radius ** 2 + height ** 2) ** 0.5
    surface_area = math.pi * radius * (radius + slant_length)
    return surface_area",failed: name 'surfacearea_cone' is not defined,True,False,,14,5,4,0,8,2,0,1,3,11,7,14,14,21,42.808635307173745,79.95445336320968,1.9090909090909092,152.64032005703666,8.480017780946481,0.026651484454403226,77.42497626488617
487,mbpp,test,487,claude_3_haiku_0_shot,"def gcd(a, b):
    """"""
    Find the greatest common divisor of two positive integers.
    
    Args:
        a (int): A positive integer.
        b (int): A positive integer.
    
    Returns:
        int: The greatest common divisor of a and b.
    """"""
    while b:
        a, b = b, a % b
    return a",passed,True,True,3.0114600000767193e-05,14,5,4,0,8,2,0,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,85.87285774682948
488,mbpp,test,488,claude_3_haiku_0_shot,"def calculate_circle_diameter(radius):
    """"""
    Calculates the diameter of a circle given its radius.

    Args:
        radius (float): The radius of the circle.

    Returns:
        float: The diameter of the circle.
    """"""
    return 2 * radius",failed: name 'diameter_circle' is not defined,True,False,,11,3,2,0,7,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,65.11035329571214
489,mbpp,test,489,claude_3_haiku_0_shot,"def concatenate_elements(lst):
    return ' '.join(lst)",failed: ,True,False,,2,2,2,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
490,mbpp,test,490,claude_3_haiku_0_shot,"def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def num_common_divisors(a, b):
    g = gcd(a, b)
    count = 0
    for i in range(1, int(g ** 0.5) + 1):
        if g % i == 0:
            count += 1
            if i != g // i:
                count += 1
    return count",failed: name 'num_comm_div' is not defined,True,False,,14,13,13,0,0,1,0,2,6,11,9,18,17,27,53.563522809337215,110.36149671375918,4.909090909090909,541.7746202311814,30.098590012843413,0.03678716557125306,60.724129584822855
491,mbpp,test,491,claude_3_haiku_0_shot,"def find_remainder(num1, num2):
    """"""
    Finds the remainder of two numbers.

    Args:
        num1 (int): The first number.
        num2 (int): The second number.

    Returns:
        int: The remainder of num1 divided by num2.
    """"""
    return num1 % num2",failed: name 'find' is not defined,True,False,,12,3,2,0,8,2,0,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,60.07139517617164
492,mbpp,test,492,claude_3_haiku_0_shot,"def add_consecutive_numbers(numbers):
    """"""
    Adds consecutive numbers in a given list.

    Args:
        numbers (list): A list of numbers.

    Returns:
        list: A list of sums of consecutive numbers.
    """"""
    sums = []
    for i in range(len(numbers) - 1):
        sums.append(numbers[i] + numbers[i + 1])
    return sums",failed: name 'add_consecutive_nums' is not defined,True,False,,14,6,5,0,7,2,0,2,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,91.54523304021033
493,mbpp,test,493,claude_3_haiku_0_shot,"def sum_of_cubes(n):
    return (n * (n + 1) * (2 * n + 1)) // 6",failed: name 'sum_Of_Series' is not defined,True,False,,2,2,2,0,0,0,0,1,3,9,6,12,12,18,33.28421251514428,64.52932501298082,2.0,129.05865002596164,7.169925001442313,0.02150977500432694,80.62689641014298
494,mbpp,test,494,claude_3_haiku_0_shot,"def move_zeroes_to_end(arr):
    """"""
    Moves all zeroes to the end of the given array.
    
    Args:
        arr (list): The input array.
    
    Returns:
        list: The modified array with all zeroes moved to the end.
    """"""
    non_zero_index = 0
    for i in range(len(arr)):
        if arr[i] != 0:
            arr[non_zero_index], arr[i] = arr[i], arr[non_zero_index]
            non_zero_index += 1
    return arr",failed: name 're_order' is not defined,True,False,,16,8,7,0,7,2,0,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,97.2021950389286
495,mbpp,test,495,claude_3_haiku_0_shot,"def permutation_coefficient(n, k):
    """"""
    Calculate the permutation coefficient of given p(n, k).
    
    Args:
        n (int): The total number of elements.
        k (int): The number of elements to be chosen.
    
    Returns:
        int: The permutation coefficient of p(n, k).
    """"""
    if k > n:
        return 0
    
    p = [[0] * (k + 1) for _ in range(n + 1)]
    
    for i in range(n + 1):
        for j in range(min(i, k) + 1):
            if j == 0:
                p[i][j] = 1
            else:
                p[i][j] = p[i - 1][j] + j * p[i - 1][j - 1]
            
            if j < k:
                p[i][j + 1] = 0
    
    return p[n][k]",passed,True,True,6.0387466666611546e-05,27,14,13,0,8,6,0,7,6,12,14,28,18,42,58.52932501298082,175.1368500605771,7.0,1225.9579504240396,68.10877502355775,0.05837895002019237,87.54479627829473
496,mbpp,test,496,claude_3_haiku_0_shot,"def remove_words(original_list, words_to_remove):
    return [word for word in original_list if word not in words_to_remove]",passed,True,True,8.525516666679778e-05,2,2,2,0,0,0,0,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,88.28848882059837
497,mbpp,test,497,claude_3_haiku_0_shot,"def check_common_order(list1, list2):
    """"""
    Checks if the common elements between two lists are in the same order.
    
    Args:
        list1 (list): The first list.
        list2 (list): The second list.
    
    Returns:
        bool: True if the common elements are in the same order, False otherwise.
    """"""
    common_elements = [elem for elem in list1 if elem in list2]
    return common_elements == [elem for elem in list2 if elem in list1]",failed: name 'same_order' is not defined,True,False,,13,4,3,0,8,2,0,5,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,69.36363810838625
498,mbpp,test,498,claude_3_haiku_0_shot,"def average_odd(n):
    if n % 2 == 0:
        return ""Invalid Input""
    
    total = 0
    count = 0
    
    while n >= 1:
        total += n
        count += 1
        n -= 2
    
    return total // count",failed: name 'average_Odd' is not defined,True,False,,13,10,10,0,0,3,0,3,6,7,7,14,13,21,35.161259458730164,77.70923408096293,6.0,466.2554044857776,25.903078026987643,0.025903078026987644,64.54541298808176
499,mbpp,test,499,claude_3_haiku_0_shot,"def count_subsequences_with_product_less_than_k(arr, k):
    n = len(arr)
    dp = [[0] * (n + 1) for _ in range(k + 1)]

    for i in range(1, k + 1):
        for j in range(1, n + 1):
            dp[i][j] = dp[i][j - 1]
            if 0 < arr[j - 1] <= i:
                dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1

    return dp[k][n]",failed: name 'no_of_subsequences' is not defined,True,False,,11,9,9,0,0,2,0,5,6,13,14,27,19,41,63.61549134016113,174.165028051187,6.230769230769231,1085.182097857396,60.28789432541089,0.05805500935039566,62.820435529679145
