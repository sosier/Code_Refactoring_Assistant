,dataset,split,task_id,model,code,result,avg_test_time,passed_tests,compiled,loc,lloc,sloc,comments,multi,blank,single_comments,CC,h1,h2,N1,N2,vocabulary,length,calculated_length,volume,difficulty,effort,time,bugs,MI
0,mbpp,test,0,canonical_solution,"# Write a python function to remove first and last occurrence of a given character from the string.
def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ",passed,5.770890999997391e-05,True,True,11,12,10,1,0,0,1,5,4,10,9,16,14,25,41.219280948873624,95.18387305144009,3.2,304.58839376460827,16.921577431367126,0.03172795768381336,79.74978038512238
1,mbpp,test,1,canonical_solution,"# Write a function to sort a given matrix in ascending order according to the sum of its rows.
def sort_matrix(M):
    result = sorted(M, key=sum)
    return result",passed,0.00012915671999962796,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
2,mbpp,test,2,canonical_solution,"# Write a function to count the most common words in a dictionary.
from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
",passed,0.00019728690000022197,True,True,6,5,5,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
3,mbpp,test,3,canonical_solution,"# Write a python function to find the volume of a triangular prism.
def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ",passed,3.276642000002994e-05,True,True,3,2,2,1,0,0,1,1,2,6,3,6,8,9,17.509775004326936,27.0,1.0,27.0,1.5,0.009,100.0
4,mbpp,test,4,canonical_solution,"# Write a function to split a string at lowercase letters.
import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))",passed,5.6742459999981065e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
5,mbpp,test,5,canonical_solution,"# Write a function to find sequences of lowercase letters joined with an underscore.
import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",passed,4.932055000040236e-05,True,True,8,7,7,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
6,mbpp,test,6,canonical_solution,"# Write a function to find the perimeter of a square.
def square_perimeter(a):
  perimeter=4*a
  return perimeter",passed,2.630038000006607e-05,True,True,4,3,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
7,mbpp,test,7,canonical_solution,"# Write a function to remove characters from the first string which are present in the second string.
NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ",passed,4.375619000001052e-05,True,True,27,27,26,1,0,0,1,2,4,10,6,12,14,18,41.219280948873624,68.53238859703687,2.4,164.4777326328885,9.13765181293825,0.022844129532345624,66.8065719335727
8,mbpp,test,8,canonical_solution,"# Write a function to find whether a given array of integers contains any duplicate element.
def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ",passed,5.406339999993292e-05,True,True,4,3,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
9,mbpp,test,9,canonical_solution,"# Write a function to check if the given number is woodball or not.
def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False",passed,5.5587300000183856e-05,True,True,14,13,13,1,0,0,1,5,4,7,9,18,11,27,27.651484454403228,93.40465370320705,5.142857142857143,480.3667904736363,26.687043915202015,0.031134884567735683,77.12544340562442
10,mbpp,test,10,canonical_solution,"# Write a function to find m number of multiples of n.
def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)",passed,4.9990340000007905e-05,True,True,4,3,3,1,0,0,1,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
11,mbpp,test,11,canonical_solution,"# Write a function to find the first duplicate element in a given array of integers.
def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate",passed,4.985278000020799e-05,True,True,13,9,9,1,0,3,1,3,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,89.95262355061506
12,mbpp,test,12,canonical_solution,"# Write a python function to find the maximum sum of elements of list in a list of lists.
def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ",passed,0.00012709957999959442,True,True,9,8,8,1,0,0,1,3,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,91.99613261244289
13,mbpp,test,13,canonical_solution,"# Write a function to convert the given binary number to its decimal equivalent.
def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)",passed,2.8966699999841695e-05,True,True,10,9,9,1,0,0,1,2,5,9,6,12,14,18,40.13896548741762,68.53238859703687,3.3333333333333335,228.44129532345625,12.691183073525346,0.022844129532345624,84.6880344960279
14,mbpp,test,14,canonical_solution,"# Write a python function to find the product of non-repeated elements in a given array.
def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ",passed,7.519023999975616e-05,True,True,8,7,7,1,0,0,1,3,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,91.60114355223193
15,mbpp,test,15,canonical_solution,"# Write a function to check if the given tuple list has all k elements.
def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ",passed,9.758132999991176e-05,True,True,8,7,7,1,0,0,1,4,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,96.91526591479679
16,mbpp,test,16,canonical_solution,"# Write a python function to remove all digits from a list of strings.
import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list",passed,7.703773000002911e-05,True,True,6,5,5,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
17,mbpp,test,17,canonical_solution,"# Write a python function to find binomial co-efficient.
def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",passed,0.000556535169999961,True,True,7,6,6,1,0,0,1,4,5,8,8,16,13,24,35.60964047443681,88.81055323538621,5.0,444.0527661769311,24.669598120940616,0.029603517745128736,90.73264600487364
18,mbpp,test,18,canonical_solution,"# Write a python function to find the element occurring odd number of times.
def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1",passed,7.147561000010683e-05,True,True,10,9,9,1,0,0,1,5,5,7,5,9,12,14,31.26112492884004,50.18947501009619,3.2142857142857144,161.32331253245204,8.962406251802891,0.016729825003365395,85.2317805803573
19,mbpp,test,19,canonical_solution,"# Write a python function to count all the substrings starting and ending with same characters.
def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ",passed,3.809229000125924e-05,True,True,11,10,10,1,0,0,1,1,3,10,6,12,13,18,37.974168451037094,66.60791492653966,1.8,119.8942468677714,6.660791492653967,0.022202638308846556,82.69711501101054
20,mbpp,test,20,canonical_solution,"# Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.
def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result",passed,0.00017436230000015485,True,True,23,22,22,1,0,0,1,8,4,7,4,8,11,12,27.651484454403228,41.51317942364757,2.2857142857142856,94.88726725405158,5.27151484744731,0.01383772647454919,70.81099697735415
21,mbpp,test,21,canonical_solution,"# Write a python function to find the largest prime factor of a given number.
import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)",passed,2.8362420000576094e-05,True,True,14,13,13,1,0,0,1,5,7,8,9,17,15,26,43.65148445440323,101.57915548582149,7.4375,755.4949689257974,41.971942718099854,0.033859718495273826,76.87031747192076
22,mbpp,test,22,canonical_solution,"# Write a python function to convert a decimal number to binary number.
def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  ",passed,2.8552040000704436e-05,True,True,11,10,10,1,0,0,1,2,5,9,6,12,14,18,40.13896548741762,68.53238859703687,3.3333333333333335,228.44129532345625,12.691183073525346,0.022844129532345624,82.87950574671106
23,mbpp,test,23,canonical_solution,"# Write a python function to find the missing number in a sorted array.
def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ",passed,5.428121000022656e-05,True,True,14,13,13,1,0,0,1,5,8,14,15,29,22,44,77.30296890880645,196.21499122004107,8.285714285714286,1625.7813558231976,90.32118643462209,0.06540499707334703,74.86824874523239
24,mbpp,test,24,canonical_solution,"# Write a function to find the n-th rectangular number.
def find_rect_num(n):
  return n*(n + 1) ",passed,2.5385540000115724e-05,True,True,3,2,2,1,0,0,1,1,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,100.0
25,mbpp,test,25,canonical_solution,"# Write a python function to find the nth digit in the proper fraction of two given numbers.
def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  ",passed,3.395705000002636e-05,True,True,8,7,7,1,0,0,1,2,5,6,5,10,11,15,27.11941547876375,51.89147427955947,4.166666666666667,216.21447616483113,12.011915342490617,0.01729715809318649,89.91649186084724
26,mbpp,test,26,canonical_solution,"# Write a function to sort a given mixed list of integers and strings.
def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part",passed,0.00010675256000013178,True,True,5,4,4,1,0,0,1,5,2,6,3,6,8,9,17.509775004326936,27.0,1.0,27.0,1.5,0.009,100.0
27,mbpp,test,27,canonical_solution,"# Write a function to find the division of first even and odd number of a given list.
def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)",passed,5.966517999922871e-05,True,True,5,4,4,1,0,0,1,5,5,8,7,12,13,19,35.60964047443681,70.30835464468075,3.75,263.6563299175528,14.647573884308489,0.02343611821489358,98.41907886172473
28,mbpp,test,28,canonical_solution,"# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.
import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")",passed,4.4743619999962904e-05,True,True,17,18,16,1,0,0,1,7,5,13,11,20,18,31,59.715356810271004,129.26767504471167,3.8461538461538463,497.18336555658334,27.621298086476852,0.043089225014903886,71.36970980103042
29,mbpp,test,29,canonical_solution,"# Write a function to find frequency of the elements in a given list of lists using collections module.
from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result",passed,0.00017628912999995806,True,True,6,5,5,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
30,mbpp,test,30,canonical_solution,"# Write a function to filter even numbers using lambda function.
def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums",passed,7.937735999917095e-05,True,True,4,4,3,1,0,0,1,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
31,mbpp,test,31,canonical_solution,"# Write a python function to find the sum of repeated elements in a given array.
def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])",passed,7.378395000046112e-05,True,True,3,2,2,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
32,mbpp,test,32,canonical_solution,"# Write a function to find sequences of lowercase letters joined with an underscore using regex.
import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')",passed,4.209208000006015e-05,True,True,8,7,7,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
33,mbpp,test,33,canonical_solution,"# Write a function that matches a word at the beginning of a string.
import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'",passed,4.1656380000176795e-05,True,True,8,7,7,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
34,mbpp,test,34,canonical_solution,"# Write a function to find the gcd of the given array elements.
def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd",passed,4.878373000110514e-05,True,True,12,11,11,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,89.24054634982593
35,mbpp,test,35,canonical_solution,"# Write a python function to determine whether all the numbers are different from each other are not.
def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;",passed,4.627258000027723e-05,True,True,6,5,5,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
36,mbpp,test,36,canonical_solution,"# Write a python function to find the last digit when factorial of a divides factorial of b.
def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10",passed,5.976028000020506e-05,True,True,11,10,10,1,0,0,1,4,6,10,9,18,16,27,48.72905595320056,108.0,5.4,583.2,32.400000000000006,0.036,81.22740703892222
37,mbpp,test,37,canonical_solution,"# Write a python function to set all odd bits of a given number.
def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)",passed,2.9057910000176436e-05,True,True,9,10,8,1,0,0,1,3,7,9,8,16,16,24,48.18080946738404,96.0,6.222222222222222,597.3333333333334,33.18518518518519,0.032,83.45812687002184
38,mbpp,test,38,canonical_solution,"# Write a function to extract every first or specified element from a given two-dimensional list.
def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    ",passed,0.00010968542000000525,True,True,5,3,3,1,0,1,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
39,mbpp,test,39,canonical_solution,"# Write a function to find the list with minimum length using lambda function.
def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)",passed,0.00014606661000016175,True,True,5,5,4,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
40,mbpp,test,40,canonical_solution,"# Write a function to print check if the triangle is equilateral or not.
def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False",passed,3.35519300000442e-05,True,True,6,5,5,1,0,0,1,2,1,3,2,3,4,5,4.754887502163469,10.0,0.5,5.0,0.2777777777777778,0.0033333333333333335,100.0
41,mbpp,test,41,canonical_solution,"# Write a function to caluclate area of a parallelogram.
def parallelogram_area(b,h):
  area=b*h
  return area",passed,2.9605320000882785e-05,True,True,4,3,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
42,mbpp,test,42,canonical_solution,"# Write a python function to check whether the first and last characters of a given string are equal or not.
def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ",passed,3.1108569999105384e-05,True,True,6,5,5,1,0,0,1,2,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,100.0
43,mbpp,test,43,canonical_solution,"# Write a function to sort the given array by using counting sort.
def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list",passed,0.00011557401000004574,True,True,15,14,14,1,0,0,1,6,3,7,6,12,10,18,24.406371956566698,59.794705707972525,2.5714285714285716,153.75781467764364,8.542100815424646,0.019931568569324175,77.12869723408866
44,mbpp,test,44,canonical_solution,"# Write a function to find t-nth term of geometric series.
import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn",passed,3.494369999998526e-05,True,True,5,4,4,1,0,0,1,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
45,mbpp,test,45,canonical_solution,"# Write a python function to check if a given number is one less than twice its reverse.
def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ",passed,2.669674000003397e-05,True,True,9,8,8,1,0,0,1,2,6,12,8,16,18,24,58.52932501298082,100.07820003461549,4.0,400.31280013846197,22.23960000769233,0.0333594000115385,85.5801071899752
46,mbpp,test,46,canonical_solution,"# Write a python function to find the largest number that can be formed with the given digits.
def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ",passed,4.733828000006213e-05,True,True,7,6,6,1,0,0,1,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,96.30819107998695
47,mbpp,test,47,canonical_solution,"# Write a python function to check whether the given two integers have opposite sign or not.
def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ",passed,2.299634999985756e-05,True,True,3,2,2,1,0,0,1,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
48,mbpp,test,48,canonical_solution,"# Write a function to find the nth octagonal number.
def is_octagonal(n): 
	return 3 * n * n - 2 * n ",passed,2.5566460000163715e-05,True,True,3,2,2,1,0,0,1,1,2,6,4,8,8,12,17.509775004326936,36.0,1.3333333333333333,48.0,2.6666666666666665,0.012,100.0
49,mbpp,test,49,canonical_solution,"# Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.
def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max",passed,6.921625000003928e-05,True,True,14,13,13,1,0,0,1,8,5,12,7,14,17,21,54.62919048309069,85.83671966625714,2.9166666666666665,250.3570990265833,13.908727723699073,0.02861223988875238,76.97887632342268
50,mbpp,test,50,canonical_solution,"# Write a python function to count number of substrings with the sum of digits equal to their length.
from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count",passed,3.848094000090896e-05,True,True,11,11,10,1,0,0,1,2,2,12,9,18,14,27,45.01955000865388,102.7985828955553,1.5,154.19787434333296,8.566548574629609,0.03426619429851843,80.74357388999029
51,mbpp,test,51,canonical_solution,"# Write a python function to find smallest number in a list.
def smallest_num(xs):
  return min(xs)
",passed,4.3249889999970035e-05,True,True,3,2,2,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
52,mbpp,test,52,canonical_solution,"# Write a function to find the maximum difference between available pairs in the given tuple list.
def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ",passed,8.489063000013176e-05,True,True,5,4,4,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
53,mbpp,test,53,canonical_solution,"# Write a function to sort a list of tuples using lambda.
def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks",passed,0.00011891074000004664,True,True,5,4,3,2,0,0,2,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
54,mbpp,test,54,canonical_solution,"# Write a function of recursion list sum.
def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total",passed,6.443365999984962e-05,True,True,9,8,8,1,0,0,1,3,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,89.63140530437443
55,mbpp,test,55,canonical_solution,"# Write a python function to count positive numbers in a list.
def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ",passed,4.2305570000280566e-05,True,True,7,6,6,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,96.17368815601037
56,mbpp,test,56,canonical_solution,"# Write a function to find the number of ways to partition a set of bell numbers.
def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ",passed,0.00033181509999998584,True,True,9,8,8,1,0,0,1,5,2,6,10,20,8,30,17.509775004326936,90.0,3.3333333333333335,300.0,16.666666666666668,0.03,85.4993700520134
57,mbpp,test,57,canonical_solution,"# Write a python function to check whether the given array is monotonic or not.
def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",passed,4.6861420000041674e-05,True,True,4,2,3,1,0,0,1,4,5,10,7,14,15,21,44.82892142331043,82.0447025077789,3.5,287.15645877722613,15.953136598734785,0.02734823416925963,100.0
58,mbpp,test,58,canonical_solution,"# Write a function to check whether a list contains the given sublist or not.
def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set",passed,0.00011043050999997916,True,True,18,17,17,1,0,0,1,9,5,16,10,20,21,30,75.60964047443682,131.76952268336282,3.125,411.77975838550884,22.87665324363938,0.04392317422778761,71.18928570214877
59,mbpp,test,59,canonical_solution,"# Write a function to find whether all the given tuples have equal length or not.
def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")",passed,6.373371999984556e-05,True,True,13,12,12,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,84.04965560943826
60,mbpp,test,60,canonical_solution,"# Write a function to sort a list of elements using comb sort.
def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums",passed,7.08703999998761e-05,True,True,16,15,15,1,0,0,1,5,5,11,10,20,16,30,49.663388279447084,120.0,4.545454545454546,545.4545454545455,30.303030303030305,0.04,74.02166276908561
61,mbpp,test,61,canonical_solution,"# Write a python function to check whether the given number can be represented as difference of two squares or not.
def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False",passed,2.5423980000027767e-05,True,True,5,4,4,1,0,0,1,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
62,mbpp,test,62,canonical_solution,"# Write a function to split the given string with multiple delimiters by using regex.
import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))",passed,4.990126999985023e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
63,mbpp,test,63,canonical_solution,"# Write a function to check whether it follows the sequence given in the patterns array.
def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True",passed,5.978553000005604e-05,True,True,27,21,21,1,0,5,1,8,4,11,6,12,15,18,46.053747805010275,70.32403072095333,2.1818181818181817,153.43424884571635,8.52412493587313,0.02344134357365111,69.92294063462
64,mbpp,test,64,canonical_solution,"# Write a function to find tuples which have all elements divisible by k from the given list of tuples.
def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ",passed,8.990382999996882e-05,True,True,4,3,3,1,0,0,1,4,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
65,mbpp,test,65,canonical_solution,"# Write a python function to count the number of squares in a rectangle.
def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",passed,2.9787230000692945e-05,True,True,7,6,6,1,0,0,1,2,5,16,13,26,21,39,75.60964047443682,171.30037948837168,4.0625,695.9077916715099,38.661543981750555,0.05710012649612389,89.00402126688148
66,mbpp,test,66,canonical_solution,"# Write a python function to find the difference between sum of even and odd digits.
def is_Diff(n): 
    return (n % 11 == 0) ",passed,2.4578690000001123e-05,True,True,3,2,2,1,0,0,1,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
67,mbpp,test,67,canonical_solution,"# Write a python function to find number of integers with odd number of set bits.
def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans ",passed,2.6177910001479177e-05,True,True,9,8,8,1,0,0,1,3,4,9,8,16,13,24,36.52932501298081,88.81055323538621,3.5555555555555554,315.7708559480398,17.542825330446657,0.029603517745128736,85.80883306967026
68,mbpp,test,68,canonical_solution,"# Write a python function to check whether the length of the word is odd or not.
def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False",passed,2.669113999985484e-05,True,True,8,7,7,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,93.45447839703378
69,mbpp,test,69,canonical_solution,"# Write a function to find the nth tetrahedral number.
def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6",passed,2.6745399999867913e-05,True,True,3,2,2,1,0,0,1,1,3,8,5,10,11,15,28.75488750216347,51.89147427955947,1.875,97.296514274174,5.405361904120777,0.01729715809318649,100.0
70,mbpp,test,70,canonical_solution,"# Write a function to zip the two given tuples.
def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ",passed,0.00014227039999980206,True,True,6,5,5,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
71,mbpp,test,71,canonical_solution,"# Write a function to find the volume of a sphere.
import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume",passed,3.0443929999819376e-05,True,True,5,4,4,1,0,0,1,1,2,8,5,10,10,15,26.0,49.82892142331044,1.25,62.28615177913805,3.4603417655076694,0.016609640474436815,100.0
72,mbpp,test,72,canonical_solution,"# Write a python function to find the character made by adding all the characters of the given string.
def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)",passed,2.8512559999853693e-05,True,True,10,9,9,1,0,0,1,3,4,11,8,16,15,24,46.053747805010275,93.76537429460444,2.909090909090909,272.7719979479402,15.153999885996676,0.03125512476486815,83.60023112909559
73,mbpp,test,73,canonical_solution,"# Write a function to find the n-th number in newman conway sequence.
def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))",passed,0.00011098412000023927,True,True,6,5,5,1,0,0,1,3,4,8,7,14,12,21,32.0,75.28421251514429,3.5,263.494743803005,14.638596877944723,0.025094737505048096,94.58917385565414
74,mbpp,test,74,canonical_solution,"# Write a function to find the surface area of a sphere.
import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea",passed,3.116509999927075e-05,True,True,5,4,4,1,0,0,1,1,1,5,3,6,6,9,11.60964047443681,23.264662506490403,0.6,13.95879750389424,0.7754887502163467,0.007754887502163467,100.0
75,mbpp,test,75,canonical_solution,"# Write a function to find nth centered hexagonal number.
def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1",passed,2.6877519999857213e-05,True,True,3,2,2,1,0,0,1,1,3,6,4,8,9,12,20.264662506490406,38.03910001730775,2.0,76.0782000346155,4.226566668589751,0.012679700005769252,100.0
76,mbpp,test,76,canonical_solution,"# Write a function to merge three dictionaries into a single expression.
import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict",passed,0.00018647488999931738,True,True,5,4,4,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
77,mbpp,test,77,canonical_solution,"# Write a function to get the frequency of the elements in a list.
import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count",passed,0.00010871239000039168,True,True,5,4,4,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
78,mbpp,test,78,canonical_solution,"# Write a function to find the closest smaller number than n.
def closest_num(N):
  return (N - 1)",passed,2.5076509999735208e-05,True,True,3,2,2,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
79,mbpp,test,79,canonical_solution,"# Write a python function to find the length of the longest word.
def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max",passed,4.027485999984037e-05,True,True,7,6,6,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,99.76897859774995
80,mbpp,test,80,canonical_solution,"# Write a function to check if a substring is present in a given list of string values.
def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False",passed,5.546385999991799e-05,True,True,5,4,4,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
81,mbpp,test,81,canonical_solution,"# Write a function to check whether the given number is undulating or not.
def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True",passed,3.257402000031106e-05,True,True,8,7,7,1,0,0,1,4,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,91.63418292560564
82,mbpp,test,82,canonical_solution,"# Write a function to calculate the value of 'a' to the power 'b'.
def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)",passed,3.029244000003928e-05,True,True,10,9,9,1,0,0,1,4,3,5,5,10,8,15,16.36452797660028,45.0,3.0,135.0,7.5,0.015,85.69817990182985
83,mbpp,test,83,canonical_solution,"# Write a function to extract the index minimum value record from the given tuples.
from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ",passed,5.3533530000038354e-05,True,True,5,4,4,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
84,mbpp,test,84,canonical_solution,"# Write a python function to find the minimum length of sublist.
def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ",passed,6.173203999992438e-05,True,True,4,3,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
85,mbpp,test,85,canonical_solution,"# Write a python function to find the number of divisors of a given integer.
def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x",passed,7.185665000008612e-05,True,True,5,4,4,1,0,0,1,4,3,4,3,5,7,8,12.75488750216347,22.458839376460833,1.875,42.11032383086406,2.3394624350480036,0.007486279792153611,100.0
86,mbpp,test,86,canonical_solution,"# Write a function to find frequency count of list of lists.
def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
",passed,0.00018081686999948943,True,True,12,11,11,1,0,0,1,5,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,85.37625006013312
87,mbpp,test,87,canonical_solution,"# Write a function to multiply all the numbers in a list and divide with the length of the list.
def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ",passed,4.937794999932521e-05,True,True,6,5,5,1,0,0,1,2,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,99.85407908721824
88,mbpp,test,88,canonical_solution,"# Write a function to convert the given decimal number to its binary equivalent.
def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ",passed,2.6760179999882893e-05,True,True,3,2,2,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
89,mbpp,test,89,canonical_solution,"# Write a function to find the next smallest palindrome of a specified number.
import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i",passed,6.431647999988855e-05,True,True,7,6,6,1,0,0,1,3,3,4,3,5,7,8,12.75488750216347,22.458839376460833,1.875,42.11032383086406,2.3394624350480036,0.007486279792153611,95.04789179829898
90,mbpp,test,90,canonical_solution,"# Write a function to find the kth element in the given array.
def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]",passed,6.05427900001132e-05,True,True,7,6,6,1,0,0,1,4,4,10,8,16,14,24,41.219280948873624,91.37651812938249,3.2,292.404858014024,16.244714334112444,0.03045883937646083,90.64603089262097
91,mbpp,test,91,canonical_solution,"# Write a function to convert snake case string to camel case string.
def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))",passed,3.429400000641181e-05,True,True,4,3,3,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
92,mbpp,test,92,canonical_solution,"# Write a function to find eulerian number a(n, m).
def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",passed,3.2619240000713036e-05,True,True,7,6,6,1,0,0,1,4,6,12,12,24,18,36,58.52932501298082,150.11730005192322,6.0,900.7038003115393,50.03910001730774,0.05003910001730774,89.13642388999588
93,mbpp,test,93,canonical_solution,"# Write a function to sort each sublist of strings in a given list of lists using lambda function.
def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result",passed,0.00011757281999962288,True,True,4,4,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
94,mbpp,test,94,canonical_solution,"# Write a python function to count true booleans in the given list.
def count(lst):   
    return sum(lst) ",passed,2.6803519999987203e-05,True,True,3,2,2,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
95,mbpp,test,95,canonical_solution,"# Write a function to add the given list to the given tuples.
def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ",passed,7.275815999946645e-05,True,True,4,3,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
96,mbpp,test,96,canonical_solution,"# Write a python function to count hexadecimal numbers for a given range.
def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ",passed,3.162399000075311e-05,True,True,13,12,12,1,0,0,1,7,8,12,11,22,20,33,67.01955000865388,142.62362713128297,7.333333333333333,1045.9065989627418,58.10592216459676,0.04754120904376099,76.89910514074369
97,mbpp,test,97,canonical_solution,"# Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.
import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)",passed,0.00022945825000078912,True,True,8,7,7,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
98,mbpp,test,98,canonical_solution,"# Write a python function to find the count of rotations of a binary string with odd value.
def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ",passed,3.347134001160157e-05,True,True,7,6,6,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,96.17368815601037
99,mbpp,test,99,canonical_solution,"# Write a function to extract the ranges that are missing from the given list with the given start range and end range values.
def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ",passed,0.000148711770000034,True,True,10,9,9,1,0,0,1,4,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,89.26369250071532
100,mbpp,test,100,canonical_solution,"# Write a function to find common elements in given nested lists. * list item * list item * list item * list item
def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result",passed,0.00012048564999986411,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
101,mbpp,test,101,canonical_solution,"# Write a python function to find the perimeter of a cylinder.
def perimeter(diameter,height) : 
    return 2*(diameter+height)  ",passed,2.8340650000018287e-05,True,True,3,2,2,1,0,0,1,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
102,mbpp,test,102,canonical_solution,"# Write a function to check if a string represents an integer or not.
def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False",passed,2.9786669999793956e-05,True,True,13,11,12,1,0,0,1,7,3,9,5,10,12,15,33.28421251514428,53.77443751081735,1.6666666666666667,89.62406251802892,4.9791145843349405,0.017924812503605784,80.68958545508535
103,mbpp,test,103,canonical_solution,"# Write a function to assign frequency to each tuple in the given tuple list.
from collections import Counter 
def assign_freq(test_list):
  res = [(*key, val) for key, val in Counter(test_list).items()]
  return (str(res)) ",passed,0.00013237373999800184,True,True,5,4,4,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
104,mbpp,test,104,canonical_solution,"# Write a function to check whether all dictionaries in a list are empty or not.
def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit",passed,4.093573000091055e-05,True,True,4,3,3,1,0,0,1,2,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,100.0
105,mbpp,test,105,canonical_solution,"# Write a function to convert a given tuple of positive integers into an integer.
def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result",passed,4.07437600006233e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
106,mbpp,test,106,canonical_solution,"# Write a function to convert all possible convertible elements in the list to float.
def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return (str(res)) ",passed,0.00010871189999988928,True,True,12,11,11,1,0,0,1,4,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
107,mbpp,test,107,canonical_solution,"# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.
def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst",passed,3.9612059999853955e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
108,mbpp,test,108,canonical_solution,"# Write a python function to find the element that appears only once in a sorted array.
def search(arr,n) :
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)",passed,6.112519999998511e-05,True,True,6,5,5,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
109,mbpp,test,109,canonical_solution,"# Write a function to find the maximum product from the pairs of tuples within a given list.
def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max",passed,7.588855999983935e-05,True,True,4,3,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
110,mbpp,test,110,canonical_solution,"# Write a function to find the triplet with sum of the given array
def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)",passed,5.247300999997151e-05,True,True,8,6,7,1,0,0,1,7,6,14,13,27,20,40,68.81274391313339,172.8771237954945,5.785714285714286,1000.2176448167896,55.567646934266094,0.0576257079318315,87.04480931514318
111,mbpp,test,111,canonical_solution,"# Write a function to find n’th smart number.
MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ",passed,0.002590175830000021,True,True,16,15,15,1,0,0,1,5,5,13,9,18,18,27,59.715356810271004,112.58797503894243,3.4615384615384617,389.7276059040315,21.651533661335083,0.03752932501298081,74.21554317683457
112,mbpp,test,112,canonical_solution,"# Write a function to sum all amicable numbers from 1 to a specified number.
def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)",passed,5.2365503099,True,True,16,15,15,1,0,0,1,11,8,13,11,21,21,32,72.10571633583419,140.55415752892034,6.461538461538462,908.1960948022545,50.45533860012525,0.04685138584297345,72.73386984527946
113,mbpp,test,113,canonical_solution,"# Write a function to get the angle of a complex number.
import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle",passed,3.629359999990811e-05,True,True,6,5,5,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
114,mbpp,test,114,canonical_solution,"# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
def find_length(string, n): 
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0",passed,3.899818000263622e-05,True,True,10,9,9,1,0,0,1,5,4,6,4,7,10,11,23.509775004326936,36.541209043760986,2.3333333333333335,85.26282110210897,4.736823394561609,0.012180403014586996,86.19686623278895
115,mbpp,test,115,canonical_solution,"# Write a python function to find the sum of common divisors of two given numbers.
def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum",passed,3.8944089999972676e-05,True,True,7,6,6,1,0,0,1,4,4,9,6,12,13,18,36.52932501298081,66.60791492653966,2.6666666666666665,177.62110647077242,9.867839248376246,0.022202638308846556,91.60746868133522
116,mbpp,test,116,canonical_solution,"# Write a function to multiply two integers without using the * operator in python.
def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)",passed,3.287413999998989e-05,True,True,10,9,9,1,0,0,1,4,5,6,7,12,11,19,27.11941547876375,65.72920075410866,5.0,328.6460037705433,18.25811132058574,0.021909733584702887,84.54602778306513
117,mbpp,test,117,canonical_solution,"# Write a function to shortlist words that are longer than n from a given list of words.
def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	",passed,4.992753999999877e-05,True,True,8,7,7,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,97.04976883877337
118,mbpp,test,118,canonical_solution,"# Write a function to calculate magic square.
def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True",passed,9.708239000000063e-05,True,True,18,17,17,1,0,0,1,7,4,7,6,10,11,16,27.651484454403228,55.350905898196764,2.857142857142857,158.14544542341932,8.785858079078851,0.018450301966065587,74.0958815608535
119,mbpp,test,119,canonical_solution,"# Write a function to find the item with maximum frequency in a given list.
from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result",passed,0.00011920374001419986,True,True,8,8,7,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,95.91923751683345
120,mbpp,test,120,canonical_solution,"# Write a python function to reverse only the vowels of a given string.
def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string",passed,2.87400899998147e-05,True,True,14,14,13,1,0,0,1,5,3,6,7,12,9,19,20.264662506490406,60.22857502740394,3.0,180.68572508221183,10.038095837900658,0.020076191675801314,77.75771300290592
121,mbpp,test,121,canonical_solution,"# Write a function to convert tuple to a string.
def tup_string(tup1):
  str =  ''.join(tup1)
  return str",passed,8.646369000018694e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
122,mbpp,test,122,canonical_solution,"# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.
def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)",passed,0.00011529626000001514,True,True,4,4,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
123,mbpp,test,123,canonical_solution,"# Write a python function to check whether the last element of given array is even or odd after performing an operation p times.
def check_last (arr,n,p): 
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return ""ODD""
        else: 
            return ""EVEN""
    return ""EVEN""
      ",passed,4.678740000599646e-05,True,True,12,10,10,1,0,1,1,4,3,7,4,8,10,12,24.406371956566698,39.863137138648355,1.7142857142857142,68.33680652339717,3.796489251299843,0.013287712379549451,84.25824440724638
124,mbpp,test,124,canonical_solution,"# Write a function to find the nth hexagonal number.
def hexagonal_num(n): 
	return n*(2*n - 1) ",passed,2.9880699999864648e-05,True,True,3,2,2,1,0,0,1,1,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,100.0
125,mbpp,test,125,canonical_solution,"# Write a function to calculate electricity bill.
def cal_electbill(units):
 if(units < 50):
    amount = units * 2.60
    surcharge = 25
 elif(units <= 100):
    amount = 130 + ((units - 50) * 3.25)
    surcharge = 35
 elif(units <= 200):
    amount = 130 + 162.50 + ((units - 100) * 5.26)
    surcharge = 45
 else:
    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)
    surcharge = 75
 total = amount + surcharge
 return total",passed,2.7398020000077848e-05,True,True,16,15,15,1,0,0,1,4,5,22,17,34,27,51,109.71713608445735,242.49926261033693,3.8636363636363638,936.9289691763018,52.05160939868344,0.08083308753677898,72.01684638346835
126,mbpp,test,126,canonical_solution,"# Write a function to find the ration of zeroes in an array of integers.
from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",passed,9.774867000004405e-05,True,True,11,10,10,1,0,0,1,3,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,85.57754193823416
127,mbpp,test,127,canonical_solution,"# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True",passed,2.6224050000109855e-05,True,True,6,5,5,1,0,0,1,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,99.52774689752884
128,mbpp,test,128,canonical_solution,"# Write a function to find the circumference of a circle.
def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter",passed,2.8701640000008412e-05,True,True,4,3,3,1,0,0,1,1,1,4,2,4,5,6,8.0,13.931568569324174,0.5,6.965784284662087,0.3869880158145604,0.004643856189774725,100.0
129,mbpp,test,129,canonical_solution,"# Write a function to extract elements that occur singly in the given tuple list.
def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ",passed,9.864630999970813e-05,True,True,10,9,9,1,0,0,1,4,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,89.81812062663843
130,mbpp,test,130,canonical_solution,"# Write a function to sort a list of elements using pancake sort.
def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums",passed,7.755246999998632e-05,True,True,9,11,8,1,0,0,1,2,4,7,8,14,11,22,27.651484454403228,76.10749561002055,4.0,304.4299824400822,16.912776802226787,0.025369165203340184,83.39580087418067
131,mbpp,test,131,canonical_solution,"# Write a function to count the same pair in three given lists.
def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result",passed,0.0001289662099998168,True,True,4,3,3,1,0,0,1,2,1,3,2,3,4,5,4.754887502163469,10.0,0.5,5.0,0.2777777777777778,0.0033333333333333335,100.0
132,mbpp,test,132,canonical_solution,"# Write a function to find number of lists present in the given tuple.
def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ",passed,6.352810999999293e-05,True,True,6,5,5,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
133,mbpp,test,133,canonical_solution,"# Write a python function to find the sum of absolute differences in all pairs of the given array.
def sum_Pairs(arr,n): 
    sum = 0
    for i in range(n - 1,-1,-1): 
        sum += i*arr[i] - (n-1-i) * arr[i] 
    return sum",passed,5.640663000008317e-05,True,True,6,5,5,1,0,0,1,2,4,11,9,16,15,25,46.053747805010275,97.67226489021297,2.909090909090909,284.1374978624377,15.785416547913208,0.03255742163007099,93.93197773226207
134,mbpp,test,134,canonical_solution,"# Write a python function to find the maximum difference between any two elements in a given array.
def max_Abs_Diff(arr,n): 
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ",passed,4.8543860000336284e-05,True,True,8,7,7,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,97.18427176274999
135,mbpp,test,135,canonical_solution,"# Write a function to find the ascii value of total characters in a string.
def ascii_value_string(str1):
  for i in range(len(str1)):
   return ord(str1[i])",passed,2.26578799993149e-05,True,True,4,3,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
136,mbpp,test,136,canonical_solution,"# Write a function to find the maximum total path sum in the given triangle.
def max_path_sum(tri, m, n): 
	for i in range(m-1, -1, -1): 
		for j in range(i+1): 
			if (tri[i+1][j] > tri[i+1][j+1]): 
				tri[i][j] += tri[i+1][j] 
			else: 
				tri[i][j] += tri[i+1][j+1] 
	return tri[0][0]",passed,8.5134939999989e-05,True,True,9,8,8,1,0,0,1,4,4,10,13,24,14,37,41.219280948873624,140.87213211613133,4.8,676.1862341574304,37.56590189763502,0.04695737737204377,84.27140320423591
137,mbpp,test,137,canonical_solution,"# Write a function to divide a number into two parts such that the sum of digits is maximum.
def sum_digits_single(x) : 
    ans = 0
    while x : 
        ans += x % 10
        x //= 10  
    return ans 
def closest(x) : 
    ans = 0
    while (ans * 10 + 9 <= x) : 
        ans = ans * 10 + 9  
    return ans   
def sum_digits_twoparts(N) : 
    A = closest(N)  
    return sum_digits_single(A) + sum_digits_single(N - A) ",passed,2.8975680000087322e-05,True,True,15,14,14,1,0,0,1,2,6,15,10,20,21,30,74.11313393845472,131.76952268336282,4.0,527.0780907334513,29.282116151858403,0.04392317422778761,75.1294495095941
138,mbpp,test,138,canonical_solution,"# Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.
def longest_subseq_with_diff_one(arr, n): 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 
				dp[i] = max(dp[i], dp[j]+1) 
	result = 1
	for i in range(n): 
		if (result < dp[i]): 
			result = dp[i] 
	return result",passed,8.067775999961668e-05,True,True,12,11,11,1,0,0,1,8,5,12,7,14,17,21,54.62919048309069,85.83671966625714,2.9166666666666665,250.3570990265833,13.908727723699073,0.02861223988875238,79.769772080639
139,mbpp,test,139,canonical_solution,"# Write a python function to find whether the given number is present in the infinite sequence or not.
def does_Contain_B(a,b,c): 
    if (a == b): 
        return True
    if ((b - a) * c > 0 and (b - a) % c == 0): 
        return True
    return False",passed,2.4157569999943007e-05,True,True,7,6,6,1,0,0,1,4,6,10,8,16,16,24,48.72905595320056,96.0,4.8,460.79999999999995,25.599999999999998,0.032,90.49593134399144
140,mbpp,test,140,canonical_solution,"# Write a python function to check whether the given number is co-prime or not.
def gcd(p,q):
    while q != 0:
        p, q = q,p%q
    return p
def is_coprime(x,y):
    return gcd(x,y) == 1",passed,3.0272650000142677e-05,True,True,7,6,6,1,0,0,1,2,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,94.62239853253543
141,mbpp,test,141,canonical_solution,"# Write a function to sort the given array by using merge sort.
def merge(a,b):
    c = []
    while len(a) != 0 and len(b) != 0:
        if a[0] < b[0]:
            c.append(a[0])
            a.remove(a[0])
        else:
            c.append(b[0])
            b.remove(b[0])
    if len(a) == 0:
        c += b
    else:
        c += a
    return c
def merge_sort(x):
    if len(x) == 0 or len(x) == 1:
        return x
    else:
        middle = len(x)//2
        a = merge_sort(x[:middle])
        b = merge_sort(x[middle:])
        return merge(a,b)
",passed,9.926336000035007e-05,True,True,23,24,22,1,0,0,1,5,7,19,11,22,26,33,100.36210720983135,155.11451069865606,4.052631578947368,628.6219644103429,34.92344246724127,0.05170483689955202,66.11276411830966
142,mbpp,test,142,canonical_solution,"# Write a function to find the vertex of a parabola.
def parabola_vertex(a, b, c): 
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex",passed,5.384286000008842e-05,True,True,4,3,3,1,0,0,1,1,4,12,9,17,16,26,51.01955000865388,104.0,2.8333333333333335,294.6666666666667,16.37037037037037,0.034666666666666665,100.0
143,mbpp,test,143,canonical_solution,"# Write a function to extract every specified element from a given two dimensional list.
def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result",passed,9.93612999999982e-05,True,True,4,3,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
144,mbpp,test,144,canonical_solution,"# Write a python function to toggle all even bits of a given number.
def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n 
    while (temp > 0) :     
        if (count % 2 == 1) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ",passed,2.7257010000028004e-05,True,True,9,10,8,1,0,0,1,3,8,9,8,16,17,24,52.52932501298081,98.09910819000817,7.111111111111111,697.5936582400581,38.75520323555878,0.03269970273000272,83.39235117526741
145,mbpp,test,145,canonical_solution,"# Write a function to convert a tuple of string values to a tuple of integer values.
def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result",passed,8.586040000011508e-05,True,True,4,3,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
146,mbpp,test,146,canonical_solution,"# Write a function to reflect the run-length encoding from a list.
from itertools import groupby
def encode_list(list1):
    return [[len(list(group)), key] for key, group in groupby(list1)]",passed,0.00015115858999990904,True,True,4,3,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
147,mbpp,test,147,canonical_solution,"# Write a python function to find k number of operations required to make all elements equal.
def min_Ops(arr,n,k): 
    max1 = max(arr) 
    res = 0
    for i in range(0,n):  
        if ((max1 - arr[i]) % k != 0): 
            return -1 
        else: 
            res += (max1 - arr[i]) / k 
    return int(res) ",passed,6.429044999990196e-05,True,True,10,9,9,1,0,0,1,3,6,11,7,13,17,20,53.563522809337215,81.7492568250068,3.5454545454545454,289.8382741977514,16.102126344319522,0.027249752275002266,84.0172617781289
148,mbpp,test,148,canonical_solution,"# Write a function to print the season for the given month and day.
def month_season(month,days):
 if month in ('January', 'February', 'March'):
	 season = 'winter'
 elif month in ('April', 'May', 'June'):
	 season = 'spring'
 elif month in ('July', 'August', 'September'):
	 season = 'summer'
 else:
	 season = 'autumn'
 if (month == 'March') and (days > 19):
	 season = 'spring'
 elif (month == 'June') and (days > 20):
	 season = 'summer'
 elif (month == 'September') and (days > 21):
	 season = 'autumn'
 elif (month == 'October') and (days > 21):
	 season = 'autumn'
 elif (month == 'November') and (days > 21):
	 season = 'autumn'
 elif (month == 'December') and (days > 20):
	 season = 'winter'
 return season",passed,3.5408779999670515e-05,True,True,23,22,22,1,0,0,1,16,4,26,21,42,30,63,130.2114326716684,309.1341075233367,3.230769230769231,998.7409627677032,55.485609042650175,0.1030447025077789,63.62949170321192
149,mbpp,test,149,canonical_solution,"# Write a function to find x and y that satisfies ax + by = n.
def solution (a, b, n): 
	i = 0
	while i * a <= n: 
		if (n - (i * a)) % b == 0: 
			return (""x = "",i ,"", y = "", 
			int((n - (i * a)) / b)) 
			return 0
		i = i + 1
	return (""No solution"") ",passed,5.373698000084914e-05,True,True,10,8,9,1,0,0,1,3,7,12,10,20,19,30,62.67103446305711,127.43782540330756,5.833333333333333,743.3873148526274,41.29929526959041,0.042479275134435855,83.78301112712597
150,mbpp,test,150,canonical_solution,"# Write a function to remove all elements from a given list present in another list.
def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result",passed,0.00010943963000045187,True,True,4,3,3,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
151,mbpp,test,151,canonical_solution,"# Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).
def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)",passed,2.19758000002912e-05,True,True,6,5,5,1,0,0,1,2,3,4,3,6,7,9,12.75488750216347,25.26619429851844,2.25,56.848937171666485,3.158274287314805,0.008422064766172813,98.04377990507291
152,mbpp,test,152,canonical_solution,"# Write a function to calculate the area of a regular polygon.
from math import tan, pi
def area_polygon(s,l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area",passed,3.623242999992726e-05,True,True,5,4,4,1,0,0,1,1,3,9,5,10,12,15,33.28421251514428,53.77443751081735,1.6666666666666667,89.62406251802892,4.9791145843349405,0.017924812503605784,99.77234235945834
153,mbpp,test,153,canonical_solution,"# Write a python function to check whether the sum of divisors are same or not.
import math 
def divSum(n): 
    sum = 1; 
    i = 2; 
    while(i * i <= n): 
        if (n % i == 0): 
            sum = (sum + i +math.floor(n / i)); 
        i += 1; 
    return sum; 
def areEquivalent(num1,num2): 
    return divSum(num1) == divSum(num2); ",passed,3.157350999998698e-05,True,True,12,11,11,1,0,0,1,3,6,11,9,18,17,27,53.563522809337215,110.36149671375918,4.909090909090909,541.7746202311814,30.098590012843413,0.03678716557125306,79.67805569054502
154,mbpp,test,154,canonical_solution,"# Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.
def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ",passed,3.0960210000046115e-05,True,True,8,6,7,1,0,0,1,4,4,11,6,12,15,18,46.053747805010275,70.32403072095333,2.1818181818181817,153.43424884571635,8.52412493587313,0.02344134357365111,90.1835409051332
155,mbpp,test,155,canonical_solution,"# Write a python function to count the pairs with xor as an even number.
def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; ",passed,5.9088550000296894e-05,True,True,8,7,7,1,0,0,1,4,4,9,5,10,13,15,36.52932501298081,55.506595772116384,2.2222222222222223,123.34799060470309,6.852666144705727,0.01850219859070546,89.44268704828178
156,mbpp,test,156,canonical_solution,"# Write a python function to find smallest power of 2 greater than or equal to n.
def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ",passed,2.9800480000119478e-05,True,True,9,8,8,1,0,0,1,4,8,7,8,15,15,23,43.65148445440323,89.85848369899593,8.571428571428571,770.2155745628222,42.78975414237901,0.02995282789966531,85.63865831664141
157,mbpp,test,157,canonical_solution,"# Write a python function to find the frequency of a number in a given array.
def frequency(a,x): 
    count = 0  
    for i in a: 
        if i == x: count += 1
    return count ",passed,5.586925000002907e-05,True,True,6,6,5,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,97.66598711971477
158,mbpp,test,158,canonical_solution,"# Write a function to calculate the nth pell number.
def get_pell(n): 
	if (n <= 2): 
		return n 
	a = 1
	b = 2
	for i in range(3, n+1): 
		c = 2 * b + a 
		a = b 
		b = c 
	return b ",passed,2.661301999978605e-05,True,True,11,10,10,1,0,0,1,3,3,6,4,8,9,12,20.264662506490406,38.03910001730775,2.0,76.0782000346155,4.226566668589751,0.012679700005769252,84.53517696442229
159,mbpp,test,159,canonical_solution,"# Write a function to find sum of the numbers in a list between the indices of a specified range.
def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ",passed,7.877828000005138e-05,True,True,6,5,5,1,0,0,1,2,1,4,2,4,5,6,8.0,13.931568569324174,0.5,6.965784284662087,0.3869880158145604,0.004643856189774725,99.85407908721824
160,mbpp,test,160,canonical_solution,"# Write a function to find the perimeter of a pentagon.
import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter",passed,2.53885100005391e-05,True,True,5,4,4,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
161,mbpp,test,161,canonical_solution,"# Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item
def count_occurance(s):
  count=0
  for i in range(len(s)):
    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):
      count = count + 1
  return count",passed,3.142534000062369e-05,True,True,7,6,6,1,0,0,1,5,3,13,7,15,16,22,52.860603837997665,88.0,1.7307692307692308,152.30769230769232,8.461538461538462,0.029333333333333333,90.6260244202172
162,mbpp,test,162,canonical_solution,"# Write a function to remove everything except alphanumeric characters from a string.
import re
def remove_splchar(text): 
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))",passed,3.8616559999979925e-05,True,True,5,4,4,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
163,mbpp,test,163,canonical_solution,"# Write a function to group a sequence of key-value pairs into a dictionary of lists.
def group_keyvalue(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result",passed,0.00014042889999927867,True,True,6,5,5,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
164,mbpp,test,164,canonical_solution,"# Write a function to verify validity of a string of parentheses.
def is_valid_parenthese( str1):
        stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0",passed,2.8157349998991776e-05,True,True,9,9,8,1,0,0,1,5,4,8,5,10,12,15,32.0,53.77443751081735,2.5,134.43609377704337,7.468671876502409,0.017924812503605784,85.94964747296552
165,mbpp,test,165,canonical_solution,"# Write a function to find the perimeter of a triangle.
def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter",passed,3.6233620000984957e-05,True,True,4,3,3,1,0,0,1,1,1,4,2,4,5,6,8.0,13.931568569324174,0.5,6.965784284662087,0.3869880158145604,0.004643856189774725,100.0
166,mbpp,test,166,canonical_solution,"# Write a python function to find two distinct numbers such that their lcm lies within the given range.
def answer(L,R): 
    if (2 * L <= R): 
        return (L ,2*L)
    else: 
        return (-1) ",passed,3.89593700003843e-05,True,True,6,5,5,1,0,0,1,2,3,5,4,7,8,11,16.36452797660028,33.0,2.1,69.3,3.8499999999999996,0.011,97.23172767381813
167,mbpp,test,167,canonical_solution,"# Write a function to search some literals strings in a string.
import re
def string_literals(patterns,text):
  for pattern in patterns:
     if re.search(pattern,  text):
       return ('Matched!')
     else:
       return ('Not Matched!')",passed,4.271531000028972e-05,True,True,8,7,7,1,0,0,1,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
168,mbpp,test,168,canonical_solution,"# Write a function to find if the given number is a keith number or not.
def is_num_keith(x): 
	terms = [] 
	temp = x 
	n = 0 
	while (temp > 0): 
		terms.append(temp % 10) 
		temp = int(temp / 10) 
		n+=1 
	terms.reverse() 
	next_term = 0 
	i = n 
	while (next_term < x): 
		next_term = 0 
		for j in range(1,n+1): 
			next_term += terms[i - j] 
		terms.append(next_term) 
		i+=1 
	return (next_term == x) ",passed,3.296774000006053e-05,True,True,19,18,18,1,0,0,1,4,7,10,10,20,17,30,52.87076540327685,122.6238852375102,7.0,858.3671966625714,47.687066481253964,0.040874628412503396,71.17481879815739
169,mbpp,test,169,canonical_solution,"# Write a function to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist",passed,4.417523000029178e-05,True,True,5,4,4,1,0,0,1,1,3,12,6,12,15,18,47.77443751081735,70.32403072095333,1.5,105.48604608143,5.860335893412778,0.02344134357365111,98.95641262075887
170,mbpp,test,170,canonical_solution,"# Write a function to find the longest common prefix in the given set of strings.
def common_prefix_util(str1, str2): 
	result = """"; 
	n1 = len(str1) 
	n2 = len(str2) 
	i = 0
	j = 0
	while i <= n1 - 1 and j <= n2 - 1: 
		if (str1[i] != str2[j]): 
			break
		result += str1[i] 
		i += 1
		j += 1
	return (result) 
def common_prefix (arr, n): 
	prefix = arr[0] 
	for i in range (1, n): 
		prefix = common_prefix_util(prefix, arr[i]) 
	return (prefix) ",passed,0.00011677680000047985,True,True,19,18,18,1,0,0,1,4,5,13,9,18,18,27,59.715356810271004,112.58797503894243,3.4615384615384617,389.7276059040315,21.651533661335083,0.03752932501298081,71.29997197668416
171,mbpp,test,171,canonical_solution,"# Write a function to find uppercase, lowercase, special character and numeric values using regex.
import re
def find_character(string):
  uppercase_characters = re.findall(r""[A-Z]"", string) 
  lowercase_characters = re.findall(r""[a-z]"", string) 
  numerical_characters = re.findall(r""[0-9]"", string) 
  special_characters = re.findall(r""[, .!?]"", string) 
  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",passed,8.261179000001561e-05,True,True,8,7,7,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
172,mbpp,test,172,canonical_solution,"# Write a function to count all the distinct pairs having a difference of k in any array.
def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count",passed,6.327224000003184e-05,True,True,8,7,7,1,0,0,1,5,4,12,7,14,16,21,51.01955000865388,84.0,2.3333333333333335,196.0,10.88888888888889,0.028,88.04827903627071
173,mbpp,test,173,canonical_solution,"# Write a function to find all the values in a list that are greater than a specified number.
def greater_specificnum(list,num):
 greater_specificnum=all(x >= num for x in list)
 return greater_specificnum",passed,4.9451490000080866e-05,True,True,4,3,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
174,mbpp,test,174,canonical_solution,"# Write a function to find the focus of a parabola.
def parabola_focus(a, b, c): 
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus",passed,5.031874000053449e-05,True,True,4,3,3,1,0,0,1,1,5,14,10,19,19,29,64.91260938324326,123.18989788986397,3.392857142857143,417.96572498346706,23.22031805463706,0.04106329929662132,100.0
175,mbpp,test,175,canonical_solution,"# Write a function to search some literals strings in a string by using regex.
import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')",passed,4.0200359999857935e-05,True,True,8,7,7,1,0,0,1,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
176,mbpp,test,176,canonical_solution,"# Write a function to find the longest common subsequence for the given two sequences.
def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",passed,0.00026288038000075173,True,True,8,7,7,1,0,0,1,4,4,9,11,22,13,33,36.52932501298081,122.11451069865605,4.888888888888889,597.004274526763,33.16690414037572,0.04070483689955202,87.04503893489336
177,mbpp,test,177,canonical_solution,"# Write a python function to check whether the given number can be represented by product of two squares or not.
def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;",passed,4.402866000077665e-05,True,True,8,7,7,1,0,0,1,5,4,9,9,18,13,27,36.52932501298081,99.91187238980949,4.0,399.64748955923795,22.202638308846552,0.03330395746326983,87.5207626871759
178,mbpp,test,178,canonical_solution,"# Write a python function to find the first missing positive number.
def first_Missing_Positive(arr,n): 
    ptr = 0
    for i in range(n):
        if arr[i] == 1:
            ptr = 1
            break
    if ptr == 0:
        return(1)
    for i in range(n):
        if arr[i] <= 0 or arr[i] > n:
            arr[i] = 1
    for i in range(n):
        arr[(arr[i] - 1) % n] += n
    for i in range(n):
        if arr[i] <= n:
            return(i + 1)
    return(n + 1)",passed,5.83095100000719e-05,True,True,18,17,17,1,0,0,1,10,7,14,11,22,21,33,72.95445336320968,144.94647495169912,5.5,797.2056122343452,44.28920067968584,0.048315491650566374,70.76495065245139
179,mbpp,test,179,canonical_solution,"# Write a python function to count the number of integral co-ordinates that lie inside a square.
def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",passed,3.652033999969717e-05,True,True,3,2,2,1,0,0,1,1,2,9,5,10,11,15,30.529325012980813,51.89147427955947,1.1111111111111112,57.65719364395497,3.203177424664165,0.01729715809318649,100.0
180,mbpp,test,180,canonical_solution,"# Write a function to check whether the given month name contains 30 days or not.
def check_monthnumber(monthname3):
  if monthname3 ==""April"" or monthname3== ""June"" or monthname3== ""September"" or monthname3== ""November"":
    return True
  else:
    return False",passed,2.9055300000209173e-05,True,True,6,5,5,1,0,0,1,5,2,9,5,12,11,17,30.529325012980813,58.81033751683406,1.3333333333333333,78.41378335577875,4.356321297543264,0.019603445838944685,95.071135599143
181,mbpp,test,181,canonical_solution,"# Write a python function to check whether a string has atleast one letter and one number.
def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ",passed,2.814591999992899e-05,True,True,10,9,9,1,0,0,1,5,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,92.3981478287889
182,mbpp,test,182,canonical_solution,"# Write a function to remove the duplicates from the given tuple.
def remove_tuple(test_tup):
  res = tuple(set(test_tup))
  return (res) ",passed,9.689777999938087e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
183,mbpp,test,183,canonical_solution,"# Write a python function to convert octal number to decimal number.
def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; ",passed,2.7706409999836977e-05,True,True,12,11,11,1,0,0,1,2,4,7,5,10,11,15,27.651484454403228,51.89147427955947,2.857142857142857,148.26135508445563,8.236741949136423,0.01729715809318649,82.1072693718998
184,mbpp,test,184,canonical_solution,"# Write a python function to find the first position of an element in a sorted array.
def first(arr,x,n): 
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            high = mid - 1
    return res",passed,5.90688200003342e-05,True,True,15,14,14,1,0,0,1,4,7,10,10,19,17,29,52.87076540327685,118.53642239625987,6.65,788.2672089351281,43.792622718618226,0.03951214079875329,75.31678121747517
185,mbpp,test,185,canonical_solution,"# Write a function to remove all the tuples with length k.
def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) ",passed,0.0001479641899999251,True,True,4,3,3,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
186,mbpp,test,186,canonical_solution,"# Write a function to perform the exponentiation of the given two tuples.
def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)
",passed,8.28525499999877e-05,True,True,4,3,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
187,mbpp,test,187,canonical_solution,"# Write a function to find the largest triangle that can be inscribed in an ellipse.
import math
def largest_triangle(a,b): 
    if (a < 0 or b < 0): 
        return -1 
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  
    return area ",passed,3.378978000000643e-05,True,True,7,6,6,1,0,0,1,3,5,13,8,15,18,23,59.715356810271004,95.90827503317318,2.8846153846153846,276.658485672615,15.369915870700831,0.03196942501105773,90.6333411748732
188,mbpp,test,188,canonical_solution,"# Write a python function to find highest power of 2 less than or equal to given number.
def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; ",passed,2.8366970000206492e-05,True,True,8,7,7,1,0,0,1,3,4,5,4,7,9,11,19.60964047443681,34.86917501586544,2.8,97.63369004442322,5.424093891356845,0.011623058338621813,90.99091687597276
189,mbpp,test,189,canonical_solution,"# Write a function to find all index positions of the maximum values in a given list.
def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result",passed,8.516643999996632e-05,True,True,5,4,4,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
190,mbpp,test,190,canonical_solution,"# Write a python function to check whether the elements in a list are same or not.
def chkList(lst): 
    return len(set(lst)) == 1",passed,4.1372270000010756e-05,True,True,3,2,2,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
191,mbpp,test,191,canonical_solution,"# Write a function to remove even characters in a string.
def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2",passed,3.376971000022877e-05,True,True,7,6,6,1,0,0,1,3,4,8,5,10,12,15,32.0,53.77443751081735,2.5,134.43609377704337,7.468671876502409,0.017924812503605784,92.39280846526448
192,mbpp,test,192,canonical_solution,"# Write a python function to find the hamming distance between given two integers.
def hamming_Distance(n1,n2) : 
    x = n1 ^ n2  
    setBits = 0
    while (x > 0) : 
        setBits += x & 1
        x >>= 1
    return setBits  ",passed,3.007867999940572e-05,True,True,8,7,7,1,0,0,1,2,5,7,5,10,12,15,31.26112492884004,53.77443751081735,3.5714285714285716,192.0515625386334,10.6695312521463,0.017924812503605784,89.8081016302645
193,mbpp,test,193,canonical_solution,"# Write a python function to count the occurrence of a given character in a string.
def count(s,c) : 
    res = 0 
    for i in range(len(s)) : 
        if (s[i] == c): 
            res = res + 1
    return res ",passed,3.6016949998156633e-05,True,True,7,6,6,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,96.17368815601037
194,mbpp,test,194,canonical_solution,"# Write a function to find the inversions of tuple elements in the given tuple list.
def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) ",passed,7.657250999955067e-05,True,True,4,4,3,1,0,0,1,1,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,100.0
195,mbpp,test,195,canonical_solution,"# Write a function to perform the adjacent element concatenation in the given tuples.
def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",passed,7.906075999983386e-05,True,True,4,4,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
196,mbpp,test,196,canonical_solution,"# Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.
def find_longest_repeating_subseq(str): 
	n = len(str) 
	dp = [[0 for k in range(n+1)] for l in range(n+1)] 
	for i in range(1, n+1): 
		for j in range(1, n+1): 
			if (str[i-1] == str[j-1] and i != j): 
				dp[i][j] = 1 + dp[i-1][j-1] 
			else: 
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
	return dp[n][n]",passed,7.495233000000212e-05,True,True,11,10,10,1,0,0,1,7,5,9,14,28,14,42,40.13896548741762,159.90890672641936,7.777777777777778,1243.7359412054839,69.09644117808244,0.05330296890880645,79.63041283793125
197,mbpp,test,197,canonical_solution,"# Write a function to check the given decimal with a precision of 2 by using regex.
import re
def is_decimal(num):
  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
  result = num_fetch.search(num)
  return bool(result)",passed,2.880210000000716e-05,True,True,6,5,5,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
198,mbpp,test,198,canonical_solution,"# Write a function to delete the smallest element from the given heap and then insert a new item.
import heapq as hq
def heap_replace(heap,a):
  hq.heapify(heap)
  hq.heapreplace(heap, a)
  return heap",passed,9.249959000044327e-05,True,True,6,5,5,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
199,mbpp,test,199,canonical_solution,"# Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.
import re
def is_allowed_specific_char(string):
    get_char = re.compile(r'[^a-zA-Z0-9.]')
    string = get_char.search(string)
    return not bool(string)",passed,2.8646179999896048e-05,True,True,6,5,5,1,0,0,1,1,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,100.0
200,mbpp,test,200,canonical_solution,"# Write a python function to count numbers whose oth and nth bits are set.
def count_Num(n): 
    if (n == 1): 
        return 1
    count = pow(2,n - 2) 
    return count ",passed,2.480672000004347e-05,True,True,6,5,5,1,0,0,1,2,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,99.85407908721824
201,mbpp,test,201,canonical_solution,"# Write a python function to find the sum of fourth power of n natural numbers.
import math  
def fourth_Power_Sum(n): 
    sum = 0
    for i in range(1,n+1) : 
        sum = sum + (i*i*i*i) 
    return sum",passed,2.733000000002761e-05,True,True,7,6,6,1,0,0,1,2,2,7,5,10,9,15,21.651484454403228,47.548875021634686,1.4285714285714286,67.92696431662098,3.7737202398122767,0.01584962500721156,92.9014683734406
202,mbpp,test,202,canonical_solution,"# Write a function to perform the concatenation of two string tuples.
def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",passed,7.671852000157742e-05,True,True,4,3,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
203,mbpp,test,203,canonical_solution,"# Write a function to convert radians to degrees.
import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree",passed,3.183352000007744e-05,True,True,5,4,4,1,0,0,1,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
204,mbpp,test,204,canonical_solution,"# Write a function to decode a run-length encoded given list.
def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]",passed,0.00011592900999971789,True,True,8,7,7,1,0,0,1,4,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
205,mbpp,test,205,canonical_solution,"# Write a function to check if a nested list is a subset of another nested list.
def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist ",passed,0.00012536897000018144,True,True,8,7,7,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,97.04976883877337
206,mbpp,test,206,canonical_solution,"# Write a python function to find the first repeated character in a given string.
def first_Repeated_Char(str): 
    h = {}
    for ch in str:
        if ch in h: 
            return ch;
        else: 
            h[ch] = 0
    return '\0'",passed,2.36845999995694e-05,True,True,9,8,8,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,94.71066273856995
207,mbpp,test,207,canonical_solution,"# Write a python function to find the minimum operations required to make two numbers equal.
import math   
def min_Operations(A,B):  
    if (A > B): 
        swap(A,B)  
    B = B // math.gcd(A,B);  
    return B - 1",passed,2.8932859999883932e-05,True,True,7,6,6,1,0,0,1,2,3,4,3,6,7,9,12.75488750216347,25.26619429851844,2.25,56.848937171666485,3.158274287314805,0.008422064766172813,94.82422408753102
208,mbpp,test,208,canonical_solution,"# Write a function to extract maximum and minimum k elements in the given tuple.

def extract_min_max(test_tup, K):
  res = []
  test_tup = list(test_tup)
  temp = sorted(test_tup)
  for idx, val in enumerate(temp):
    if idx < K or idx >= len(temp) - K:
      res.append(val)
  res = tuple(res)
  return (res) ",passed,8.079617000021244e-05,True,True,11,9,9,1,0,1,1,4,4,6,4,8,10,12,23.509775004326936,39.863137138648355,2.6666666666666665,106.3016990363956,5.905649946466422,0.013287712379549451,86.0667731565632
209,mbpp,test,209,canonical_solution,"# Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.
import re
def replace_max_specialchar(text,n):
 return (re.sub(""[ ,.]"", "":"", text, n))",passed,3.854567999994174e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
210,mbpp,test,210,canonical_solution,"# Write a python function to find the first even number in a given list of numbers.
def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even",passed,4.630834999943545e-05,True,True,4,3,3,1,0,0,1,3,3,5,3,5,8,8,16.36452797660028,24.0,1.5,36.0,2.0,0.008,100.0
211,mbpp,test,211,canonical_solution,"# Write a function to check if all the elements in tuple have same data type or not.
def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ",passed,4.633090000083939e-05,True,True,8,7,7,1,0,0,1,3,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,99.68329775853593
212,mbpp,test,212,canonical_solution,"# Write a function to check for majority element in the given sorted array.
def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1",passed,6.541992999700596e-05,True,True,19,18,18,1,0,0,1,4,10,28,24,46,38,70,167.82521876648653,367.35492594105096,8.214285714285714,3017.5583202300613,167.64212890167008,0.12245164198035031,67.16576932293422
213,mbpp,test,213,canonical_solution,"# Write a python function to count set bits of a given number.
def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ",passed,2.496833999998671e-05,True,True,7,6,6,1,0,0,1,2,3,4,3,6,7,9,12.75488750216347,25.26619429851844,2.25,56.848937171666485,3.158274287314805,0.008422064766172813,94.82422408753102
214,mbpp,test,214,canonical_solution,"# Write a python function to find the minimum element in a sorted and rotated array.
def find_Min(arr,low,high): 
    while (low < high): 
        mid = low + (high - low) // 2;   
        if (arr[mid] == arr[high]): 
            high -= 1; 
        elif (arr[mid] > arr[high]): 
            low = mid + 1; 
        else: 
            high = mid; 
    return arr[high]; ",passed,5.2357790000314705e-05,True,True,11,10,10,1,0,0,1,4,6,11,8,16,17,24,53.563522809337215,98.09910819000817,4.363636363636363,428.06883573821744,23.781601985456525,0.03269970273000272,81.51980197891234
215,mbpp,test,215,canonical_solution,"# Write a python function to remove the characters which have odd index values of a given string.
def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result",passed,2.9283139999733974e-05,True,True,7,6,6,1,0,0,1,3,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,94.3203533112085
216,mbpp,test,216,canonical_solution,"# Write a function to find minimum of three numbers.
def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ",passed,2.3728409999961286e-05,True,True,9,8,8,1,0,0,1,5,2,7,6,12,9,18,21.651484454403228,57.058650025961626,1.7142857142857142,97.8148286159342,5.434157145329678,0.019019550008653876,86.88521561640762
217,mbpp,test,217,canonical_solution,"# Write a python function to check whether all the bits are unset in the given range or not.
def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False",passed,3.445212000315223e-05,True,True,7,6,6,1,0,0,1,2,5,12,8,16,17,24,54.62919048309069,98.09910819000817,3.3333333333333335,326.99702730002724,18.16650151666818,0.03269970273000272,90.69916149719022
218,mbpp,test,218,canonical_solution,"# Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.
def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr",passed,9.400444999982938e-05,True,True,10,9,9,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,89.07186323500252
219,mbpp,test,219,canonical_solution,"# Write a function to replace blank spaces with any character in a string.
def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2",passed,3.427461999990555e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
220,mbpp,test,220,canonical_solution,"# Write a function to find the maximum sum in the given right triangle of numbers.
def max_sum(tri, n): 
	if n > 1: 
		tri[1][1] = tri[1][1]+tri[0][0] 
		tri[1][0] = tri[1][0]+tri[0][0] 
	for i in range(2, n): 
		tri[i][0] = tri[i][0] + tri[i-1][0] 
		tri[i][i] = tri[i][i] + tri[i-1][i-1] 
		for j in range(1, i): 
			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: 
				tri[i][j] = tri[i][j] + tri[i-1][j-1] 
			else: 
				tri[i][j] = tri[i][j]+tri[i-1][j] 
	return (max(tri[n-1]))",passed,6.999212000010857e-05,True,True,14,13,13,1,0,0,1,5,4,22,20,40,26,60,106.10749561002054,282.02638308846554,3.6363636363636362,1025.5504839580565,56.975026886558695,0.09400879436282185,73.76502869139144
221,mbpp,test,221,canonical_solution,"# Write a function to get the n largest items from a dataset.
import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest",passed,9.363437000001085e-05,True,True,5,4,4,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
222,mbpp,test,222,canonical_solution,"# Write a function to find the lateral surface area of a cylinder.
def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface",passed,3.3939110000460456e-05,True,True,4,3,3,1,0,0,1,1,1,6,3,6,7,9,15.509775004326936,25.26619429851844,0.5,12.63309714925922,0.701838730514401,0.008422064766172813,100.0
223,mbpp,test,223,canonical_solution,"# Write a function to find the volume of a cube.
def volume_cube(l):
  volume = l * l * l
  return volume",passed,2.6810170000430842e-05,True,True,4,3,3,1,0,0,1,1,1,2,2,4,3,6,2.0,9.509775004326938,1.0,9.509775004326938,0.5283208335737188,0.003169925001442313,100.0
224,mbpp,test,224,canonical_solution,"# Write a python function to set all even bits of a given number.
def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ",passed,2.6990919999994034e-05,True,True,9,10,8,1,0,0,1,3,7,9,8,16,16,24,48.18080946738404,96.0,6.222222222222222,597.3333333333334,33.18518518518519,0.032,83.45812687002184
225,mbpp,test,225,canonical_solution,"# Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.
def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;",passed,2.9767209999818077e-05,True,True,10,9,9,1,0,0,1,2,6,18,17,33,24,50,90.56842503028855,229.24812503605784,5.5,1260.8646876983182,70.04803820546212,0.07641604167868594,81.01610931600563
226,mbpp,test,226,canonical_solution,"# Write a function to check the occurrences of records which occur similar times in the given tuples.
from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ",passed,0.00015827148999960627,True,True,5,4,4,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
227,mbpp,test,227,canonical_solution,"# Write a python function to count number of non-empty substrings of a given string.
def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ",passed,2.754242999969847e-05,True,True,4,3,3,1,0,0,1,1,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,100.0
228,mbpp,test,228,canonical_solution,"# Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.
def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]",passed,6.849313999993001e-05,True,True,14,13,13,1,0,0,1,9,6,11,13,26,17,39,53.563522809337215,159.41105080876326,7.090909090909091,1130.3692693712303,62.79829274284613,0.05313701693625442,74.96191498791839
229,mbpp,test,229,canonical_solution,"# Write a function to replace the last element of the list with another list.
def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
",passed,8.97938099996054e-05,True,True,5,5,4,1,0,0,1,1,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,100.0
230,mbpp,test,230,canonical_solution,"# Write a function to generate a 3d array having each element as '*'.
def array_3d(m,n,o):
 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]
 return array_3d",passed,0.00031688288999987436,True,True,4,3,3,1,0,0,1,4,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
231,mbpp,test,231,canonical_solution,"# Write a function to count total characters in a string.
def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total",passed,2.7518009999880633e-05,True,True,6,5,5,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
232,mbpp,test,232,canonical_solution,"# Write a function to sort the given list based on the occurrence of first element of tuples.
def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) ",passed,0.00011556790000000206,True,True,7,5,6,1,0,0,1,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
233,mbpp,test,233,canonical_solution,"# Write a python function to find the next perfect square greater than a given number.
import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ",passed,2.6199159999578115e-05,True,True,5,4,4,1,0,0,1,1,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,100.0
234,mbpp,test,234,canonical_solution,"# Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.
def max_sum(arr, n): 
	MSIBS = arr[:] 
	for i in range(n): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, n + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum",passed,0.00010413709000033578,True,True,16,17,15,1,0,0,1,10,6,26,21,34,32,55,137.72120767599534,275.0,3.923076923076923,1078.8461538461538,59.93589743589743,0.09166666666666666,69.64160688531106
235,mbpp,test,235,canonical_solution,"# Write a function for computing square roots using the babylonian method.
def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;",passed,3.187283000443131e-05,True,True,11,10,10,1,0,0,1,3,4,8,7,14,12,21,32.0,75.28421251514429,3.5,263.494743803005,14.638596877944723,0.025094737505048096,82.4592643677876
236,mbpp,test,236,canonical_solution,"# Write a function to find the longest palindromic subsequence in the given string.
def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]",passed,0.00031609667000005005,True,True,16,15,15,1,0,0,1,9,4,15,15,30,19,45,66.60335893412778,191.15673810496133,4.0,764.6269524198453,42.47927513443585,0.06371891270165378,72.06778544225607
237,mbpp,test,237,canonical_solution,"# Write a function to calculate the harmonic sum of n-1.
def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ",passed,3.188102999956754e-05,True,True,6,5,5,1,0,0,1,2,4,5,4,8,9,12,19.60964047443681,38.03910001730775,3.2,121.72512005538482,6.762506669743601,0.012679700005769252,96.79958937626544
238,mbpp,test,238,canonical_solution,"# Write a function to find the intersection of two arrays using lambda function.
def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result",passed,9.291539999992438e-05,True,True,4,4,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
239,mbpp,test,239,canonical_solution,"# Write a python function to count the occcurences of an element in a tuple.
def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ",passed,7.441151999955764e-05,True,True,7,6,6,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,96.17368815601037
240,mbpp,test,240,canonical_solution,"# Write a function to insert an element before each element of a list.
def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list",passed,6.936979000045085e-05,True,True,4,3,3,1,0,0,1,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
241,mbpp,test,241,canonical_solution,"# Write a python function to convert complex numbers to polar coordinates.
import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ",passed,3.955179000001863e-05,True,True,5,4,4,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
242,mbpp,test,242,canonical_solution,"# Write a python function to count integers from a given list.
def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr",passed,4.297648999909143e-05,True,True,7,6,6,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,99.76897859774995
243,mbpp,test,243,canonical_solution,"# Write a function to find all words starting with 'a' or 'e' in a given string.
import re
def words_ae(text):
 list = re.findall(""[ae]\w+"", text)
 return list",passed,2.677465000004986e-05,True,True,5,4,4,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
244,mbpp,test,244,canonical_solution,"# Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.
from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))",passed,0.00016200419000000465,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
245,mbpp,test,245,canonical_solution,"# Write a python function to count the number of prime numbers less than a given non-negative number.
def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr",passed,0.00010362790000044697,True,True,12,11,11,1,0,0,1,6,4,6,4,8,10,12,23.509775004326936,39.863137138648355,2.6666666666666665,106.3016990363956,5.905649946466422,0.013287712379549451,82.37115998169381
246,mbpp,test,246,canonical_solution,"# Write a function to swap two numbers.
def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)",passed,4.266402999974161e-05,True,True,6,5,5,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
247,mbpp,test,247,canonical_solution,"# Write a function to find number of odd elements in the given list using lambda function.
def count_odd(array_nums):
   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
   return count_odd",passed,5.418789000003699e-05,True,True,4,4,3,1,0,0,1,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
248,mbpp,test,248,canonical_solution,"# Write a function to maximize the given two tuples.
def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",passed,0.00019007523000027504,True,True,5,3,4,1,0,0,1,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
249,mbpp,test,249,canonical_solution,"# Write a function to find the nth newman–shanks–williams prime number.
def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)",passed,2.6915390001249762e-05,True,True,5,4,4,1,0,0,1,3,5,9,7,14,14,21,40.13896548741762,79.95445336320968,3.888888888888889,310.93398530137097,17.27411029452061,0.026651484454403226,98.2971222380707
250,mbpp,test,250,canonical_solution,"# Write a function to perform mathematical division operation across the given tuples.
def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",passed,8.46353499991892e-05,True,True,4,3,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
251,mbpp,test,251,canonical_solution,"# Write a function to split a given list into two parts where the length of the first part of the list is given.
def split_two_parts(list1, L):
    return list1[:L], list1[L:]",passed,8.790951000037239e-05,True,True,3,3,2,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
252,mbpp,test,252,canonical_solution,"# Write a function to merge two dictionaries.
def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d",passed,0.00011312572999997883,True,True,5,4,4,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
253,mbpp,test,253,canonical_solution,"# Write a function to calculate a dog's age in dog's years.
def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age",passed,2.524166000000605e-05,True,True,9,8,8,1,0,0,1,3,5,8,6,12,13,18,35.60964047443681,66.60791492653966,3.75,249.77968097452373,13.876648943029096,0.022202638308846556,86.6836557461318
254,mbpp,test,254,canonical_solution,"# Write a function to split a list for every nth element.
def list_split(S, step):
    return [S[i::step] for i in range(step)]",passed,9.911730999988322e-05,True,True,3,3,2,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
255,mbpp,test,255,canonical_solution,"# Write a function to find the lateral surface area of a cube.
def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA",passed,2.5665580000122646e-05,True,True,4,3,3,1,0,0,1,1,1,3,2,4,4,6,4.754887502163469,12.0,0.6666666666666666,8.0,0.4444444444444444,0.004,100.0
256,mbpp,test,256,canonical_solution,"# Write a python function to find the sum of squares of first n odd natural numbers.
def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ",passed,2.5965720000158398e-05,True,True,3,2,2,1,0,0,1,1,3,8,5,10,11,15,28.75488750216347,51.89147427955947,1.875,97.296514274174,5.405361904120777,0.01729715809318649,100.0
257,mbpp,test,257,canonical_solution,"# Write a function to find the n'th star number.
def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ",passed,2.617229000009047e-05,True,True,3,2,2,1,0,0,1,1,3,6,4,8,9,12,20.264662506490406,38.03910001730775,2.0,76.0782000346155,4.226566668589751,0.012679700005769252,100.0
258,mbpp,test,258,canonical_solution,"# Write a function to find the ascii value of a character.
def ascii_value(k):
  ch=k
  return ord(ch)",passed,2.5428829999896152e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
259,mbpp,test,259,canonical_solution,"# Write a python function to find the sum of even numbers at even positions.
def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum",passed,5.7931000000053246e-05,True,True,8,7,7,1,0,0,1,3,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,91.60114355223193
260,mbpp,test,260,canonical_solution,"# Write a python function to find the sum of fifth power of first n even natural numbers.
def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ",passed,2.8024109997204506e-05,True,True,7,6,6,1,0,0,1,2,2,10,7,14,12,21,35.219280948873624,75.28421251514429,1.4,105.397897521202,5.855438751177889,0.025094737505048096,91.50412096208886
261,mbpp,test,261,canonical_solution,"# Write a function to perfom the rear element extraction from list of tuples records.
def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ",passed,9.081811999976708e-05,True,True,4,3,3,1,0,0,1,2,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,100.0
262,mbpp,test,262,canonical_solution,"# Write a function to substract the contents of one tuple with corresponding index of other tuple.
def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ",passed,7.133030000034069e-05,True,True,4,4,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
263,mbpp,test,263,canonical_solution,"# Write a python function to find sum of even index binomial coefficients.
import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ",passed,2.7833670000063648e-05,True,True,4,3,3,1,0,0,1,1,2,3,2,4,5,6,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725,100.0
264,mbpp,test,264,canonical_solution,"# Write a python function to find the position of the last removed element from the given array.
import math as mt 
def get_Position(a,n,m): 
    for i in range(n): 
        a[i] = (a[i] // m + (a[i] % m != 0))  
    result,maxx = -1,-1
    for i in range(n - 1,-1,-1): 
        if (maxx < a[i]): 
            maxx = a[i] 
            result = i 
    return result + 1",passed,4.823672000000556e-05,True,True,11,10,10,1,0,0,1,4,7,12,11,18,19,29,62.67103446305711,123.18989788986397,5.25,646.7469639217859,35.93038688454366,0.04106329929662132,80.82723260651098
265,mbpp,test,265,canonical_solution,"# Write a function to find the volume of a cylinder.
def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume",passed,3.4499879999998486e-05,True,True,4,3,3,1,0,0,1,1,1,5,3,6,6,9,11.60964047443681,23.264662506490403,0.6,13.95879750389424,0.7754887502163467,0.007754887502163467,100.0
266,mbpp,test,266,canonical_solution,"# Write a function to filter a dictionary based on values.
def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result",passed,8.711864000360948e-05,True,True,4,4,3,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
267,mbpp,test,267,canonical_solution,"# Write a function to find the element count that occurs before the record in the given tuple.
def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ",passed,5.95334600006936e-05,True,True,6,5,5,1,0,0,1,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
268,mbpp,test,268,canonical_solution,"# Write a function to find the nth decagonal number.
def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ",passed,2.548429999990276e-05,True,True,3,2,2,1,0,0,1,1,2,6,4,8,8,12,17.509775004326936,36.0,1.3333333333333333,48.0,2.6666666666666665,0.012,100.0
269,mbpp,test,269,canonical_solution,"# Write a function to search an element in the given array by using sequential search.
def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos",passed,8.77171600000537e-05,True,True,10,9,9,1,0,0,1,4,5,8,5,9,13,14,35.60964047443681,51.80615605397529,2.8125,145.70481390180552,8.09471188343364,0.01726871868465843,85.26987477030441
270,mbpp,test,270,canonical_solution,"# Write a python function to check if the elements of a given list are unique or not.
def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True",passed,4.712697000059052e-05,True,True,5,4,4,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
271,mbpp,test,271,canonical_solution,"# Write a function to substaract two lists using map and lambda function.
def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)",passed,5.2862739999568475e-05,True,True,4,4,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
272,mbpp,test,272,canonical_solution,"# Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.
def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True",passed,2.3652889999539185e-05,True,True,12,11,11,1,0,0,1,5,5,6,5,10,11,15,27.11941547876375,51.89147427955947,4.166666666666667,216.21447616483113,12.011915342490617,0.01729715809318649,81.70376059996998
273,mbpp,test,273,canonical_solution,"# Write a function to check whether all items of a list are equal to a given string.
def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element",passed,5.048936999997977e-05,True,True,4,3,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
274,mbpp,test,274,canonical_solution,"# Write a function that matches a string that has an a followed by two to three 'b'.
import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",passed,3.518548999977611e-05,True,True,8,7,7,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
275,mbpp,test,275,canonical_solution,"# Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.
def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far",passed,5.168269000023429e-05,True,True,11,10,10,1,0,0,1,4,5,8,6,11,13,17,35.60964047443681,62.907475208398566,3.4375,216.24444602887007,12.013580334937226,0.02096915840279952,82.87093007064081
276,mbpp,test,276,canonical_solution,"# Write a python function to find the sum of squares of first n even natural numbers.
def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)",passed,2.5684240000032333e-05,True,True,3,2,2,1,0,0,1,1,3,10,7,14,13,21,37.974168451037094,77.70923408096293,2.1,163.18939157002217,9.066077309445676,0.025903078026987644,100.0
277,mbpp,test,277,canonical_solution,"# Write a function to count array elements having modular inverse under given prime number p equal to itself.
def modular_inverse(arr, N, P):
	current_element = 0
	for i in range(0, N):
		if ((arr[i] * arr[i]) % P == 1):
			current_element = current_element + 1
	return current_element",passed,5.4344459999811076e-05,True,True,7,6,6,1,0,0,1,3,4,7,4,8,11,12,27.651484454403228,41.51317942364757,2.2857142857142856,94.88726725405158,5.27151484744731,0.01383772647454919,93.17976388113021
278,mbpp,test,278,canonical_solution,"# Write a python function to calculate the number of odd days in a given year.
def odd_Days(N): 
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap 
    if (hund1): 
        ordd += hund1 
        leap -= hund1 
    if (hund4): 
        ordd -= hund4 
        leap += hund4 
    days = ordd + leap * 2
    odd = days % 7
    return odd ",passed,2.655369999956747e-05,True,True,15,14,14,1,0,0,1,3,6,11,11,22,17,33,53.563522809337215,134.8862737612612,6.0,809.3176425675672,44.962091253753734,0.044962091253753736,75.05835957788683
279,mbpp,test,279,canonical_solution,"# Write a function to find the list of lists with maximum length.
def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)",passed,0.00010524889999999232,True,True,5,4,4,1,0,0,1,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
280,mbpp,test,280,canonical_solution,"# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.
def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]",passed,3.134490999968875e-05,True,True,10,9,9,1,0,0,1,2,4,13,10,20,17,30,56.105716335834195,122.6238852375102,3.076923076923077,377.30426226926215,20.961347903847898,0.040874628412503396,82.91877139089941
281,mbpp,test,281,canonical_solution,"# Write a python function to find quotient of two numbers.
def find(n,m):  
    q = n//m 
    return (q)",passed,2.1021009999913076e-05,True,True,4,3,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
282,mbpp,test,282,canonical_solution,"# Write a function to find the third side of a right angled triangle.
import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s",passed,3.3498210000288965e-05,True,True,5,4,4,1,0,0,1,1,2,4,3,6,6,9,10.0,23.264662506490403,1.5,34.89699375973561,1.938721875540867,0.007754887502163467,100.0
283,mbpp,test,283,canonical_solution,"# Write a function to find the maximum value in a given heterogeneous list.
def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)",passed,5.321519999938573e-05,True,True,4,3,3,1,0,0,1,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
284,mbpp,test,284,canonical_solution,"# Write a function to return the sum of all divisors of a number.
def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)",passed,2.9143389999717327e-05,True,True,7,6,6,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,96.17368815601037
285,mbpp,test,285,canonical_solution,"# Write a python function to count inversions in an array.
def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ",passed,5.056302999946638e-05,True,True,8,7,7,1,0,0,1,4,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,91.83600848060124
286,mbpp,test,286,canonical_solution,"# Write a function to flatten a given nested list structure.
def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ",passed,0.00015297218999990036,True,True,14,17,13,1,0,0,1,6,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,86.13822244638747
287,mbpp,test,287,canonical_solution,"# Write a function to find the nested list elements which are present in another list.
def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result",passed,0.00015105591999997614,True,True,4,3,3,1,0,0,1,4,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
288,mbpp,test,288,canonical_solution,"# Write a function to calculate the maximum aggregate from the list of tuples.
from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])",passed,0.00012073913999984143,True,True,7,7,6,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,98.44310666020517
289,mbpp,test,289,canonical_solution,"# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.
def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ",passed,2.3881160000200908e-05,True,True,8,7,7,1,0,0,1,2,4,9,7,14,13,21,36.52932501298081,77.70923408096293,3.111111111111111,241.762061585218,13.431225643623222,0.025903078026987644,88.68850246908275
290,mbpp,test,290,canonical_solution,"# Write a function to find the depth of a dictionary.
def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0",passed,6.661221000001661e-05,True,True,5,4,4,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
291,mbpp,test,291,canonical_solution,"# Write a python function to find the most significant bit number which is also a set bit.
def set_Bit_Number(n): 
    if (n == 0): 
        return 0; 
    msb = 0; 
    n = int(n / 2); 
    while (n > 0): 
        n = int(n / 2); 
        msb += 1; 
    return (1 << msb)",passed,2.7509330000157206e-05,True,True,10,9,9,1,0,0,1,3,5,5,6,12,10,18,23.21928094887362,59.794705707972525,6.0,358.76823424783515,19.931568569324174,0.019931568569324175,84.96828276933371
292,mbpp,test,292,canonical_solution,"# Write a python function to check whether the count of inversion of two types are same or not.
import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True",passed,4.548525000245718e-05,True,True,9,8,8,1,0,0,1,3,3,6,4,7,9,11,20.264662506490406,34.86917501586544,1.75,61.021056277764515,3.3900586820980285,0.011623058338621813,88.65181077576932
293,mbpp,test,293,canonical_solution,"# Write a python function to find element at a given index after number of rotations.
def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ",passed,8.317156000003934e-05,True,True,11,10,10,1,0,0,1,5,6,7,8,14,13,22,35.161259458730164,81.40967379910403,6.0,488.45804279462413,27.136557933034673,0.027136557933034676,81.95238541077475
294,mbpp,test,294,canonical_solution,"# Write a function to match two words from a list of words starting with letter 'p'.
import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()",passed,5.059094999978697e-05,True,True,7,6,6,1,0,0,1,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
295,mbpp,test,295,canonical_solution,"# Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .
def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]",passed,9.826545999999325e-05,True,True,19,17,18,1,0,0,1,10,4,17,13,26,21,39,77.48686830125578,171.30037948837168,3.0588235294117645,523.9776313761956,29.109868409788646,0.05710012649612389,69.89272697196621
296,mbpp,test,296,canonical_solution,"# Write a function to get a colon of a tuple.
from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon",passed,9.08903800001326e-05,True,True,6,5,5,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
297,mbpp,test,297,canonical_solution,"# Write a function to find the specified number of largest products from two given lists.
def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result",passed,0.00010764367999996694,True,True,4,4,3,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
298,mbpp,test,298,canonical_solution,"# Write a python function to find the maximum of two numbers.
def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ",passed,3.1078570000033775e-05,True,True,6,5,5,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
299,mbpp,test,299,canonical_solution,"# Write a function to convert a given string to a tuple.
def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",passed,7.537842999909117e-05,True,True,4,3,3,1,0,0,1,3,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,100.0
300,mbpp,test,300,canonical_solution,"# Write a python function to set the left most unset bit.
def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ",passed,2.989531000025636e-05,True,True,10,10,9,1,0,0,1,4,6,9,9,16,15,25,44.039100017307746,97.67226489021297,5.333333333333333,520.9187460811359,28.93993033784088,0.03255742163007099,82.34343889215867
301,mbpp,test,301,canonical_solution,"# Write a function to find the volume of a cone.
import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume",passed,3.403934000061781e-05,True,True,5,4,4,1,0,0,1,1,2,9,5,10,11,15,30.529325012980813,51.89147427955947,1.1111111111111112,57.65719364395497,3.203177424664165,0.01729715809318649,99.8807325900411
302,mbpp,test,302,canonical_solution,"# Write a python function to print positive numbers in a list.
def pos_nos(list1):
  for num in list1: 
    if num >= 0: 
       return num ",passed,4.498127000033492e-05,True,True,5,4,4,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
303,mbpp,test,303,canonical_solution,"# Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.
def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)",passed,8.775296999829152e-05,True,True,9,8,8,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,94.84516566254656
304,mbpp,test,304,canonical_solution,"# Write a python function to find the first maximum length of even word.
def find_Max_Len_Even(str): 
    n = len(str) 
    i = 0
    currlen = 0
    maxlen = 0
    st = -1
    while (i < n): 
        if (str[i] == ' '): 
            if (currlen % 2 == 0): 
                if (maxlen < currlen): 
                    maxlen = currlen 
                    st = i - currlen 
            currlen = 0 
        else : 
            currlen += 1
        i += 1
    if (currlen % 2 == 0): 
        if (maxlen < currlen): 
            maxlen = currlen 
            st = i - currlen 
    if (st == -1): 
        return ""-1"" 
    return str[st: st + maxlen] ",passed,4.881773999841244e-05,True,True,24,24,23,1,0,0,1,8,6,13,16,30,19,46,63.61549134016113,195.40466561840492,6.923076923076923,1352.8015312043417,75.15564062246342,0.0651348885394683,65.018825120695
305,mbpp,test,305,canonical_solution,"# Write a function to find the index of the last occurrence of a given number in a sorted array.
def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ",passed,8.04784999999697e-05,True,True,14,13,13,1,0,0,1,4,7,10,10,19,17,29,52.87076540327685,118.53642239625987,6.65,788.2672089351281,43.792622718618226,0.03951214079875329,76.53535489665786
306,mbpp,test,306,canonical_solution,"# Write a function to reflect the modified run-length encoding from a list.
from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]",passed,8.981880999954228e-05,True,True,7,8,6,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,97.17807241428865
307,mbpp,test,307,canonical_solution,"# Write a python function to find the maximum volume of a cuboid with given sum of sides.
def max_volume (s): 
    maxvalue = 0
    i = 1
    for i in range(s - 1): 
        j = 1
        for j in range(s): 
            k = s - i - j 
            maxvalue = max(maxvalue, i * j * k)         
    return maxvalue ",passed,5.1581850000275155e-05,True,True,10,9,9,1,0,0,1,3,2,7,5,10,9,15,21.651484454403228,47.548875021634686,1.4285714285714286,67.92696431662098,3.7737202398122767,0.01584962500721156,85.66514052845613
308,mbpp,test,308,canonical_solution,"# Write a function to find all five characters long word in the given string by using regex.
import re
def find_long_word(text):
  return (re.findall(r""\b\w{5}\b"", text))",passed,3.778706999810311e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
309,mbpp,test,309,canonical_solution,"# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.
def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares",passed,2.2820149999915885e-05,True,True,9,8,8,1,0,0,1,2,4,7,6,12,11,18,27.651484454403228,62.26976913547136,3.4285714285714284,213.49635132161606,11.860908406756447,0.020756589711823786,87.02295763472071
310,mbpp,test,310,canonical_solution,"# Write a function to find the demlo number for the given number.
def find_demlo(s): 
	l = len(s) 
	res = """" 
	for i in range(1,l+1): 
		res = res + str(i) 
	for i in range(l-1,0,-1): 
		res = res + str(i) 
	return res 	",passed,3.351323000060802e-05,True,True,9,8,8,1,0,0,1,3,3,5,5,9,8,14,16.36452797660028,42.0,2.7,113.4,6.300000000000001,0.014,88.08599477168818
311,mbpp,test,311,canonical_solution,"# Write a function to find all index positions of the minimum values in a given list.
def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result",passed,8.65634100000534e-05,True,True,5,4,4,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
312,mbpp,test,312,canonical_solution,"# Write a function to re-arrange the given array in alternating positive and negative items.
def right_rotate(arr, n, out_of_place, cur):
	temp = arr[cur]
	for i in range(cur, out_of_place, -1):
		arr[i] = arr[i - 1]
	arr[out_of_place] = temp
	return arr
def re_arrange(arr, n):
	out_of_place = -1
	for index in range(n):
		if (out_of_place >= 0):
			if ((arr[index] >= 0 and arr[out_of_place] < 0) or
			(arr[index] < 0 and arr[out_of_place] >= 0)):
				arr = right_rotate(arr, n, out_of_place, index)
				if (index-out_of_place > 2):
					out_of_place += 2
				else:
					out_of_place = - 1
		if (out_of_place == -1):
			if ((arr[index] >= 0 and index % 2 == 0) or
			 (arr[index] < 0 and index % 2 == 1)):
				out_of_place = index
	return arr",passed,0.00010730873999989399,True,True,23,20,22,1,0,0,1,2,10,29,26,48,39,74,174.10072980757323,391.1197641958064,8.275862068965518,3236.853220930812,179.82517894060067,0.13037325473193548,64.08609056215127
313,mbpp,test,313,canonical_solution,"# Write a function to extract the sum of alternate chains of tuples.
def sum_of_alternates(test_tuple):
  sum1 = 0
  sum2 = 0
  for idx, ele in enumerate(test_tuple):
    if idx % 2:
      sum1 += ele
    else:
      sum2 += ele
  return ((sum1),(sum2)) ",passed,6.626181000001453e-05,True,True,10,9,9,1,0,0,1,3,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,87.58789624254659
314,mbpp,test,314,canonical_solution,"# Write a python function to find the minimum number of squares whose sum is equal to a given number.
def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;",passed,2.7454909999846678e-05,True,True,12,11,11,1,0,0,1,4,5,6,6,12,11,18,27.11941547876375,62.26976913547136,5.0,311.3488456773568,17.29715809318649,0.020756589711823786,81.28383539802347
315,mbpp,test,315,canonical_solution,"# Write a function to get the word with most number of occurrences in the given strings list.
from collections import defaultdict 

def most_occurrences(test_list):
  temp = defaultdict(int)
  for sub in test_list:
    for wrd in sub.split():
      temp[wrd] += 1
  res = max(temp, key=temp.get)
  return (str(res)) ",passed,5.767988000002333e-05,True,True,10,8,8,1,0,1,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,94.71066273856995
316,mbpp,test,316,canonical_solution,"# Write a function to print check if the triangle is isosceles or not.
def check_isosceles(x,y,z):
  if x==y or y==z or z==x:
	   return True
  else:
     return False",passed,3.352071999984219e-05,True,True,6,5,5,1,0,0,1,4,2,6,4,9,8,13,17.509775004326936,39.0,1.5,58.5,3.25,0.013,96.45472110057342
317,mbpp,test,317,canonical_solution,"# Write a function to rotate a given list by specified number of items to the left direction.
def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result",passed,0.00010957110999925135,True,True,4,4,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
318,mbpp,test,318,canonical_solution,"# Write a python function to count negative numbers in a list.
def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count ",passed,4.4438099999979384e-05,True,True,7,6,6,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,96.17368815601037
319,mbpp,test,319,canonical_solution,"# Write a function to find all three, four, five characters long words in the given string by using regex.
import re
def find_char(text):
  return (re.findall(r""\b\w{3,5}\b"", text))",passed,5.158520000009048e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
320,mbpp,test,320,canonical_solution,"# Write a python function to count unset bits of a given number.
def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ",passed,2.6256039998315828e-05,True,True,9,8,8,1,0,0,1,3,5,7,6,12,12,18,31.26112492884004,64.52932501298082,4.285714285714286,276.55425005563205,15.36412500309067,0.02150977500432694,86.78006448016134
321,mbpp,test,321,canonical_solution,"# Write a function to count character frequency of a given string.
def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict",passed,8.186757999965266e-05,True,True,10,9,9,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,89.07186323500252
322,mbpp,test,322,canonical_solution,"# Write a python function to sort a list according to the second element in sublist.
def Sort(sub_li): 
    sub_li.sort(key = lambda x: x[1]) 
    return sub_li ",passed,0.00013156625000021905,True,True,4,4,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
323,mbpp,test,323,canonical_solution,"# Write a python function to check whether the triangle is valid or not if sides are given.
def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        ",passed,3.322263999990582e-05,True,True,6,5,5,1,0,0,1,4,3,9,7,15,12,22,33.28421251514428,78.86917501586544,2.5,197.1729375396636,10.954052085536865,0.026289725005288478,94.31320655664746
324,mbpp,test,324,canonical_solution,"# Write a function to find the sum of arithmetic progression.
def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total",passed,3.3258429999989404e-05,True,True,4,3,3,1,0,0,1,1,4,10,6,12,14,18,41.219280948873624,68.53238859703687,2.4,164.4777326328885,9.13765181293825,0.022844129532345624,100.0
325,mbpp,test,325,canonical_solution,"# Write a function to check whether the given month name contains 28 days or not.
def check_monthnum(monthname1):
  if monthname1 == ""February"":
    return True
  else:
    return False",passed,2.584572999921875e-05,True,True,6,5,5,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
326,mbpp,test,326,canonical_solution,"# Write a function that matches a word at the end of a string, with optional punctuation.
import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'",passed,3.336066000002802e-05,True,True,8,7,7,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
327,mbpp,test,327,canonical_solution,"# Write a python function to count the number of substrings with same first and last characters.
def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ",passed,4.010432999990598e-05,True,True,11,10,10,1,0,0,1,1,3,10,6,12,13,18,37.974168451037094,66.60791492653966,1.8,119.8942468677714,6.660791492653967,0.022202638308846556,82.69711501101054
328,mbpp,test,328,canonical_solution,"# Write a python function to find the maximum occuring divisor in an interval.
def find_Divisor(x,y):  
    if (x==y): 
        return y 
    return 2",passed,2.9153109999242588e-05,True,True,5,4,4,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
329,mbpp,test,329,canonical_solution,"# Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.
def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])",passed,5.344213000000764e-05,True,True,3,3,2,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
330,mbpp,test,330,canonical_solution,"# Write a function to convert the given set into ordered tuples.
def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)",passed,7.741010000245297e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
331,mbpp,test,331,canonical_solution,"# Write a function to find the smallest range that includes at-least one element from each of the given arrays.
from heapq import heappop, heappush
class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index
    def __lt__(self, other):
        return self.value < other.value
def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])",passed,0.00017011525000015126,True,True,27,26,26,1,0,0,1,5,4,11,9,18,15,27,46.053747805010275,105.48604608143,3.272727272727273,345.22705990286187,19.179281105714548,0.03516201536047667,65.58363495723042
332,mbpp,test,332,canonical_solution,"# Write a function to calculate the number of digits and letters in a string.
def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)",passed,4.087082000069131e-05,True,True,11,10,10,1,0,0,1,4,1,3,2,4,4,6,4.754887502163469,12.0,0.6666666666666666,8.0,0.4444444444444444,0.004,87.90902563666978
333,mbpp,test,333,canonical_solution,"# Write a python function to find number of elements with odd factors in a given range.
def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ",passed,3.051280000022416e-05,True,True,3,2,2,1,0,0,1,1,2,7,4,8,9,12,21.651484454403228,38.03910001730775,1.1428571428571428,43.47325716263743,2.415180953479857,0.012679700005769252,100.0
334,mbpp,test,334,canonical_solution,"# Write a function to find the difference between two consecutive numbers in a given list.
def diff_consecutivenums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result",passed,8.631247000010944e-05,True,True,4,4,3,1,0,0,1,2,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,100.0
335,mbpp,test,335,canonical_solution,"# Write a function to find entringer number e(n, k).
def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)",passed,3.763552999998865e-05,True,True,7,6,6,1,0,0,1,4,4,8,8,16,12,24,32.0,86.03910001730776,4.0,344.15640006923104,19.11980000384617,0.028679700005769252,90.82905473890318
336,mbpp,test,336,canonical_solution,"# Write a python function to count the number of squares in a rectangle.
def count_Squares(m,n): 
    if (n < m): 
        temp = m 
        m = n 
        n = temp 
    return n * (n + 1) * (3 * m - n + 1) // 6",passed,2.900882999995247e-05,True,True,7,6,6,1,0,0,1,2,5,11,8,16,16,24,49.663388279447084,96.0,3.6363636363636362,349.09090909090907,19.39393939393939,0.032,90.76493719194465
337,mbpp,test,337,canonical_solution,"# Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.
def bin_coff(n, r): 
	val = 1
	if (r > (n - r)): 
		r = (n - r) 
	for i in range(0, r): 
		val *= (n - i) 
		val //= (i + 1) 
	return val 
def find_ways(M): 
	n = M // 2
	a = bin_coff(2 * n, n) 
	b = a // (n + 1) 
	return (b) ",passed,3.056705000005877e-05,True,True,14,13,13,1,0,0,1,3,5,14,11,22,19,33,64.91260938324326,140.1816079436383,3.9285714285714284,550.713459778579,30.595192209921056,0.04672720264787944,76.15983663210696
338,mbpp,test,338,canonical_solution,"# Write a python function to check whether the given string is a binary string or not.
def check(string) :
    p = set(string) 
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        return (""Yes"") 
    else : 
        return (""No"") ",passed,2.848509000045851e-05,True,True,8,7,7,1,0,0,1,4,2,7,4,9,9,13,21.651484454403228,41.20902501875006,1.2857142857142858,52.98303216696437,2.943501787053576,0.013736341672916687,90.34841322670465
339,mbpp,test,339,canonical_solution,"# Write a python function to minimize the length of the string by removing occurrence of only one character.
def minimum_Length(s) : 
    maxOcc = 0
    n = len(s) 
    arr = [0]*26
    for i in range(n) : 
        arr[ord(s[i]) -ord('a')] += 1
    for i in range(26) : 
        if arr[i] > maxOcc : 
            maxOcc = arr[i] 
    return n - maxOcc ",passed,3.704657999989536e-05,True,True,11,10,10,1,0,0,1,4,4,9,5,10,13,15,36.52932501298081,55.506595772116384,2.2222222222222223,123.34799060470309,6.852666144705727,0.01850219859070546,83.25154313693369
340,mbpp,test,340,canonical_solution,"# Write a python function to find the first element occurring k times in a given array.
def first_Element(arr,n,k): 
    count_map = {}; 
    for i in range(0, n): 
        if(arr[i] in count_map.keys()): 
            count_map[arr[i]] += 1
        else: 
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):  
        if (count_map[arr[i]] == k): 
            return arr[i] 
        i += 1 
    return -1",passed,6.595511000341503e-05,True,True,14,13,13,1,0,0,1,5,4,7,6,11,11,17,27.651484454403228,58.81033751683406,3.142857142857143,184.83248933862134,10.268471629923408,0.019603445838944685,78.53225177646078
341,mbpp,test,341,canonical_solution,"# Write a python function to check whether all the characters in a given string are unique.
def unique_Characters(str):
    for i in range(len(str)):
        for j in range(i + 1,len(str)): 
            if (str[i] == str[j]):
                return False;
    return True;",passed,3.0311110000411644e-05,True,True,7,6,6,1,0,0,1,4,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,96.03918523203376
342,mbpp,test,342,canonical_solution,"# Write a function to remove a specified column from a given nested list.
def remove_column(list1, n):
   for i in list1: 
    del i[n] 
   return list1",passed,0.00013492122999991807,True,True,5,4,4,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
343,mbpp,test,343,canonical_solution,"# Write a function to find t-nth term of arithemetic progression.
def tn_ap(a,n,d):
  tn = a + (n - 1) * d
  return tn",passed,3.265921999968668e-05,True,True,4,3,3,1,0,0,1,1,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,100.0
344,mbpp,test,344,canonical_solution,"# Write a python function to count the number of rectangles in a circle of radius r.
def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles ",passed,2.9449529999965307e-05,True,True,11,10,10,1,0,0,1,4,3,11,9,18,14,27,42.808635307173745,102.7985828955553,2.4545454545454546,252.32379437999938,14.017988576666632,0.03426619429851843,81.37750658755175
345,mbpp,test,345,canonical_solution,"# Write a function to find the third angle of a triangle using two angles.
def find_angle(a,b):
 c = 180 - (a + b)
 return c
",passed,2.0384120000471738e-05,True,True,4,3,3,1,0,0,1,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
346,mbpp,test,346,canonical_solution,"# Write a function to find the maximum element of all the given tuple records.
def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) ",passed,0.00010582736000003479,True,True,4,3,3,1,0,0,1,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
347,mbpp,test,347,canonical_solution,"# Write a function to find modulo division of two lists using map and lambda function.
def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)",passed,6.000960000051236e-05,True,True,4,4,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
348,mbpp,test,348,canonical_solution,"# Write a python function to check whether one root of the quadratic equation is twice of the other or not.
def Check_Solution(a,b,c): 
    if (2*b*b == 9*a*c): 
        return (""Yes""); 
    else: 
        return (""No""); ",passed,3.384070000009842e-05,True,True,6,5,5,1,0,0,1,2,2,9,5,10,11,15,30.529325012980813,51.89147427955947,1.1111111111111112,57.65719364395497,3.203177424664165,0.01729715809318649,95.85525743736571
349,mbpp,test,349,canonical_solution,"# Write a function to find the n’th carol number.
def get_carol(n): 
	result = (2**n) - 1
	return result * result - 2",passed,2.2419599999921048e-05,True,True,4,3,3,1,0,0,1,1,3,6,4,8,9,12,20.264662506490406,38.03910001730775,2.0,76.0782000346155,4.226566668589751,0.012679700005769252,100.0
350,mbpp,test,350,canonical_solution,"# Write a function to remove empty lists from a given list of lists.
def remove_empty(list1):
  remove_empty = [x for x in list1 if x]
  return remove_empty",passed,0.00011997811000014736,True,True,4,3,3,1,0,0,1,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
351,mbpp,test,351,canonical_solution,"# Write a python function to find the item with maximum occurrences in a given list.
def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result",passed,6.418978999590763e-05,True,True,10,9,9,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,92.66715367674213
352,mbpp,test,352,canonical_solution,"# Write a function to add the k elements to each element in the tuple.
def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) ",passed,0.00013339256999984173,True,True,4,3,3,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
353,mbpp,test,353,canonical_solution,"# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.
def make_flip(ch): 
	return '1' if (ch == '0') else '0'
def get_flip_with_starting_charcter(str, expected): 
	flip_count = 0
	for i in range(len( str)): 
		if (str[i] != expected): 
			flip_count += 1
		expected = make_flip(expected) 
	return flip_count 
def min_flip_to_make_string_alternate(str): 
	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",passed,3.5811990000240715e-05,True,True,12,11,11,1,0,0,1,2,3,6,3,6,9,9,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938,83.6574181393079
354,mbpp,test,354,canonical_solution,"# Write a python function to count the number of digits of a given number.
def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count",passed,2.6369519999889235e-05,True,True,7,6,6,1,0,0,1,2,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,94.62239853253543
355,mbpp,test,355,canonical_solution,"# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.
def adjacent_num_product(list_nums):
    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",passed,4.7088769999845684e-05,True,True,3,3,2,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
356,mbpp,test,356,canonical_solution,"# Write a function to check if a binary tree is balanced or not.
class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False",passed,0.00017129558999982918,True,True,19,17,18,1,0,0,1,2,5,15,8,17,20,25,70.2129994085646,108.04820237218406,2.8333333333333335,306.13657338785487,17.007587410436383,0.03601606745739469,71.69762411188067
357,mbpp,test,357,canonical_solution,"# Write a function to repeat the given tuple n times.
def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) ",passed,8.743460999994567e-05,True,True,4,3,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
358,mbpp,test,358,canonical_solution,"# Write a function to find the lateral surface area of cuboid
def lateralsurface_cuboid(l,w,h):
  LSA = 2*h*(l+w)
  return LSA",passed,3.4859939999876134e-05,True,True,4,3,3,1,0,0,1,1,2,6,3,6,8,9,17.509775004326936,27.0,1.0,27.0,1.5,0.009,100.0
359,mbpp,test,359,canonical_solution,"# Write a function to sort a tuple by its float element.
def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort",passed,0.00012036820999981047,True,True,4,4,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
360,mbpp,test,360,canonical_solution,"# Write a function to find the smallest missing element in a sorted array.
def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)",passed,6.287277000012637e-05,True,True,9,8,8,1,0,0,1,3,5,8,7,14,13,21,35.60964047443681,77.70923408096293,4.375,339.97789910421284,18.887661061345156,0.025903078026987644,86.21489344490271
361,mbpp,test,361,canonical_solution,"# Write a function to sort a given list of elements in ascending order using heap queue algorithm.
import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result",passed,0.00011172376999979861,True,True,6,5,5,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
362,mbpp,test,362,canonical_solution,"# Write a function to find the volume of a cuboid.
def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume",passed,2.8291190000118148e-05,True,True,4,3,3,1,0,0,1,1,1,4,2,4,5,6,8.0,13.931568569324174,0.5,6.965784284662087,0.3869880158145604,0.004643856189774725,100.0
363,mbpp,test,363,canonical_solution,"# Write a function to print all permutations of a given string including duplicates.
def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list",passed,0.00012450868000030369,True,True,12,13,11,1,0,0,1,5,4,10,5,10,14,15,41.219280948873624,57.110323830864054,2.0,114.22064766172811,6.345591536762672,0.019036774610288017,79.82972887892764
364,mbpp,test,364,canonical_solution,"# Write a function to round the given number to the nearest multiple of a specific number.
def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)",passed,2.9914579999967828e-05,True,True,5,4,4,1,0,0,1,2,5,7,6,12,12,18,31.26112492884004,64.52932501298082,4.285714285714286,276.55425005563205,15.36412500309067,0.02150977500432694,99.08341130955861
365,mbpp,test,365,canonical_solution,"# Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.
def remove_replica(test_tup):
  temp = set()
  res = tuple(ele if ele not in temp and not temp.add(ele) 
				else 'MSP' for ele in test_tup)
  return (res)",passed,0.00010864443000002666,True,True,6,4,5,1,0,0,1,4,3,5,3,5,8,8,16.36452797660028,24.0,1.5,36.0,2.0,0.008,100.0
366,mbpp,test,366,canonical_solution,"# Write a python function to remove all occurrences of a character in a given string.
def remove_Char(s,c) :  
    counts = s.count(c) 
    s = list(s) 
    while counts :  
        s.remove(c) 
        counts -= 1 
    s = '' . join(s)   
    return (s) ",passed,3.273610000007921e-05,True,True,9,8,8,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,94.84516566254656
367,mbpp,test,367,canonical_solution,"# Write a python function to shift last element to first position in the given list.
def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list",passed,6.683952000003046e-05,True,True,4,4,3,1,0,0,1,1,2,3,3,4,5,7,6.754887502163469,16.253496664211536,1.3333333333333333,21.67132888561538,1.2039627158675212,0.005417832221403845,100.0
368,mbpp,test,368,canonical_solution,"# Write a function to find the surface area of a cuboid.
def surfacearea_cuboid(l,w,h):
  SA = 2*(l*w + l * h + w * h)
  return SA",passed,3.46617899992907e-05,True,True,4,3,3,1,0,0,1,1,2,9,6,12,11,18,30.529325012980813,62.26976913547136,1.3333333333333333,83.02635884729514,4.612575491516397,0.020756589711823786,100.0
369,mbpp,test,369,canonical_solution,"# Write a function to generate a two-dimensional array.
def multi_list(rownum,colnum):
  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]
  for row in range(rownum):
    for col in range(colnum):
        multi_list[row][col]= row*col
  return multi_list
",passed,0.00032423318000013524,True,True,7,6,6,1,0,0,1,5,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,99.49997274979674
370,mbpp,test,370,canonical_solution,"# Write a function to sort a list of lists by a given index of the inner list.
from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result",passed,0.00016957809000018643,True,True,5,4,4,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
371,mbpp,test,371,canonical_solution,"# Write a function to find the number of rotations in a circularly sorted array.
def find_rotation_count(A):
    (left, right) = (0, len(A) - 1)
    while left <= right:
        if A[left] <= A[right]:
            return left
        mid = (left + right) // 2
        next = (mid + 1) % len(A)
        prev = (mid - 1 + len(A)) % len(A)
        if A[mid] <= A[next] and A[mid] <= A[prev]:
            return mid
        elif A[mid] <= A[right]:
            right = mid - 1
        elif A[mid] >= A[left]:
            left = mid + 1
    return -1",passed,5.57164300001034e-05,True,True,16,15,15,1,0,0,1,7,8,25,18,35,33,53,140.0964047443681,267.35288832599804,5.6,1497.1761746255888,83.17645414586605,0.08911762944199934,71.31663109956375
372,mbpp,test,372,canonical_solution,"# Write a python function to toggle all odd bits of a given number.
def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n    
    while(temp > 0 ) : 
        if (count % 2 == 0) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ",passed,2.767025000139256e-05,True,True,9,10,8,1,0,0,1,3,8,9,8,16,17,24,52.52932501298081,98.09910819000817,7.111111111111111,697.5936582400581,38.75520323555878,0.03269970273000272,83.39235117526741
373,mbpp,test,373,canonical_solution,"# Write a python function to find the frequency of the smallest value in a given array.
def frequency_Of_Smallest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] < mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ",passed,5.754214000006641e-05,True,True,11,10,10,1,0,0,1,4,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,85.44303901425756
374,mbpp,test,374,canonical_solution,"# Write a function to find the n'th perrin number using recursion.
def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2 
  return get_perrin(n - 2) + get_perrin(n - 3)",passed,2.96090000000504e-05,True,True,9,8,8,1,0,0,1,4,3,7,6,12,10,18,24.406371956566698,59.794705707972525,2.5714285714285716,153.75781467764364,8.542100815424646,0.019931568569324175,86.87728890718493
375,mbpp,test,375,canonical_solution,"# Write a function to find out the minimum no of swaps required for bracket balancing in the given string.
def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap",passed,3.763222999964455e-05,True,True,17,16,16,1,0,0,1,5,4,10,8,16,14,24,41.219280948873624,91.37651812938249,3.2,292.404858014024,16.244714334112444,0.03045883937646083,73.80944555276918
376,mbpp,test,376,canonical_solution,"# Write a python function to check whether the hexadecimal number is even or odd.
def even_or_odd(N): 
    l = len(N) 
    if (N[l-1] =='0'or N[l-1] =='2'or 
        N[l-1] =='4'or N[l-1] =='6'or 
        N[l-1] =='8'or N[l-1] =='A'or 
        N[l-1] =='C'or N[l-1] =='E'): 
        return (""Even"") 
    else: 
        return (""Odd"") ",passed,2.8114859999277543e-05,True,True,10,6,9,1,0,0,1,9,3,26,17,40,29,57,126.96632017383187,276.90491672227165,2.3076923076923075,639.0113462821653,35.500630349009185,0.09230163890742388,83.34149798910768
377,mbpp,test,377,canonical_solution,"# Write a python function to find the highest power of 2 that is less than or equal to n.
def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ",passed,2.8524989999993977e-05,True,True,8,7,7,1,0,0,1,3,4,5,4,7,9,11,19.60964047443681,34.86917501586544,2.8,97.63369004442322,5.424093891356845,0.011623058338621813,90.99091687597276
378,mbpp,test,378,canonical_solution,"# Write a function to find the n'th lucas number.
def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ",passed,3.3503500000051644e-05,True,True,7,6,6,1,0,0,1,3,3,6,5,10,9,15,20.264662506490406,47.548875021634686,2.5,118.87218755408671,6.604010419671484,0.01584962500721156,92.76696544946398
379,mbpp,test,379,canonical_solution,"# Write a function to insert a given string at the beginning of all items in a list.
def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string",passed,7.16712399980679e-05,True,True,4,3,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
380,mbpp,test,380,canonical_solution,"# Write a function to convert more than one list to nested dictionary.
def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result",passed,0.00018362609999940106,True,True,4,4,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
381,mbpp,test,381,canonical_solution,"# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).
def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]",passed,7.374954999988858e-05,True,True,13,9,12,1,0,0,1,2,3,14,10,20,17,30,58.05785641096992,122.6238852375102,2.142857142857143,262.7654683660933,14.59808157589407,0.040874628412503396,80.75647579674967
382,mbpp,test,382,canonical_solution,"# Write a function to find the list with maximum length using lambda function.
def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)",passed,0.00012377650999042088,True,True,5,5,4,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
383,mbpp,test,383,canonical_solution,"# Write a function to check if given tuple is distinct or not.
def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return (res) ",passed,4.645274000040445e-05,True,True,10,9,9,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,92.66715367674213
384,mbpp,test,384,canonical_solution,"# Write a python function to find the first non-repeated character in a given string.
def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None",passed,2.8952079999839954e-05,True,True,14,13,13,1,0,0,1,5,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,80.89956175546526
385,mbpp,test,385,canonical_solution,"# Write a function to check whether the given string starts and ends with the same character or not using regex.
import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ",passed,3.277783999990902e-05,True,True,8,7,7,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
386,mbpp,test,386,canonical_solution,"# Write a function to find the median of three specific numbers.
def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median",passed,3.5436879999792834e-05,True,True,17,16,16,1,0,0,1,6,2,3,5,10,5,15,6.754887502163469,34.82892142331043,3.3333333333333335,116.09640474436812,6.449800263576006,0.01160964047443681,76.60804798494414
387,mbpp,test,387,canonical_solution,"# Write a function to compute the sum of digits of each number of a given list.
def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",passed,5.8026000000381825e-05,True,True,3,2,2,1,0,0,1,4,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
388,mbpp,test,388,canonical_solution,"# Write a function to perform the mathematical bitwise xor operation across the given tuples.
def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",passed,8.93822200001182e-05,True,True,4,3,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
389,mbpp,test,389,canonical_solution,"# Write a function to extract the frequency of unique tuples in the given list order irrespective.
def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)",passed,8.06125899998733e-05,True,True,4,3,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
390,mbpp,test,390,canonical_solution,"# Write a function to perform index wise addition of tuple elements in the given two nested tuples.
def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",passed,0.00019446828000013738,True,True,5,3,4,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
391,mbpp,test,391,canonical_solution,"# Write a function to compute the value of ncr%p.
def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ",passed,7.425251000086064e-05,True,True,8,7,7,1,0,0,1,4,4,8,6,11,12,17,32.0,60.94436251225966,2.75,167.59699690871406,9.310944272706337,0.020314787504086555,89.1584827160184
392,mbpp,test,392,canonical_solution,"# Write a function to check if a url is valid or not using regex.
import re
def is_valid_URL(str):
	regex = (""((http|https)://)(www.)?"" +
			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +
			""{2,256}\\.[a-z]"" +
			""{2,6}\\b([-a-zA-Z0-9@:%"" +
			""._\\+~#?&//=]*)"")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False",passed,3.2717319999164826e-05,True,True,15,10,14,1,0,0,1,3,2,10,5,10,12,15,35.219280948873624,53.77443751081735,1.0,53.77443751081735,2.987468750600964,0.017924812503605784,81.0425384963003
393,mbpp,test,393,canonical_solution,"# Write a python function to find the minimum of two numbers.
def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ",passed,2.9490119999877606e-05,True,True,6,5,5,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
394,mbpp,test,394,canonical_solution,"# Write a function to check whether an element exists within a tuple.
def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False",passed,7.4261870000214e-05,True,True,6,5,5,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
395,mbpp,test,395,canonical_solution,"# Write a python function to find the parity of a given number.
def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return (""Odd Parity""); 
    return (""Even Parity""); ",passed,2.8392240000130187e-05,True,True,10,9,9,1,0,0,1,2,3,12,11,22,15,33,47.77443751081735,128.92738965508113,2.75,354.5503215514731,19.69724008619295,0.04297579655169371,82.76633674206846
396,mbpp,test,396,canonical_solution,"# Write a function to create the next bigger number by rearranging the digits of a given number.
def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False",passed,3.26996900002996e-05,True,True,12,14,11,1,0,0,1,3,5,10,7,12,15,19,44.82892142331043,74.23092131656186,3.0,222.69276394968557,12.371820219426976,0.024743640438853954,78.59933836692224
397,mbpp,test,397,canonical_solution,"# Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.
import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs",passed,0.00012226783000000906,True,True,16,15,15,1,0,0,1,4,4,16,9,18,20,27,72.0,116.69205856195879,2.25,262.55713176440725,14.586507320244847,0.03889735285398626,74.24116974588195
398,mbpp,test,398,canonical_solution,"# Write a function to find the minimum product from the pairs of tuples within a given list.
def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min",passed,7.35482100000695e-05,True,True,4,3,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
399,mbpp,test,399,canonical_solution,"# Write a function to find the minimum value in a given heterogeneous list.
def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val",passed,5.2028380000024296e-05,True,True,4,3,3,1,0,0,1,3,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
400,mbpp,test,400,canonical_solution,"# Write a function to convert the given snake case string to camel case string by using regex.
import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))",passed,2.9978559999790378e-05,True,True,4,3,3,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
401,mbpp,test,401,canonical_solution,"# Write a python function to remove odd numbers from a given list.
def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l",passed,4.66162599997233e-05,True,True,6,5,5,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,99.39324397355226
402,mbpp,test,402,canonical_solution,"# Write a function to extract the nth element from a given list of tuples.
def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result",passed,0.00011640014000022347,True,True,4,3,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
403,mbpp,test,403,canonical_solution,"# Write a python function to check whether the value exists in a sequence or not.
def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0",passed,6.352748999972846e-05,True,True,13,12,12,1,0,0,1,6,2,5,3,6,7,9,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813,82.2966827690291
404,mbpp,test,404,canonical_solution,"# Write a python function to find a pair with highest product from a given array of integers.
def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ",passed,5.841659999987314e-05,True,True,11,12,10,1,0,0,1,5,4,10,5,10,14,15,41.219280948873624,57.110323830864054,2.0,114.22064766172811,6.345591536762672,0.019036774610288017,81.3031682468669
405,mbpp,test,405,canonical_solution,"# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.
MAX = 1000000
def breakSum(n): 
	dp = [0]*(n+1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 
	return dp[n]",passed,5.740355999989788e-05,True,True,9,8,8,1,0,0,1,2,3,12,8,16,15,24,47.77443751081735,93.76537429460444,2.0,187.53074858920888,10.418374921622716,0.03125512476486815,85.77824311490004
406,mbpp,test,406,canonical_solution,"# Write a function to find common first element in given list of tuple.
def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ",passed,0.00010017185000037897,True,True,9,9,8,1,0,0,1,4,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
407,mbpp,test,407,canonical_solution,"# Write a python function to find the sublist having maximum length.
def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList",passed,8.469873999274569e-05,True,True,4,3,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
408,mbpp,test,408,canonical_solution,"# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.
def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum",passed,6.577214000003551e-05,True,True,5,4,4,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
409,mbpp,test,409,canonical_solution,"# Write a python function to find the cube sum of first n even natural numbers.
def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum",passed,2.8889589999607778e-05,True,True,6,5,5,1,0,0,1,2,2,10,7,14,12,21,35.219280948873624,75.28421251514429,1.4,105.397897521202,5.855438751177889,0.025094737505048096,94.72367677963074
410,mbpp,test,410,canonical_solution,"# Write a function to concatenate each element of tuple by the delimiter.
def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ",passed,4.6350139998594384e-05,True,True,6,6,5,1,0,0,1,2,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,97.80049004369138
411,mbpp,test,411,canonical_solution,"# Write a python function to find the average of cubes of first n natural numbers.
def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ",passed,2.08681300000535e-05,True,True,6,5,5,1,0,0,1,2,3,6,5,10,9,15,20.264662506490406,47.548875021634686,2.5,118.87218755408671,6.604010419671484,0.01584962500721156,96.12102419098248
412,mbpp,test,412,canonical_solution,"# Write a function to solve gold mine problem.
def get_maxgold(gold, m, n): 
    goldTable = [[0 for i in range(n)] 
                        for j in range(m)]   
    for col in range(n-1, -1, -1): 
        for row in range(m):  
            if (col == n-1): 
                right = 0
            else: 
                right = goldTable[row][col+1] 
            if (row == 0 or col == n-1): 
                right_up = 0
            else: 
                right_up = goldTable[row-1][col+1] 
            if (row == m-1 or col == n-1): 
                right_down = 0
            else: 
                right_down = goldTable[row+1][col+1] 
            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) 
    res = goldTable[0][0] 
    for i in range(1, m): 
        res = max(res, goldTable[i][0])  
    return res ",passed,0.00010225059999982022,True,True,23,21,22,1,0,0,1,11,5,16,20,38,21,58,75.60964047443682,254.75441052116813,5.9375,1512.6043124694359,84.03357291496866,0.08491813684038937,65.33106790598148
413,mbpp,test,413,canonical_solution,"# Write a function to extract only the rear index element of each string in the given tuple.
def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ",passed,5.45488599999544e-05,True,True,4,3,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
414,mbpp,test,414,canonical_solution,"# Write a function to count the number of sublists containing a particular element.
def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr",passed,8.82953900000416e-05,True,True,7,6,6,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,96.17368815601037
415,mbpp,test,415,canonical_solution,"# Write a function to filter odd numbers using lambda function.
def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums",passed,7.784264000001428e-05,True,True,4,4,3,1,0,0,1,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
416,mbpp,test,416,canonical_solution,"# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.
import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)",passed,3.127650000010363e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
417,mbpp,test,417,canonical_solution,"# Write a function to sort the given array by using shell sort.
def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list",passed,9.844460000067556e-05,True,True,14,12,12,1,0,1,1,5,5,9,9,18,14,27,40.13896548741762,102.7985828955553,5.0,513.9929144777765,28.555161915432027,0.03426619429851843,78.1638277113043
418,mbpp,test,418,canonical_solution,"# Write a function to extract the elementwise and tuples from the given two tuples.
def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",passed,8.145945000023858e-05,True,True,4,3,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
419,mbpp,test,419,canonical_solution,"# Write a function to find the directrix of a parabola.
def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix",passed,3.421000000003005e-05,True,True,4,3,3,1,0,0,1,1,3,9,5,10,12,15,33.28421251514428,53.77443751081735,1.6666666666666667,89.62406251802892,4.9791145843349405,0.017924812503605784,100.0
420,mbpp,test,420,canonical_solution,"# Write a function that takes two lists and returns true if they have at least one common element.
def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result",passed,6.61848100000384e-05,True,True,8,7,7,1,0,0,1,4,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,96.91526591479679
421,mbpp,test,421,canonical_solution,"# Write a function to find the median of a trapezium.
def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median",passed,2.444824000008339e-05,True,True,4,3,3,1,0,0,1,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
422,mbpp,test,422,canonical_solution,"# Write a function to check whether the entered number is greater than the elements of the given array.
def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')",passed,4.4749209999963567e-05,True,True,7,6,6,1,0,0,1,2,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,97.1889513955995
423,mbpp,test,423,canonical_solution,"# Write a function that matches a string that has an a followed by one or more b's.
import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
",passed,3.254166000033365e-05,True,True,8,7,7,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
424,mbpp,test,424,canonical_solution,"# Write a python function to find the last digit of a given number.
def last_Digit(n) :
    return (n % 10) ",passed,5.5406500000572126e-05,True,True,3,2,2,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
425,mbpp,test,425,canonical_solution,"# Write a python function to print negative numbers in a list.
def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ",passed,4.1260220000367555e-05,True,True,5,4,4,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
426,mbpp,test,426,canonical_solution,"# Write a function to remove odd characters in a string.
def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",passed,3.3295310000767134e-05,True,True,7,6,6,1,0,0,1,3,4,8,5,10,12,15,32.0,53.77443751081735,2.5,134.43609377704337,7.468671876502409,0.017924812503605784,92.39280846526448
427,mbpp,test,427,canonical_solution,"# Write a function to count bidirectional tuple pairs.
def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) ",passed,0.00011100091999992401,True,True,8,7,7,1,0,0,1,5,3,9,5,10,12,15,33.28421251514428,53.77443751081735,1.6666666666666667,89.62406251802892,4.9791145843349405,0.017924812503605784,89.40459285833468
428,mbpp,test,428,canonical_solution,"# Write a function to convert a list of multiple integers into a single integer.
def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x",passed,4.981808999957593e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
429,mbpp,test,429,canonical_solution,"# Write a function to find all adverbs and their positions in a given sentence.
import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))",passed,4.525980999972035e-05,True,True,5,4,4,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
430,mbpp,test,430,canonical_solution,"# Write a function to find the surface area of a cube.
def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea",passed,2.572029000020848e-05,True,True,4,3,3,1,0,0,1,1,1,3,2,4,4,6,4.754887502163469,12.0,0.6666666666666666,8.0,0.4444444444444444,0.004,100.0
431,mbpp,test,431,canonical_solution,"# Write a function to find the ration of positive numbers in an array of integers.
from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",passed,9.542714999952295e-05,True,True,11,10,10,1,0,0,1,3,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,85.57754193823416
432,mbpp,test,432,canonical_solution,"# Write a python function to find the largest negative number from the given list.
def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max",passed,4.842648000021654e-05,True,True,7,6,6,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,99.76897859774995
433,mbpp,test,433,canonical_solution,"# Write a function to trim each tuple by k in the given tuple list.
def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ",passed,0.00013323571999990236,True,True,7,7,6,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,98.44310666020517
434,mbpp,test,434,canonical_solution,"# Write a function to perform index wise multiplication of tuple elements in the given two tuples.
def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",passed,0.00019759884999984934,True,True,5,3,4,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
435,mbpp,test,435,canonical_solution,"# Write a python function to count the occurence of all elements of list in a tuple.
from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ",passed,6.979669999964245e-05,True,True,8,7,7,1,0,0,1,3,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,93.45447839703378
436,mbpp,test,436,canonical_solution,"# Write a function to find cubes of individual elements in a list using lambda function.
def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums",passed,7.966324000001635e-05,True,True,4,4,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
437,mbpp,test,437,canonical_solution,"# Write a function to calculate the sum of perrin numbers.
def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum",passed,2.6207689999964146e-05,True,True,20,19,19,1,0,0,1,5,4,8,7,14,12,21,32.0,75.28421251514429,3.5,263.494743803005,14.638596877944723,0.025094737505048096,71.67411774404167
438,mbpp,test,438,canonical_solution,"# Write a python function to check whether the triangle is valid or not if 3 points are given.
def check_Triangle(x1,y1,x2,y2,x3,y3): 
    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   
    if a == 0: 
        return ('No') 
    else: 
        return ('Yes') ",passed,4.9450849999743696e-05,True,True,7,6,6,1,0,0,1,2,4,15,9,18,19,27,66.60335893412778,114.6940428629768,2.4,275.2657028711443,15.292539048396906,0.03823134762099227,90.2238942374831
439,mbpp,test,439,canonical_solution,"# Write a function to extract specified size of strings from a give list of string values.
def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result",passed,6.332886999985021e-05,True,True,4,3,3,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
440,mbpp,test,440,canonical_solution,"# Write a function to remove all whitespaces from the given string using regex.
import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))",passed,3.208503999985623e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
441,mbpp,test,441,canonical_solution,"# Write a function that gives loss amount if the given amount has loss else return none.
def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None",passed,2.948781999975836e-05,True,True,7,6,6,1,0,0,1,2,2,2,2,4,4,6,4.0,12.0,2.0,24.0,1.3333333333333333,0.004,97.08838515494764
442,mbpp,test,442,canonical_solution,"# Write a python function to find the sum of even factors of a number.
import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res ",passed,2.9216819999930976e-05,True,True,21,20,20,1,0,0,1,7,8,15,16,32,23,48,82.60335893412778,217.13097389073664,8.533333333333333,1852.8509772009527,102.93616540005293,0.07237699129691222,67.3842380858398
443,mbpp,test,443,canonical_solution,"# Write a function that matches a word containing 'z'.
import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",passed,3.49537600000005e-05,True,True,8,7,7,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
444,mbpp,test,444,canonical_solution,"# Write a function to check whether the given month number contains 31 days or not.
def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False",passed,2.703547000010076e-05,True,True,6,5,5,1,0,0,1,8,2,15,8,21,17,29,60.60335893412778,118.53642239625987,1.4,165.9509913547638,9.2194995197091,0.03951214079875329,92.53622702343365
445,mbpp,test,445,canonical_solution,"# Write a function to reverse strings in a given list of string values.
def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result",passed,6.592171000022518e-05,True,True,4,4,3,1,0,0,1,2,1,1,1,1,2,2,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666,100.0
446,mbpp,test,446,canonical_solution,"# Write a python function to find the sublist having minimum length.
def Find_Min(lst): 
    minList = min((x) for x in lst) 
    return minList",passed,7.994242999984636e-05,True,True,4,3,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
447,mbpp,test,447,canonical_solution,"# Write a function to find the area of a rectangle.
def rectangle_area(l,b):
  area=l*b
  return area",passed,3.1691060000866856e-05,True,True,4,3,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
448,mbpp,test,448,canonical_solution,"# Write a function to remove uppercase substrings from a given string by using regex.
import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)",passed,3.363962999998193e-05,True,True,6,6,5,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
449,mbpp,test,449,canonical_solution,"# Write a python function to get the first element of each sublist.
def Extract(lst): 
    return [item[0] for item in lst] ",passed,7.711314999937713e-05,True,True,3,2,2,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
450,mbpp,test,450,canonical_solution,"# Write a python function to count the upper case characters in a given string.
def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr",passed,2.7831130000777194e-05,True,True,6,6,5,1,0,0,1,4,4,8,4,8,12,12,32.0,43.01955000865388,2.0,86.03910001730776,4.779950000961542,0.014339850002884626,94.42916969027526
451,mbpp,test,451,canonical_solution,"# Write a function to find all possible combinations of the elements of a given list.
def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result",passed,0.0006465431200001604,True,True,8,7,7,1,0,0,1,3,2,6,3,6,8,9,17.509775004326936,27.0,1.0,27.0,1.5,0.009,91.76868584958225
452,mbpp,test,452,canonical_solution,"# Write a function to find the maximum product subarray of the given array.
def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far",passed,5.898115000036341e-05,True,True,24,23,23,1,0,0,1,7,5,14,10,20,19,30,64.91260938324326,127.43782540330756,3.5714285714285716,455.13509072609844,25.28528281811658,0.042479275134435855,66.85635414448714
453,mbpp,test,453,canonical_solution,"# Write a function to check if all values are same in a dictionary.
def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result",passed,6.725879999976314e-05,True,True,4,3,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
454,mbpp,test,454,canonical_solution,"# Write a function to drop empty items from a given dictionary.
def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1",passed,6.422142000019449e-05,True,True,4,4,3,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
455,mbpp,test,455,canonical_solution,"# Write a function to find the peak element in the given array.
def find_peak_util(arr, low, high, n): 
	mid = low + (high - low)/2
	mid = int(mid) 
	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and
		(mid == n - 1 or arr[mid + 1] <= arr[mid])): 
		return mid 
	elif (mid > 0 and arr[mid - 1] > arr[mid]): 
		return find_peak_util(arr, low, (mid - 1), n) 
	else: 
		return find_peak_util(arr, (mid + 1), high, n) 
def find_peak(arr, n): 
	return find_peak_util(arr, 0, n - 1, n) ",passed,4.869448000022203e-05,True,True,13,11,12,1,0,0,1,7,8,26,20,40,34,60,146.2114326716684,305.2477704750204,6.153846153846154,1878.447818307818,104.3582121282121,0.1017492568250068,75.40953101723986
456,mbpp,test,456,canonical_solution,"# Write a python function to convert decimal number to octal number.
def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)",passed,2.5578390000191577e-05,True,True,11,10,10,1,0,0,1,2,5,8,6,12,13,18,35.60964047443681,66.60791492653966,3.75,249.77968097452373,13.876648943029096,0.022202638308846556,82.96612085896375
457,mbpp,test,457,canonical_solution,"# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.
def max_product(arr, n ): 
	mpis =[0] * (n) 
	for i in range(n): 
		mpis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
					mpis[i] < (mpis[j] * arr[i])): 
						mpis[i] = mpis[j] * arr[i] 
	return max(mpis)",passed,8.410485000013069e-05,True,True,11,9,10,1,0,0,1,6,4,12,6,12,16,18,51.01955000865388,72.0,2.0,144.0,8.0,0.024,83.18954675577557
458,mbpp,test,458,canonical_solution,"# Write a function to find the maximum profit earned from a maximum of k stock transactions
def max_profit(price, k):
    n = len(price)
    final_profit = [[None for x in range(n)] for y in range(k + 1)]
    for i in range(k + 1):
        for j in range(n):
            if i == 0 or j == 0:
                final_profit[i][j] = 0
            else:
                max_so_far = 0
                for x in range(j):
                    curr_price = price[j] - price[x] + final_profit[i-1][x]
                    if max_so_far < curr_price:
                        max_so_far = curr_price
                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)
    return final_profit[k][n-1]",passed,9.625312000025588e-05,True,True,16,15,15,1,0,0,1,9,5,14,11,22,19,33,64.91260938324326,140.1816079436383,3.9285714285714284,550.713459778579,30.595192209921056,0.04672720264787944,73.01094662774142
459,mbpp,test,459,canonical_solution,"# Write a function to find the pairwise addition of the elements of the given tuples.
def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",passed,6.46046800000022e-05,True,True,4,4,3,1,0,0,1,2,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
460,mbpp,test,460,canonical_solution,"# Write a python function to find remainder of array multiplication divided by n.
def find_remainder(arr, lens, n): 
    mul = 1
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ",passed,5.193486000052872e-05,True,True,6,5,5,1,0,0,1,2,2,5,4,8,7,12,13.60964047443681,33.68825906469125,1.6,53.901214503506004,2.9945119168614447,0.011229419688230418,97.16895722861136
461,mbpp,test,461,canonical_solution,"# Write a python function to check whether the given list contains consecutive numbers or not.
def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ",passed,4.769324999998048e-05,True,True,3,2,2,1,0,0,1,1,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
462,mbpp,test,462,canonical_solution,"# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.
def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)",passed,0.00012589815000012549,True,True,4,3,3,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
463,mbpp,test,463,canonical_solution,"# Write a function to replace characters in a string.
def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2",passed,3.843226000014965e-05,True,True,4,3,3,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
464,mbpp,test,464,canonical_solution,"# Write a function to sort counter by value.
from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter",passed,0.00010442235999960303,True,True,6,5,5,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
465,mbpp,test,465,canonical_solution,"# Write a python function to find the sum of the largest and smallest value in a given array.
def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum",passed,4.001764000008734e-05,True,True,4,3,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
466,mbpp,test,466,canonical_solution,"# Write a python function to convert the given string to lower case.
def is_lower(string):
  return (string.lower())",passed,2.627389999929619e-05,True,True,3,2,2,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
467,mbpp,test,467,canonical_solution,"# Write a function to remove lowercase substrings from a given string.
import re
def remove_lowercase(str1):
 remove_lower = lambda text: re.sub('[a-z]', '', text)
 result =  remove_lower(str1)
 return result",passed,3.437197000039305e-05,True,True,6,6,5,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
468,mbpp,test,468,canonical_solution,"# Write a python function to find the first digit of a given number.
def first_Digit(n) :  
    while n >= 10:  
        n = n / 10; 
    return int(n) ",passed,2.655676000017593e-05,True,True,5,4,4,1,0,0,1,2,2,2,2,4,4,6,4.0,12.0,2.0,24.0,1.3333333333333333,0.004,100.0
469,mbpp,test,469,canonical_solution,"# Write a python function to find the maximum occurring character in a given string.
def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch",passed,3.2507080000030444e-05,True,True,13,12,12,1,0,0,1,4,4,6,4,7,10,11,23.509775004326936,36.541209043760986,2.3333333333333335,85.26282110210897,4.736823394561609,0.012180403014586996,81.44366445517792
470,mbpp,test,470,canonical_solution,"# Write a function to determine if there is a subset of the given set with sum equal to the given sum.
def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",passed,7.931852000012895e-05,True,True,9,8,8,1,0,0,1,5,4,8,10,20,12,30,32.0,107.5488750216347,5.0,537.7443751081735,29.874687506009636,0.03584962500721157,84.9576707704636
471,mbpp,test,471,canonical_solution,"# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
import re 
def match(text): 
		pattern = '[A-Z]+[a-z]+$'
		if re.search(pattern, text): 
				return('Yes') 
		else: 
				return('No') ",passed,2.974160999997366e-05,True,True,8,7,7,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
472,mbpp,test,472,canonical_solution,"# Write a python function to find the first natural number whose factorial is divisible by x.
def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i ",passed,3.378064000003178e-05,True,True,9,8,8,1,0,0,1,3,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,89.42957974937883
473,mbpp,test,473,canonical_solution,"# Write a function to remove the matching tuples from the given two tuples.
def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ",passed,0.00014873336999983168,True,True,4,3,3,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
474,mbpp,test,474,canonical_solution,"# Write a function to find the largest palindromic number in the given array.
def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1",passed,5.397169999980633e-05,True,True,19,18,18,1,0,0,1,4,8,11,14,25,19,39,62.053747805010275,165.66917302429982,9.090909090909092,1506.0833911299985,83.67129950722214,0.05522305767476661,69.99088347422935
475,mbpp,test,475,canonical_solution,"# Write a function to compute binomial probability for the given number.
def nCr(n, r): 
	if (r > n / 2): 
		r = n - r 
	answer = 1 
	for i in range(1, r + 1): 
		answer *= (n - r + i) 
		answer /= i 
	return answer 
def binomial_probability(n, k, p): 
	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) ",passed,3.1009989999972735e-05,True,True,11,10,10,1,0,0,1,3,5,17,12,24,22,36,81.0965087756926,160.5395382709427,3.5294117647058822,566.6101350739154,31.478340837439745,0.05351317942364757,80.15645560426046
476,mbpp,test,476,canonical_solution,"# Write a function to sort a list of tuples in increasing order by the last element in each tuple.
def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup",passed,0.00010890814999982012,True,True,10,9,9,1,0,0,1,4,4,7,8,14,11,22,27.651484454403228,76.10749561002055,4.0,304.4299824400822,16.912776802226787,0.025369165203340184,84.10021604868048
477,mbpp,test,477,canonical_solution,"# Write a function to find the area of a pentagon.
import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area",passed,3.128150999941681e-05,True,True,5,4,4,1,0,0,1,1,3,9,5,10,12,15,33.28421251514428,53.77443751081735,1.6666666666666667,89.62406251802892,4.9791145843349405,0.017924812503605784,99.77234235945834
478,mbpp,test,478,canonical_solution,"# Write a python function to find the frequency of the largest value in a given array.
def frequency_Of_Largest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] >mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ",passed,5.5034750000118036e-05,True,True,11,10,10,1,0,0,1,4,3,5,3,6,8,9,16.36452797660028,27.0,1.8,48.6,2.7,0.009,85.44303901425756
479,mbpp,test,479,canonical_solution,"# Write a function to extract all the pairs which are symmetric in the given tuple list.
def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) ",passed,0.00013033899000220117,True,True,5,4,4,1,0,0,1,4,2,4,2,4,6,6,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312,100.0
480,mbpp,test,480,canonical_solution,"# Write a function to find the sum of geometric progression series.
import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total",passed,3.4123549999947046e-05,True,True,5,4,4,1,0,0,1,1,3,7,4,8,10,12,24.406371956566698,39.863137138648355,1.7142857142857142,68.33680652339717,3.796489251299843,0.013287712379549451,100.0
481,mbpp,test,481,canonical_solution,"# Write a function to search an element in the given array by using binary search.
def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found",passed,5.262990999995054e-05,True,True,15,14,14,1,0,0,1,5,8,13,10,19,21,29,72.10571633583419,127.37720526058406,5.846153846153846,744.6667384464914,41.37037435813841,0.04245906842019469,74.96353609948505
482,mbpp,test,482,canonical_solution,"# Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.
import math
def calculate_polygons(startx, starty, endx, endy, radius):
    sl = (2 * radius) * math.tan(math.pi / 6)
    p = sl * 0.5
    b = sl * math.cos(math.radians(30))
    w = b * 2
    h = 2 * sl   
    startx = startx - w
    starty = starty - h
    endx = endx + w
    endy = endy + h
    origx = startx
    origy = starty
    xoffset = b
    yoffset = 3 * p
    polygons = []
    row = 1
    counter = 0
    while starty < endy:
        if row % 2 == 0:
            startx = origx + xoffset
        else:
            startx = origx
        while startx < endx:
            p1x = startx
            p1y = starty + p
            p2x = startx
            p2y = starty + (3 * p)
            p3x = startx + b
            p3y = starty + h
            p4x = startx + w
            p4y = starty + (3 * p)
            p5x = startx + w
            p5y = starty + p
            p6x = startx + b
            p6y = starty
            poly = [
                (p1x, p1y),
                (p2x, p2y),
                (p3x, p3y),
                (p4x, p4y),
                (p5x, p5y),
                (p6x, p6y),
                (p1x, p1y)]
            polygons.append(poly)
            counter += 1
            startx += w
        starty += yoffset
        row += 1
    return polygons",passed,0.0012179663799999929,True,True,51,43,50,1,0,0,1,4,7,28,32,64,35,96,154.25742227201613,492.41116962671674,8.0,3939.289357013734,218.84940872298523,0.16413705654223892,53.42405836383121
483,mbpp,test,483,canonical_solution,"# Write a function to convert the given binary tuple to integer.
def binary_to_integer(test_tup):
  res = int("""".join(str(ele) for ele in test_tup), 2)
  return (str(res)) ",passed,6.229485999995177e-05,True,True,4,3,3,1,0,0,1,2,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
484,mbpp,test,484,canonical_solution,"# Write a function to remove lowercase substrings from a given string by using regex.
import re
def remove_lowercase(str1):
  remove_lower = lambda text: re.sub('[a-z]', '', text)
  result =  remove_lower(str1)
  return (result)",passed,3.977023000004465e-05,True,True,6,6,5,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
485,mbpp,test,485,canonical_solution,"# Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.
import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums",passed,9.077854999986812e-05,True,True,5,4,4,1,0,0,1,1,0,0,0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,100.0
486,mbpp,test,486,canonical_solution,"# Write a function to find the surface area of a cone.
import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA",passed,3.57507299986537e-05,True,True,6,5,5,1,0,0,1,1,2,8,6,12,10,18,26.0,59.794705707972525,1.5,89.69205856195879,4.9828921423310435,0.019931568569324175,95.55866935583664
487,mbpp,test,487,canonical_solution,"# Write a python function to find gcd of two positive integers.
def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break  
    return gcd",passed,3.5599260000367396e-05,True,True,10,9,9,1,0,0,1,5,5,11,9,17,16,26,49.663388279447084,104.0,3.8636363636363638,401.8181818181818,22.32323232323232,0.034666666666666665,83.01619877391786
488,mbpp,test,488,canonical_solution,"# Write a function to find the diameter of a circle.
def diameter_circle(r):
  diameter=2*r
  return diameter",passed,2.1188439999946242e-05,True,True,4,3,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
489,mbpp,test,489,canonical_solution,"# Write a function to concatenate all elements of the given list into a string.
def concatenate_elements(list):
  ans = ' '
  for i in list:
    ans = ans+ ' '+i
  return (ans) ",passed,5.4213160000244896e-05,True,True,6,5,5,1,0,0,1,2,1,4,2,4,5,6,8.0,13.931568569324174,0.5,6.965784284662087,0.3869880158145604,0.004643856189774725,99.85407908721824
490,mbpp,test,490,canonical_solution,"# Write a python function to find common divisor between two numbers in a given pair.
def ngcd(x,y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x,y):
  n = ngcd(x,y)
  result = 0
  z = int(n**0.5)
  i = 1
  while(i <= z):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result",passed,3.236393999941356e-05,True,True,20,19,19,1,0,0,1,5,8,21,18,36,29,54,116.23866587835397,262.33097373688895,6.857142857142857,1798.8409627672384,99.93560904262435,0.08744365791229632,67.4744979372456
491,mbpp,test,491,canonical_solution,"# Write a python function to find remainder of two numbers.
def find(n,m):
  r = n%m
  return (r)",passed,2.8806130000020858e-05,True,True,4,3,3,1,0,0,1,1,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
492,mbpp,test,492,canonical_solution,"# Write a function to add consecutive numbers of a given list.
def add_consecutive_nums(nums):
    result = [b+a for a, b in zip(nums[:-1], nums[1:])]
    return result",passed,9.008008000137124e-05,True,True,4,4,3,1,0,0,1,2,2,3,2,3,5,5,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034,100.0
493,mbpp,test,493,canonical_solution,"# Write a python function to find the cube sum of first n natural numbers.
def sum_Of_Series(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += i * i*i       
    return sum",passed,2.740608000010525e-05,True,True,6,5,5,1,0,0,1,2,2,6,4,8,8,12,17.509775004326936,36.0,1.3333333333333333,48.0,2.6666666666666665,0.012,96.96713167361577
494,mbpp,test,494,canonical_solution,"# Write a function to move all zeroes to the end of the given array.
def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A",passed,0.0001002314900000556,True,True,10,9,9,1,0,0,1,4,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,92.5326507527655
495,mbpp,test,495,canonical_solution,"# Write a function to calculate the permutation coefficient of given p(n, k).
def permutation_coefficient(n, k): 
	P = [[0 for i in range(k + 1)] 
			for j in range(n + 1)] 
	for i in range(n + 1): 
		for j in range(min(i, k) + 1): 
			if (j == 0): 
				P[i][j] = 1
			else: 
				P[i][j] = P[i - 1][j] + ( 
						j * P[i - 1][j - 1]) 
			if (j < k): 
				P[i][j + 1] = 0
	return P[n][k] ",passed,7.160304999842993e-05,True,True,14,11,13,1,0,0,1,7,5,10,12,24,15,36,44.82892142331043,140.64806144190666,6.0,843.88836865144,46.88268714730222,0.04688268714730222,77.1943406820279
496,mbpp,test,496,canonical_solution,"# Write a function to remove specific words from a given list.
def remove_words(list1, removewords):
    for word in list(list1):
        if word in removewords:
            list1.remove(word)
    return list1  ",passed,0.000102440220000517,True,True,6,5,5,1,0,0,1,3,1,2,1,2,3,3,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565,100.0
497,mbpp,test,497,canonical_solution,"# Write a function to check if the common elements between two given lists are in the same order or not.
def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2",passed,7.895304999976815e-05,True,True,6,5,5,1,0,0,1,5,3,6,4,8,9,12,20.264662506490406,38.03910001730775,2.0,76.0782000346155,4.226566668589751,0.012679700005769252,96.39608060433562
498,mbpp,test,498,canonical_solution,"# Write a python function to find the average of odd numbers till a given odd number.
def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ",passed,2.5481090000312177e-05,True,True,12,11,11,1,0,0,1,3,7,7,8,15,14,23,39.302968908806456,87.56916320732489,7.5,656.7687240549367,36.487151336385374,0.029189721069108297,80.38152261836811
499,mbpp,test,499,canonical_solution,"# Write a function to find the number of subsequences having product smaller than k for the given non negative array.
def no_of_subsequences(arr, k): 
	n = len(arr) 
	dp = [[0 for i in range(n + 1)] 
			for j in range(k + 1)] 
	for i in range(1, k + 1): 
		for j in range(1, n + 1): 
			dp[i][j] = dp[i][j - 1] 
			if arr[j - 1] <= i and arr[j - 1] > 0: 
				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1
	return dp[k][n]",passed,0.00017059945000028165,True,True,11,9,10,1,0,0,1,7,6,14,15,30,20,45,68.81274391313339,194.4867642699313,6.428571428571429,1250.272056020987,69.45955866783261,0.06482892142331044,80.03327216112962
